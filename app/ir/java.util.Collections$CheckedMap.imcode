class java/util/Collections$CheckedMap {
 
 method typeCheck(Ljava/lang/Object;Ljava/lang/Object;)V {
  +START:   #1
        if vR1==null goto B28;   
  +B4:   #1
        if vR0.keyType.isInstance@extra(vR1)!=0 goto B28;   
  -B15:   #1
        throw new java/lang/ClassCastException(vR0.badKeyMsg@special(vR1));   
  +B28:   #2
        if vR2==null goto B56;   
  +B32:   #1
        if vR0.valueType.isInstance@extra(vR2)!=0 goto B56;   
  -B43:   #1
        throw new java/lang/ClassCastException(vR0.badValueMsg@special(vR2));   
  +B56:   #2
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 0 any 2 found 0 typeCheck
 
 method typeCheck(Ljava/util/function/BiFunction;)Ljava/util/function/BiFunction; {
  +START:   #1
        requireNonNull@special(vR1);   [ RR  R]
        b0 = vR0;    
        b1 = vR1;    
        <operant>;   
        <operant>;   
        <operant>;   
        return vl1;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 0 any 2 found 0 typeCheck
 
 method badKeyMsg(Ljava/lang/Object;)Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra("Attempt to insert ").append@extra(vR1.getClass()).append@extra(" key into map with key type ").append@extra(vR0.keyType).toString@extra();   
  +END:   #1
 }
// Register: rd 3/3 wr 9 swaps 4 any 0 found 0 badKeyMsg
 
 method badValueMsg(Ljava/lang/Object;)Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra("Attempt to insert ").append@extra(vR1.getClass()).append@extra(" value into map with value type ").append@extra(vR0.valueType).toString@extra();   
  +END:   #1
 }
// Register: rd 3/3 wr 9 swaps 4 any 0 found 0 badValueMsg
 
 method <init>(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.m = (java/util/Map)(requireNonNull@special(vR1));   
        vR0.keyType = (java/lang/Class)(requireNonNull@special(vR2));   
        vR0.valueType = (java/lang/Class)(requireNonNull@special(vR3));   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 0 found 0 <init>
 
 method size()I {
  +START:   #1
        return vR0.m.size();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method isEmpty()Z {
  +START:   #1
        return vR0.m.isEmpty();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isEmpty
 
 method containsKey(Ljava/lang/Object;)Z {
  +START:   #1
        return vR0.m.containsKey(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 containsKey
 
 method containsValue(Ljava/lang/Object;)Z {
  +START:   #1
        return vR0.m.containsValue(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 containsValue
 
 method get(Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        return vR0.m.get(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 get
 
 method remove(Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        return vR0.m.remove(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 remove
 
 method clear()V {
  +START:   #1
        vR0.m.clear();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 clear
 
 method keySet()Ljava/util/Set; {
  +START:   #1
        return vR0.m.keySet();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 keySet
 
 method values()Ljava/util/Collection; {
  +START:   #1
        return vR0.m.values();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 values
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        if vR1==vR0 goto B18;   
  +B5:   #1
        if vR0.m.equals(vR1)==0 goto B22;   
  +B18:   #1
        b0 = 1;    
        goto +B23b0;   forward return[ i  ..]
  +B22:   #1
        b0 = 0;    
  +B23b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 1 found 0 equals
 
 method hashCode()I {
  +START:   #1
        return vR0.m.hashCode();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 hashCode
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return vR0.m.toString();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 toString
 
 method put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        vR0.typeCheck@special(vR1,vR2);   [   RRR] 
        return vR0.m.put(vR1,vR2);   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 put
 
 method putAll(Ljava/util/Map;)V {
  +START:   #1
        vR2 = vR1.entrySet().toArray();    [ RR . R] [ RR R R] 
        vR3 = new java/util/ArrayList(vR2.length);    [ RR . i][ RR . iiR]
        vR4 = vR2;    
        vi5 = vR4.length;    
        vi6 = 0;    
  +B33:   #1
        if vi6>=vi5 goto B104;   
  +B40:   #1
        vR7 = vR4[vi6];    
        vR8 = (java/util/Map$Entry)(vR7);    
        vR9 = vR8.getKey();    [RRRiiRR RR . R..] 
        vR10 = vR8.getValue();    [RRRiiRRR RR . R..] 
        vR0.typeCheck@special(vR9,vR10);   [RRRiiRRRR RR . RRR] 
        b1 = new java/util/AbstractMap$SimpleImmutableEntry(vR9,vR10);    [ RR . i..][ RR . iRRR]
        vR3.add(b1);   [RRRiiRRRR RR . RR..] 
        vi6++;   
        goto +B33;   [RRRiiRRRR RR . ....]
  +B104:   #1
        vR4 = vR3.iterator();    [RRRiiRRRR RR . R...] 
  +B112:   #1
        if vR4.hasNext()==0 goto B161;   
  +B122:   #1
        vR5 = (java/util/Map$Entry)(vR4.next());    
        vR0.m.put(vR5.getKey(),vR5.getValue());   [RRRRiRRRR RR iR RRR.] 
        goto +B112;   [RRRRiRRRR RR iR ....]
  +B161:   #1
        return;   
  +END:   #1
 }
// Register: rd 28/28 wr 20 swaps 1 any 4 found 1 putAll
 
 method entrySet()Ljava/util/Set; {
  +START:   #1
        if vR0.entrySet!=null goto B31;   
  +B7:   #1
        b1 = new java/util/Collections$CheckedMap$CheckedEntrySet(vR0.m.entrySet(),vR0.valueType);    [ ?R  i][ ?R . iRRR]
        vR0.entrySet = b1;   
  +B31:   #1
        return vR0.entrySet;   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 entrySet
 
 method lambda$typeCheck$0(Ljava/util/function/BiFunction;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        vR4 = vR1.apply(vR2,vR3);    [   RRR] 
        vR0.typeCheck@special(vR2,vR4);   [R   RRR] 
        return vR4;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 lambda$typeCheck$0
}
