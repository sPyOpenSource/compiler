class java/net/Socket {
 
 method <init>(Ljx/net/TCPSocket;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.tcpSocket = vR1;   
        b1 = new jx/net/TCPInputStream(vR1);    [ ?R  i][ ?R . iRR]
        vR0.inputStream = b1;   
        b1 = new jx/net/TCPOutputStream(vR1);    [ ?R . i..][ ?R . iRR]
        vR0.outputStream = b1;   
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 4 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljava/lang/String;I)V {
  +START:   #1
        b1 = new jx/net/IPv4Address(vR1);    [ ?R  i][ ?R . iRR]
        vR0.<init>@special(b1,vi2);   [ ?R . iRR] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/net/IPAddress;I)V {
  +START:   #1
        vR0.<init>@special();   [ RR  R] 
        vR0.remoteAddress = vR1;   
        vR0.remotePort = vi2;   
        vR0.net = (jx/net/NetInit)(waitUntilPortalAvailable@special(getInitialNaming@special(),"NET"));   
        vR3 = new jx/zero/Memory()[5];    
        vi4 = 0;    
  +B37:   #1
        if vi4>=vR3.length goto B63;   
  +B44:   #1
        vR3[vi4] = vR0.net.getTCPBuffer();   
        vi4++;   
        goto +B37;   [Ri RR ... ..]
  +B63:   #1
        vR0.tcpSocket = vR0.net.getTCPSocket(vi2,vR0.net.getLocalAddress(),vR3);   
  +B87:   #2
        vR0.tcpSocket.open(vR1,vi2);   [Ri RR ... iRR.] 
  +B98:   #2
        goto +B155;   [Ri RR ... ....]
  -H101<caught exception>:   #1 reference
        vR4 = <caught exception>;    
        out.println("Socket: TCPSocket reported invalid IPAddress");   [RR RR i.. RR..] 
        throw new java/lang/Error("");   
  -H121<caught exception>:   #1 reference
        vR4 = <caught exception>;    
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ... i...][ RR ... iR..]
        b0.println(b1.append@extra("Socket: TCPSocket reported IOException ").append@extra(vR4.getMessage()).toString@extra());   [RR RR iii. RR..] 
        throw vR4;   
  +B155:   #1
        b1 = new jx/net/TCPInputStream(vR0.tcpSocket);    [ RR .... i...][ RR .... iRR.]
        vR0.inputStream = b1;   
        b1 = new jx/net/TCPOutputStream(vR0.tcpSocket);    [ RR .... i...][ RR .... iRR.]
        vR0.outputStream = b1;   
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
87 - 98 handler 101 type 84
87 - 98 handler 121 type 104
 }
// Register: rd 30/30 wr 23 swaps 5 any 2 found 0 <init>
 
 method getOutputStream()Ljava/io/OutputStream; {
  +START:   #1
        return vR0.outputStream;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getOutputStream
 
 method getInputStream()Ljava/io/InputStream; {
  +START:   #1
        return vR0.inputStream;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getInputStream
 
 method getRemoteAddress()Ljx/net/IPAddress; {
  +START:   #1
        return vR0.remoteAddress;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getRemoteAddress
 
 method getRemotePort()I {
  +START:   #1
        return vR0.remotePort;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getRemotePort
 
 method close()V {
  +START:   #1
        vR0.tcpSocket.close();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 close
 
 method setSoTimeout(I)V {
  -START:   #1
        throw new java/lang/Error("no setsotimout");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 setSoTimeout
}
