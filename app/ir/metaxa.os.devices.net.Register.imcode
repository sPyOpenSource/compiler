class metaxa/os/devices/net/Register {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method REGISTER_WINDOW_0()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_0
 
 method REGISTER_WINDOW_1()I {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_1
 
 method REGISTER_WINDOW_2()I {
  +START:   #1
        return 2;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_2
 
 method REGISTER_WINDOW_3()I {
  +START:   #1
        return 3;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_3
 
 method REGISTER_WINDOW_4()I {
  +START:   #1
        return 4;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_4
 
 method REGISTER_WINDOW_5()I {
  +START:   #1
        return 5;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_5
 
 method REGISTER_WINDOW_6()I {
  +START:   #1
        return 6;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_6
 
 method REGISTER_WINDOW_7()I {
  +START:   #1
        return 7;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_7
 
 method REGISTER_WINDOW_MASK()I {
  +START:   #1
        return 57344;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REGISTER_WINDOW_MASK
 
 method INTSTATUS_INTERRUPT_MASK()I {
  +START:   #1
        return 1774;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_INTERRUPT_MASK
 
 method BIOS_ROM_ADDRESS_REGISTER()I {
  +START:   #1
        return 4;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 BIOS_ROM_ADDRESS_REGISTER
 
 method BIOS_ROM_DATA_REGISTER()I {
  +START:   #1
        return 8;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 BIOS_ROM_DATA_REGISTER
 
 method EEPROM_COMMAND_REGISTER()I {
  +START:   #1
        return 10;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EEPROM_COMMAND_REGISTER
 
 method EEPROM_BUSY_BIT()I {
  +START:   #1
        return bit_15@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EEPROM_BUSY_BIT
 
 method EEPROM_COMMAND_READ()I {
  +START:   #1
        return 128;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EEPROM_COMMAND_READ
 
 method EEPROM_WRITE_ENABLE()I {
  +START:   #1
        return 48;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EEPROM_WRITE_ENABLE
 
 method EEPROM_ERASE_REGISTER()I {
  +START:   #1
        return 192;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EEPROM_ERASE_REGISTER
 
 method EEPROM_WRITE_REGISTER()I {
  +START:   #1
        return 64;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EEPROM_WRITE_REGISTER
 
 method EEPROM_DATA_REGISTER()I {
  +START:   #1
        return 12;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EEPROM_DATA_REGISTER
 
 method INTSTATUS_COMMAND_REGISTER()I {
  +START:   #1
        return 14;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_COMMAND_REGISTER
 
 method INTSTATUS_INTERRUPT_LATCH()I {
  +START:   #1
        return bit_0@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_INTERRUPT_LATCH
 
 method INTSTATUS_HOST_ERROR()I {
  +START:   #1
        return bit_1@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_HOST_ERROR
 
 method INTSTATUS_TX_COMPLETE()I {
  +START:   #1
        return bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_TX_COMPLETE
 
 method INTSTATUS_RX_COMPLETE()I {
  +START:   #1
        return bit_4@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_RX_COMPLETE
 
 method INTSTATUS_INTERRUPT_REQUESTED()I {
  +START:   #1
        return bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_INTERRUPT_REQUESTED
 
 method INTSTATUS_UPDATE_STATISTICS()I {
  +START:   #1
        return bit_7@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_UPDATE_STATISTICS
 
 method INTSTATUS_LINK_EVENT()I {
  +START:   #1
        return bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_LINK_EVENT
 
 method INTSTATUS_DOWN_COMPLETE()I {
  +START:   #1
        return bit_9@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_DOWN_COMPLETE
 
 method INTSTATUS_UP_COMPLETE()I {
  +START:   #1
        return bit_10@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_UP_COMPLETE
 
 method INTSTATUS_COMMAND_IN_PROGRESS()I {
  +START:   #1
        return bit_12@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_COMMAND_IN_PROGRESS
 
 method INTSTATUS_INTERRUPT_NONE()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_INTERRUPT_NONE
 
 method INTSTATUS_INTERRUPT_ALL()I {
  +START:   #1
        return 1774;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_INTERRUPT_ALL
 
 method INTSTATUS_ACKNOWLEDGE_ALL()I {
  +START:   #1
        return 2047;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTSTATUS_ACKNOWLEDGE_ALL
 
 method STATION_ADDRESS_LOW_REGISTER()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 STATION_ADDRESS_LOW_REGISTER
 
 method STATION_ADDRESS_MID_REGISTER()I {
  +START:   #1
        return 2;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 STATION_ADDRESS_MID_REGISTER
 
 method STATION_ADDRESS_HIGH_REGISTER()I {
  +START:   #1
        return 4;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 STATION_ADDRESS_HIGH_REGISTER
 
 method INTERNAL_CONFIG_REGISTER()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERNAL_CONFIG_REGISTER
 
 method INTERNAL_CONFIG_DISABLE_BAD_SSD()I {
  +START:   #1
        return bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERNAL_CONFIG_DISABLE_BAD_SSD
 
 method INTERNAL_CONFIG_ENABLE_TX_LARGE()I {
  +START:   #1
        return bit_14@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERNAL_CONFIG_ENABLE_TX_LARGE
 
 method INTERNAL_CONFIG_ENABLE_RX_LARGE()I {
  +START:   #1
        return bit_15@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERNAL_CONFIG_ENABLE_RX_LARGE
 
 method INTERNAL_CONFIG_AUTO_SELECT()I {
  +START:   #1
        return bit_24@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERNAL_CONFIG_AUTO_SELECT
 
 method INTERNAL_CONFIG_DISABLE_ROM()I {
  +START:   #1
        return bit_25@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERNAL_CONFIG_DISABLE_ROM
 
 method INTERNAL_CONFIG_TRANSCEIVER_MASK()I {
  +START:   #1
        return 15728640;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERNAL_CONFIG_TRANSCEIVER_MASK
 
 method MAXIMUM_PACKET_SIZE_REGISTER()I {
  +START:   #1
        return 4;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MAXIMUM_PACKET_SIZE_REGISTER
 
 method MAC_CONTROL_REGISTER()S {
  +START:   #1
        return 6;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MAC_CONTROL_REGISTER
 
 method MAC_CONTROL_FULL_DUPLEX_ENABLE()S {
  +START:   #1
        return (short)bit_5@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MAC_CONTROL_FULL_DUPLEX_ENABLE
 
 method MAC_CONTROL_ALLOW_LARGE_PACKETS()S {
  +START:   #1
        return (short)bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MAC_CONTROL_ALLOW_LARGE_PACKETS
 
 method MAC_CONTROL_FLOW_CONTROL_ENABLE()S {
  +START:   #1
        return (short)bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MAC_CONTROL_FLOW_CONTROL_ENABLE
 
 method MEDIA_OPTIONS_REGISTER()S {
  +START:   #1
        return 8;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_REGISTER
 
 method MEDIA_OPTIONS_100BASET4_AVAILABLE()S {
  +START:   #1
        return (short)bit_0@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_100BASET4_AVAILABLE
 
 method MEDIA_OPTIONS_100BASETX_AVAILABLE()S {
  +START:   #1
        return (short)bit_1@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_100BASETX_AVAILABLE
 
 method MEDIA_OPTIONS_100BASEFX_AVAILABLE()S {
  +START:   #1
        return (short)bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_100BASEFX_AVAILABLE
 
 method MEDIA_OPTIONS_10BASET_AVAILABLE()S {
  +START:   #1
        return (short)bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_10BASET_AVAILABLE
 
 method MEDIA_OPTIONS_10BASE2_AVAILABLE()S {
  +START:   #1
        return (short)bit_4@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_10BASE2_AVAILABLE
 
 method MEDIA_OPTIONS_10AUI_AVAILABLE()S {
  +START:   #1
        return (short)bit_5@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_10AUI_AVAILABLE
 
 method MEDIA_OPTIONS_MII_AVAILABLE()S {
  +START:   #1
        return (short)bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_MII_AVAILABLE
 
 method MEDIA_OPTIONS_10BASEFL_AVAILABLE()S {
  +START:   #1
        return (short)bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_OPTIONS_10BASEFL_AVAILABLE
 
 method RX_FREE_REGISTER()I {
  +START:   #1
        return 10;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_FREE_REGISTER
 
 method TX_FREE_REGISTER()I {
  +START:   #1
        return 12;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_FREE_REGISTER
 
 method PHYSICAL_MANAGEMENT_REGISTER()I {
  +START:   #1
        return 8;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 PHYSICAL_MANAGEMENT_REGISTER
 
 method NETWORK_DIAGNOSTICS_REGISTER()I {
  +START:   #1
        return 6;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 NETWORK_DIAGNOSTICS_REGISTER
 
 method NETWORK_DIAGNOSTICS_ASIC_REVISION()I {
  +START:   #1
        return 62;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 NETWORK_DIAGNOSTICS_ASIC_REVISION
 
 method NETWORK_DIAGNOSTICS_ASIC_REVISION_LOW()I {
  +START:   #1
        return 14;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 NETWORK_DIAGNOSTICS_ASIC_REVISION_LOW
 
 method NETWORK_DIAGNOSTICS_UPPER_BYTES_ENABLE()I {
  +START:   #1
        return bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 NETWORK_DIAGNOSTICS_UPPER_BYTES_ENABLE
 
 method MEDIA_STATUS_REGISTER()I {
  +START:   #1
        return 10;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_REGISTER
 
 method MEDIA_STATUS_SQE_STATISTICS_ENABLE()I {
  +START:   #1
        return bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_SQE_STATISTICS_ENABLE
 
 method MEDIA_STATUS_CARRIER_SENSE()I {
  +START:   #1
        return bit_5@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_CARRIER_SENSE
 
 method MEDIA_STATUS_JABBER_GUARD_ENABLE()I {
  +START:   #1
        return bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_JABBER_GUARD_ENABLE
 
 method MEDIA_STATUS_LINK_BEAT_ENABLE()I {
  +START:   #1
        return bit_7@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_LINK_BEAT_ENABLE
 
 method MEDIA_STATUS_LINK_DETECT()I {
  +START:   #1
        return bit_11@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_LINK_DETECT
 
 method MEDIA_STATUS_TX_IN_PROGRESS()I {
  +START:   #1
        return bit_12@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_TX_IN_PROGRESS
 
 method MEDIA_STATUS_DC_CONVERTER_ENABLED()I {
  +START:   #1
        return bit_14@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MEDIA_STATUS_DC_CONVERTER_ENABLED
 
 method BAD_SSD_REGISTER()I {
  +START:   #1
        return 12;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 BAD_SSD_REGISTER
 
 method UPPER_BYTES_OK_REGISTER()I {
  +START:   #1
        return 13;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UPPER_BYTES_OK_REGISTER
 
 method RX_FILTER_REGISTER()I {
  +START:   #1
        return 8;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_FILTER_REGISTER
 
 method INTERRUPT_ENABLE_REGISTER()I {
  +START:   #1
        return 10;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INTERRUPT_ENABLE_REGISTER
 
 method INDICATION_ENABLE_REGISTER()I {
  +START:   #1
        return 12;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INDICATION_ENABLE_REGISTER
 
 method CARRIER_LOST_REGISTER()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 CARRIER_LOST_REGISTER
 
 method SQE_ERRORS_REGISTER()I {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 SQE_ERRORS_REGISTER
 
 method MULTIPLE_COLLISIONS_REGISTER()I {
  +START:   #1
        return 2;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 MULTIPLE_COLLISIONS_REGISTER
 
 method SINGLE_COLLISIONS_REGISTER()I {
  +START:   #1
        return 3;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 SINGLE_COLLISIONS_REGISTER
 
 method LATE_COLLISIONS_REGISTER()I {
  +START:   #1
        return 4;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 LATE_COLLISIONS_REGISTER
 
 method RX_OVERRUNS_REGISTER()I {
  +START:   #1
        return 5;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_OVERRUNS_REGISTER
 
 method FRAMES_TRANSMITTED_OK_REGISTER()I {
  +START:   #1
        return 6;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 FRAMES_TRANSMITTED_OK_REGISTER
 
 method FRAMES_RECEIVED_OK_REGISTER()I {
  +START:   #1
        return 7;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 FRAMES_RECEIVED_OK_REGISTER
 
 method FRAMES_DEFERRED_REGISTER()I {
  +START:   #1
        return 8;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 FRAMES_DEFERRED_REGISTER
 
 method UPPER_FRAMES_OK_REGISTER()I {
  +START:   #1
        return 9;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UPPER_FRAMES_OK_REGISTER
 
 method BYTES_RECEIVED_OK_REGISTER()I {
  +START:   #1
        return 10;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 BYTES_RECEIVED_OK_REGISTER
 
 method BYTES_TRANSMITTED_OK_REGISTER()I {
  +START:   #1
        return 12;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 BYTES_TRANSMITTED_OK_REGISTER
 
 method TIMER_REGISTER()I {
  +START:   #1
        return 26;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TIMER_REGISTER
 
 method TX_STATUS_REGISTER()I {
  +START:   #1
        return 27;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_STATUS_REGISTER
 
 method TX_STATUS_MAXIMUM_COLLISION()I {
  +START:   #1
        return bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_STATUS_MAXIMUM_COLLISION
 
 method TX_STATUS_HWERROR()I {
  +START:   #1
        return bit_4@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_STATUS_HWERROR
 
 method TX_STATUS_JABBER()I {
  +START:   #1
        return bit_5@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_STATUS_JABBER
 
 method TX_STATUS_INTERRUPT_REQUESTED()I {
  +START:   #1
        return bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_STATUS_INTERRUPT_REQUESTED
 
 method TX_STATUS_COMPLETE()I {
  +START:   #1
        return bit_7@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_STATUS_COMPLETE
 
 method INT_STATUS_AUTO_REGISTER()I {
  +START:   #1
        return 30;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 INT_STATUS_AUTO_REGISTER
 
 method DMA_CONTROL_REGISTER()I {
  +START:   #1
        return 32;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_REGISTER
 
 method DMA_CONTROL_DOWN_STALLED()I {
  +START:   #1
        return bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_DOWN_STALLED
 
 method DMA_CONTROL_UP_COMPLETE()I {
  +START:   #1
        return bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_UP_COMPLETE
 
 method DMA_CONTROL_DOWN_COMPLETE()I {
  +START:   #1
        return bit_4@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_DOWN_COMPLETE
 
 method DMA_CONTROL_ARM_COUNTDOWN()I {
  +START:   #1
        return bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_ARM_COUNTDOWN
 
 method DMA_CONTROL_DOWN_IN_PROGRESS()I {
  +START:   #1
        return bit_7@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_DOWN_IN_PROGRESS
 
 method DMA_CONTROL_COUNTER_SPEED()I {
  +START:   #1
        return bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_COUNTER_SPEED
 
 method DMA_CONTROL_COUNTDOWN_MODE()I {
  +START:   #1
        return bit_9@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_COUNTDOWN_MODE
 
 method DMA_CONTROL_DOWN_SEQ_DISABLE()I {
  +START:   #1
        return bit_17@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_DOWN_SEQ_DISABLE
 
 method DMA_CONTROL_DEFEAT_MWI()I {
  +START:   #1
        return bit_20@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_DEFEAT_MWI
 
 method DMA_CONTROL_DEFEAT_MRL()I {
  +START:   #1
        return bit_21@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_DEFEAT_MRL
 
 method DMA_CONTROL_UPOVERDISC_DISABLE()I {
  +START:   #1
        return bit_22@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_UPOVERDISC_DISABLE
 
 method DMA_CONTROL_TARGET_ABORT()I {
  +START:   #1
        return bit_30@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_TARGET_ABORT
 
 method DMA_CONTROL_MASTER_ABORT()I {
  +START:   #1
        return bit_31@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DMA_CONTROL_MASTER_ABORT
 
 method DOWN_LIST_POINTER_REGISTER()I {
  +START:   #1
        return 36;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DOWN_LIST_POINTER_REGISTER
 
 method DOWN_POLL_REGISTER()I {
  +START:   #1
        return 45;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DOWN_POLL_REGISTER
 
 method UP_PACKET_STATUS_REGISTER()I {
  +START:   #1
        return 48;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_REGISTER
 
 method UP_PACKET_STATUS_ERROR()I {
  +START:   #1
        return bit_14@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_ERROR
 
 method UP_PACKET_STATUS_COMPLETE()I {
  +START:   #1
        return bit_15@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_COMPLETE
 
 method UP_PACKET_STATUS_OVERRUN()I {
  +START:   #1
        return bit_16@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_OVERRUN
 
 method UP_PACKET_STATUS_RUNT_FRAME()I {
  +START:   #1
        return bit_17@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_RUNT_FRAME
 
 method UP_PACKET_STATUS_ALIGNMENT_ERROR()I {
  +START:   #1
        return bit_18@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_ALIGNMENT_ERROR
 
 method UP_PACKET_STATUS_CRC_ERROR()I {
  +START:   #1
        return bit_19@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_CRC_ERROR
 
 method UP_PACKET_STATUS_OVERSIZE_FRAME()I {
  +START:   #1
        return bit_20@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_OVERSIZE_FRAME
 
 method UP_PACKET_STATUS_DRIBBLE_BITS()I {
  +START:   #1
        return bit_23@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_DRIBBLE_BITS
 
 method UP_PACKET_STATUS_OVERFLOW()I {
  +START:   #1
        return bit_24@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_OVERFLOW
 
 method UP_PACKET_STATUS_IP_CHECKSUM_ERROR()I {
  +START:   #1
        return bit_25@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_IP_CHECKSUM_ERROR
 
 method UP_PACKET_STATUS_TCP_CHECKSUM_ERROR()I {
  +START:   #1
        return bit_26@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_TCP_CHECKSUM_ERROR
 
 method UP_PACKET_STATUS_UDP_CHECKSUM_ERROR()I {
  +START:   #1
        return bit_27@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_UDP_CHECKSUM_ERROR
 
 method UP_PACKET_STATUS_IMPLIED_BUFFER_ENABLE()I {
  +START:   #1
        return bit_28@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_IMPLIED_BUFFER_ENABLE
 
 method UP_PACKET_STATUS_IP_CHECKSUM_CHECKED()I {
  +START:   #1
        return bit_29@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_IP_CHECKSUM_CHECKED
 
 method UP_PACKET_STATUS_TCP_CHECKSUM_CHECKED()I {
  +START:   #1
        return bit_30@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_TCP_CHECKSUM_CHECKED
 
 method UP_PACKET_STATUS_UDP_CHECKSUM_CHECKED()I {
  +START:   #1
        return bit_31@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_UDP_CHECKSUM_CHECKED
 
 method UP_PACKET_STATUS_ERROR_MASK()I {
  +START:   #1
        return 2031616;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_PACKET_STATUS_ERROR_MASK
 
 method FREE_TIMER_REGISTER()I {
  +START:   #1
        return 52;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 FREE_TIMER_REGISTER
 
 method COUNTDOWN_REGISTER()I {
  +START:   #1
        return 54;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COUNTDOWN_REGISTER
 
 method UP_LIST_POINTER_REGISTER()I {
  +START:   #1
        return 56;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_LIST_POINTER_REGISTER
 
 method UP_POLL_REGISTER()I {
  +START:   #1
        return 61;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 UP_POLL_REGISTER
 
 method REAL_TIME_COUNTER_REGISTER()I {
  +START:   #1
        return 64;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 REAL_TIME_COUNTER_REGISTER
 
 method CONFIG_ADDRESS_REGISTER()I {
  +START:   #1
        return 68;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 CONFIG_ADDRESS_REGISTER
 
 method CONFIG_DATA_REGISTER()I {
  +START:   #1
        return 72;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 CONFIG_DATA_REGISTER
 
 method DEBUG_DATA_REGISTER()I {
  +START:   #1
        return 112;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DEBUG_DATA_REGISTER
 
 method DEBUG_CONTROL_REGISTER()I {
  +START:   #1
        return 116;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DEBUG_CONTROL_REGISTER
}
