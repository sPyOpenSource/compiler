class test/portal/scale/DomainExhauster {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method main([Ljava/lang/String;)V {
  +START:   #1
        vR1 = getInitialNaming@special();    
        vR2 = "mini_domain.jll";    
        vR3 = "test/portal/scale/MiniDomain";    
        vR4 = 0;    
        vi5 = 2048;    
        vi6 = 2048;    
        vi7 = 40960;    
        vi8 = 9216;    
        vi9 = 1000;    
        vR10 = (jx/zero/DomainManager)(vR1.lookup("DomainManager"));    
        vR11 = (jx/zero/MemoryManager)(vR1.lookup("MemoryManager"));    
        vi12 = 0;    
  +B66:   #1
        if vi12>=100 goto B82;   
  +B73:   #1
        yield@special();   [RRRRiiiiiRRi RR ... ..]
        vi12++;   
        goto +B66;   [RRRRiiiiiRRi RR ... ..]
  +B82:   #1
        if vR0.length<=2 goto B119;   
  +B88:   #1
        vi9 = parseInt@special(vR0[0]);    [RRRRiiiiiRRi RR R.. R.]
        vi6 = parseInt@special(vR0[1]);    [RRRRiiiiiRRi RR RR. R.]
        vi5 = vi6;    
        vi7 = (parseInt@special(vR0[2])*vi6);    
  +B119:   #1
        vi12 = vR11.getTotalFreeMemory();    [RRRRiiiiiRRi RR ... R.] 
        vi13 = 0;    
  +B131:   #1
        vi13 = 0;    
  +B134:   #1
        if vi13>=vi9 goto B182;   
  +B141:   #1
        b0 = new java/lang/StringBuilder();    [ RR ... i.][ RR ... iR]
        createDomain@special(b0.append@extra("D").append@extra(vi13).toString@extra(),vR2,vR3,vi5,vi6,vi7,vi8,3);   [RRRRiiiiiRRii RR iR. iiiiiRRR]
        vi13++;   
        goto +B134;   [RRRRiiiiiRRii RR iR. ........]
  +B182:   #2
        goto +B187;   [RRRRiiiiiRRii RR ... ........]
  +H185<caught exception>:   #1 reference
        vR14 = <caught exception>;    
  +B187:   #1
        yield@special();   [RRRRiiiiiRRii RR ... ........]
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ... i.......][ RR ... iR......]
        b0.println(b1.append@extra("Domains created: ").append@extra(vi13).toString@extra());   [RRRRiiiiiRRii RR ii. RR......] 
        vi14 = vR11.getTotalFreeMemory();    [RRRRiiiiiRRii RR ii. R.......] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ii. i.......][ RR ii. iR......]
        b0.println(b1.append@extra("end ").append@extra(vi14).toString@extra());   [RRRRiiiiiRRiii RR iiii. RR......] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiii. i.......][ RR iiii. iR......]
        b0.println(b1.append@extra("diff: ").append@extra((vi12-vi14)).toString@extra());   [RRRRiiiiiRRiii RR iiiiiii. RR......] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiiii. i.......][ RR iiiiiii. iR......]
        b0.println(b1.append@extra("diff: ").append@extra(((vi12-vi14)/1024)).append@extra(" kbyte").toString@extra());   [RRRRiiiiiRRiii RR iiiiiiiiiii.. RR......] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiiiiiiii.. i.......][ RR iiiiiiiiiii.. iR......]
        b0.println(b1.append@extra("chunk: ").append@extra(vi6).toString@extra());   [RRRRiiiiiRRiii RR iiiiiiiiiiiii. RR......] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiiiiiiiiii. i.......][ RR iiiiiiiiiiiii. iR......]
        b0.println(b1.append@extra("gc: ").append@extra(vi7).toString@extra());   [RRRRiiiiiRRiii RR iiiiiiiiiiiiiii. RR......] 
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
131 - 182 handler 185 type 69
 }
// Register: rd 34/34 wr 70 swaps 18 any 5 found 0 main
 
 method <clinit>()V {
  +START:   #1
        verbose = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 <clinit>
}
