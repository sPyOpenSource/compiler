class org/jnode/fs/jfat/CacheElement {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.elementSize = 512;   
        vR0.dirty = 0;   
        b1 = new org/jnode/fs/jfat/CacheKey();    [ ?R  i][ ?R  iR]
        vR0.address = b1;   
  +B27:   #1
        vR1 = (jx/zero/MemoryManager)(getInitialNaming@special().lookup("MemoryManager"));    
        vR0.elem = vR1.alloc(512);   
  +B54:   #1
        goto +B58;   forward return[R ?R .. ..]
  +H57<caught exception>:   #1 reference
        vR1 = <caught exception>;    
  +B58:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
27 - 54 handler 57 type 48
 }
// Register: rd 8/8 wr 6 swaps 1 any 0 found 0 <init>
 
 method <init>(Ljx/devices/bio/BlockIO;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.elementSize = 512;   
        vR0.dirty = 0;   
        b1 = new org/jnode/fs/jfat/CacheKey();    [ ?R  i][ ?R  iR]
        vR0.address = b1;   
  +B27:   #1
        vR2 = (jx/zero/MemoryManager)(getInitialNaming@special().lookup("MemoryManager"));    
        vR0.elem = vR2.alloc(512);   
  +B54:   #1
        goto +B58;   [R ?R .. ..]
  +H57<caught exception>:   #1 reference
        vR2 = <caught exception>;    
  +B58:   #1
        vR0.api = vR1;   
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
27 - 54 handler 57 type 48
 }
// Register: rd 10/10 wr 6 swaps 1 any 0 found 0 <init>
 
 method isFree()Z {
  +START:   #1
        return vR0.address.isFree();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isFree
 
 method getAddress()Lorg/jnode/fs/jfat/CacheKey; {
  +START:   #1
        return vR0.address;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getAddress
 
 method getData()Ljx/zero/Memory; {
  +START:   #1
        return vR0.elem;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getData
 
 method read(I)V {
  +START:   #1
        vR0.address.set(vi1);   [   iR] 
        out.println(vi1);   [  . iR] 
        vR0.api.readSectors(vi1,1,vR0.elem,1);   [  i iRiiR] 
        out.println("ok");   [  ii. RR...] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 4 swaps 2 any 0 found 0 read
 
 method write()V {
  +START:   #1
        if vR0.isFree@this()==0 goto B17;   
  -B7:   #1
        throw new java/lang/IllegalArgumentException("cannot write a free element");   
  +B17:   #1
        vi1 = (vR0.address.get()*512);    
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 write
 
 method isDirty()Z {
  +START:   #1
        return vR0.dirty;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isDirty
 
 method setDirty()V {
  +START:   #1
        vR0.dirty = 1;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 setDirty
 
 method flush()V {
  +START:   #1
        if vR0.isDirty@special()==0 goto B16;   
  +B7:   #1
        vR0.write@special();   [   R] 
        vR0.dirty = 0;   
  +B16:   #1
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 flush
 
 method free()V {
  +START:   #1
        if vR0.isFree@this()==0 goto B17;   
  -B7:   #1
        throw new java/lang/IllegalArgumentException("cannot free a free element");   
  +B17:   #1
        vR0.flush@this();   [ R . R..] 
        vR0.address.free();   [ R . R..] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 free
}
