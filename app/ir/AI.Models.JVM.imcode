class AI/Models/JVM {
 
 method <init>(ILAI/Models/vm/VmStackFrame;LAI/Models/vm/VmCP;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.run = 1;   
        vR0.clzNamePrint = "java/io/PrintStream";   
        vR0.clzNameStrBuilder = "java/lang/StringBuilder";   
        vR0.stringBuilderBuffer = new char[1024];   
        vR0.stringBuilderUsed = 0;   
        vR0.pc = vi1;   
        vR0.stack = vR2;   
        vR0.cp = vR3;   
        return;   
  +END:   #1
 }
// Register: rd 12/12 wr 0 swaps 0 any 0 found 0 <init>
 
 method findMethodRef(I)LAI/Models/JVM$ConstantMethodRef; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 findMethodRef
 
 method getUTF8String(I)Ljava/lang/String; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getUTF8String
 
 method invoke_java_lang_library(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 invoke_java_lang_library
 
 method findStringRef(I)LAI/Models/JVM$ConstantStringRef; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 findStringRef
 
 method findNameAndType(I)LAI/Models/JVM$ConstantNameAndType; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 findNameAndType
 
 method findClassRef(I)LAI/Models/JVM$ConstantClassRef; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 findClassRef
 
 method get_double_parameter()D {
  +START:   #1
        if vR0.stack.isRef()==0 goto B30;   
  +B10:   #1
        vi3 = vR0.stack.popInt();    [   R] 
        vd1 = vR0.cp.getDouble(vi3);     
        goto +B38;   forward return[d?i   .]
  +B30:   #1
        vd1 = vR0.stack.popDouble();     
  +B38:   #1
        return vd1;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 get_double_parameter
 
 method op_aload_0()I {
  +START:   #1
        vR0.stack.pushInt(0);   [   iR] 
        out.print("push 0 into stack
");   [  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_aload_0
 
 method op_bipush()I {
  +START:   #1
        vi1 = vR0.opCode[(vR0.pc+1)];    
        vR0.stack.pushInt(vi1);   [i   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 op_bipush
 
 method EntryToInt(LAI/Models/vm/VmStackEntry;)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 EntryToInt
 
 method op_dup()I {
  +START:   #1
        vR1 = vR0.stack.popEntry();    [   R] 
        vi2 = vR0.EntryToInt@this(vR1);    [R   RR] 
        if vR1.type!=STACK_ENTRY_INT goto B43;   
  +B24:   #1
        vR0.stack.pushInt(vi2);   [Ri  . iR] 
        vR0.stack.pushInt(vi2);   [Ri  . iR] 
        goto +B59;   [Ri  . ..]
  +B43:   #1
        vR0.stack.pushRef(vi2);   [Ri  . iR] 
        vR0.stack.pushRef(vi2);   [Ri  . iR] 
  +B59:   #1
        out.print("dup
");   [Ri  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 8/8 wr 5 swaps 1 any 0 found 0 op_dup
 
 method op_get()I {
  +START:   #1
        vR2 = new char[2];    
        vR2[0] = vR0.opCode[(vR0.pc+1)];   
        vR2[1] = vR0.opCode[(vR0.pc+2)];   
        vi1 = ((vR2[0] << 8) | vR2[1]);    
        vR0.stack.pushRef(vi1);   [iR   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 9/9 wr 2 swaps 0 any 0 found 0 op_get
 
 method op_iadd()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vi2 = vR0.stack.popInt();    [i   R] 
        vi3 = (vi1+vi2);    
        vR0.stack.pushInt(vi3);   [iii   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 5/5 wr 3 swaps 0 any 1 found 0 op_iadd
 
 method op_iconst_0()I {
  +START:   #1
        vR0.stack.pushInt(0);   [   iR] 
        out.print("iconst_0: push 0 into stack
");   [  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_iconst_0
 
 method op_iconst_1()I {
  +START:   #1
        vR0.stack.pushInt(1);   [   iR] 
        out.print("iconst_1: push 1 into stack
");   [  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_iconst_1
 
 method op_iconst_2()I {
  +START:   #1
        vR0.stack.pushInt(2);   [   iR] 
        out.print("iconst_2: push 1 into stack
");   [  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_iconst_2
 
 method op_iconst_3()I {
  +START:   #1
        vR0.stack.pushInt(3);   [   iR] 
        out.print("iconst_3: push 1 into stack
");   [  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_iconst_3
 
 method op_iconst_4()I {
  +START:   #1
        vR0.stack.pushInt(4);   [   iR] 
        out.print("iconst_4: push 1 into stack
");   [  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_iconst_4
 
 method op_iconst_5()I {
  +START:   #1
        vR0.stack.pushInt(5);   [   iR] 
        out.print("iconst_5: push 5 into stack
");   [  i. RR] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_iconst_5
 
 method op_dconst_1()I {
  +START:   #1
        vR0.stack.pushDouble(1);   [   ??R] 
        out.print("iconst_5: push 1.0f into stack
");   [  i. RR.] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 2 swaps 1 any 0 found 0 op_dconst_1
 
 method op_idiv()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vi2 = vR0.stack.popInt();    [i   R] 
        vi3 = (vi2/vi1);    
        vR0.stack.pushInt(vi3);   [iii   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 5/5 wr 3 swaps 0 any 0 found 0 op_idiv
 
 method op_iload([C)I {
  +START:   #1
        vi2 = vR1[1];    
        vi3 = vR0.localVariables.integer[vi2];    
        vR0.stack.pushInt(vi3);   [ii   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 op_iload
 
 method op_iload_1()I {
  +START:   #1
        vi1 = vR0.localVariables.integer[1];    
        vR0.stack.pushInt(vi1);   [i   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 op_iload_1
 
 method op_iload_2()I {
  +START:   #1
        vi1 = vR0.localVariables.integer[2];    
        vR0.stack.pushInt(vi1);   [i   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 op_iload_2
 
 method op_iload_3()I {
  +START:   #1
        vi1 = vR0.localVariables.integer[3];    
        vR0.stack.pushInt(vi1);   [i   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 op_iload_3
 
 method op_imul()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vi2 = vR0.stack.popInt();    [i   R] 
        vi3 = (vi1*vi2);    
        vR0.stack.pushInt(vi3);   [iii   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 5/5 wr 3 swaps 0 any 1 found 0 op_imul
 
 method op_dadd()I {
  +START:   #1
        vd1 = vR0.get_double_parameter@this();     
        vd3 = vR0.get_double_parameter@this();     
        vd5 = (vd1+vd3);    
        vR0.stack.pushDouble(vd5);   [d?d?d   ??R] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 op_dadd
 
 method op_dmul()I {
  +START:   #1
        vd1 = vR0.get_double_parameter@this();     
        vd3 = vR0.get_double_parameter@this();     
        vd5 = (vd1*vd3);    
        vR0.stack.pushDouble(vd5);   [d?d?d   ??R] 
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 op_dmul
 
 method op_d2i()I {
  +START:   #1
        vd1 = vR0.stack.popDouble();     
        vi3 = (int)vd1;    
        vR0.stack.pushInt(vi3);   [d?i   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 op_d2i
 
 method op_irem()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vi2 = vR0.stack.popInt();    [i   R] 
        vi3 = (vi2%vi1);    
        vR0.stack.pushInt(vi3);   [iii   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 5/5 wr 3 swaps 0 any 0 found 0 op_irem
 
 method op_istore()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vi2 = vR0.opCode[(vR0.pc+1)];    
        vR0.localVariables.integer[vi2] = vi1;   
        return 0;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 1 found 0 op_istore
 
 method op_istore_1()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vR0.localVariables.integer[1] = vi1;   
        return 0;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 1 found 0 op_istore_1
 
 method op_istore_2()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vR0.localVariables.integer[2] = vi1;   
        return 0;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 1 found 0 op_istore_2
 
 method op_istore_3()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vR0.localVariables.integer[3] = vi1;   
        return 0;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 1 found 0 op_istore_3
 
 method op_isub()I {
  +START:   #1
        vi1 = vR0.stack.popInt();    [   R] 
        vi2 = vR0.stack.popInt();    [i   R] 
        vi3 = (vi2-vi1);    
        vR0.stack.pushInt(vi3);   [iii   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 5/5 wr 3 swaps 0 any 1 found 0 op_isub
 
 method op_invokespecial([C)I {
  +START:   #1
        vR3 = new char[2];    
        vR3[0] = vR1[1];   
        vR3[1] = vR1[2];   
        vi2 = ((vR3[0] << 8) | vR3[1]);    
        if vi2>=vR0.simpleMethodPool.method_used goto B56;   
  +B38:   #1
        vR4 = vR0.simpleMethodPool.method[vi2];    
        vR0.executeMethod@this(vR4);   [iRR   RR] 
  +B56:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 11/11 wr 3 swaps 0 any 1 found 0 op_invokespecial
 
 method op_invoke()I {
  +START:   #1
        vi4 = ((vR0.opCode[vR0.pc] << 8) | vR0.opCode[(vR0.pc+1)]);    
        if vi4>=vR0.simpleMethodPool.method_used goto B63;   
  +B38:   #1
        vR5 = vR0.simpleMethodPool.method[vi4];    
        vR1 = vR0.getUTF8String@special(access$000@special(vR5));    [???iR  i iR] 
        goto +B162;   forward return[R??iR  i ..]
  +B63:   #1
        vR5 = vR0.findMethodRef@special(vi4);    [R??iR  . iR] 
        if vR5==null goto B162;   
  +B76:   #1
        vR6 = vR0.findClassRef@special(vR5.classIndex);    [R??iR  i iR] 
        vR7 = vR0.findNameAndType@special(vR5.nameAndTypeIndex);    [R??iRR  ii iR] 
        if vR6==null goto B108;   
  +B103:   #1
        if vR7!=null goto B110;   
  +B108:   #1
        return -1;   
  +B110:   #1
        vR2 = vR0.getUTF8String@special(vR6.stringIndex);    [R??iRRR  i. iR] 
        vR1 = vR0.getUTF8String@special(vR7.nameIndex);    [RR?iRRR  ii iR] 
        vR3 = vR0.getUTF8String@special(vR7.typeIndex);    [RR?iRRR  iii iR] 
        vi8 = vR0.invoke_java_lang_library@special(vR2,vR1,vR3);    [RRRiRRR  iii RRRR] 
        if vi8==0 goto B162;   
  +B154:   #1
        out.print("invoke java lang library successful
");   [RRRiRRRi  i.. RR..] 
  +B162:   #3
        return 0;   
  +END:   #1
 }
// Register: rd 25/25 wr 18 swaps 7 any 5 found 0 op_invoke
 
 method op_invokevirtual()I {
  +START:   #1
        vR2 = "";    
        vi4 = ((vR0.opCode[vR0.pc] << 8) | vR0.opCode[(vR0.pc+1)]);    
        vR5 = vR0.findMethodRef@special(vi4);    [?R?i   iR] 
        if vR5==null goto B322;   
  +B42:   #1
        vR6 = vR0.findClassRef@special(vR5.classIndex);    [?R?iR  i iR] 
        vR7 = vR0.findNameAndType@special(vR5.nameAndTypeIndex);    [?R?iRR  ii iR] 
        if vR6==null goto B74;   
  +B69:   #1
        if vR7!=null goto B76;   
  +B74:   #1
        return -1;   
  +B76:   #1
        vR1 = vR0.getUTF8String@special(vR6.stringIndex);    [?R?iRRR  i. iR] 
        if "java/io/PrintStream".equals@extra(vR1)==0 goto B218;   
  +B95:   #1
        vR8 = vR0.stack.popEntry();    [RR?iRRR  .. R.] 
        vi9 = vR0.EntryToInt@this(vR8);    [RR?iRRRR  .. RR] 
        if vR8.type!=STACK_ENTRY_REF goto B174;   
  +B123:   #1
        vR10 = vR0.findStringRef@special(vi9);    [RR?iRRRRi  .. iR] 
        if vR10==null goto B171;   
  +B136:   #1
        vR2 = vR0.getUTF8String@special(access$100@special(vR10));    [RR?iRRRRiR  i. iR] 
        vi3 = vR2.length@extra();    [RR?iRRRRiR  i. R.] 
        vR0.stringBuilderUsed = (vR0.stringBuilderUsed+vi3);   
        vR0.stringBuilderBuffer[vR0.stringBuilderUsed] = 0;   
  +B171:   #1
        goto +B210;   [RRiiRRRRiR  .. ..]
  +B174:   #1
        if vR8.type!=STACK_ENTRY_INT goto B210;   
  +B185:   #1
        vi3 = vR2.length@extra();    [RRiiRRRRiR  .. R.] 
        vR0.stringBuilderUsed = (vR0.stringBuilderUsed+vi3);   
        vR0.stringBuilderBuffer[vR0.stringBuilderUsed] = 0;   
  +B210:   #2
        vR0.stringBuilderUsed = 0;   
        goto +B322;   forward return[RRiiRRRRiR  .. ..]
  +B218:   #1
        if "java/lang/StringBuilder".equals@extra(vR1)==0 goto B322;   
  +B227:   #1
        vR8 = vR0.stack.popEntry();    [RRiiRRRRiR  .. R.] 
        vi9 = vR0.EntryToInt@this(vR8);    [RRiiRRRRiR  .. RR] 
        if vR8.type!=STACK_ENTRY_REF goto B296;   
  +B255:   #1
        vR10 = vR0.findStringRef@special(vi9);    [RRiiRRRRiR  .. iR] 
        if vR10==null goto B293;   
  +B268:   #1
        vR2 = vR0.getUTF8String@special(access$100@special(vR10));    [RRiiRRRRiR  i. iR] 
        vi3 = vR2.length@extra();    [RRiiRRRRiR  i. R.] 
        vR0.stringBuilderUsed = (vR0.stringBuilderUsed+vi3);   
  +B293:   #1
        goto +B322;   forward return[RRiiRRRRiR  .. ..]
  +B296:   #1
        if vR8.type!=STACK_ENTRY_INT goto B322;   
  +B307:   #1
        vi3 = vR2.length@extra();    [RRiiRRRRiR  .. R.] 
        vR0.stringBuilderUsed = (vR0.stringBuilderUsed+vi3);   
  +B322:   #5
        return 0;   
  +END:   #1
 }
// Register: rd 53/53 wr 27 swaps 5 any 5 found 0 op_invokevirtual
 
 method op_ldc()I {
  +START:   #1
        vi1 = vR0.opCode[(vR0.pc+1)];    
        vR0.stack.pushRef(vi1);   [i   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 op_ldc
 
 method op_ldc2_w()I {
  +START:   #1
        vi1 = vR0.opCode[(vR0.pc+1)];    
        vi2 = vR0.opCode[(vR0.pc+2)];    
        vi3 = ((vi1 << 8) | vi2);    
        vR0.stack.pushRef(vi3);   [iii   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 1 found 0 op_ldc2_w
 
 method op_sipush()I {
  +START:   #1
        vR2 = new char[2];    
        vR2[0] = vR0.opCode[(vR0.pc+1)];   
        vR2[1] = vR0.opCode[(vR0.pc+2)];   
        vi1 = (short)((vR2[0] << 8) | vR2[1]);    
        vR0.stack.pushInt(vi1);   [iR   iR] 
        return 0;   
  +END:   #1
 }
// Register: rd 9/9 wr 2 swaps 0 any 0 found 0 op_sipush
 
 method op_new()I {
  +START:   #1
        vR1 = new char[2];    
        vR1[0] = vR0.opCode[(vR0.pc+1)];   
        vR1[1] = vR0.opCode[(vR0.pc+2)];   
        vi2 = ((vR1[0] << 8) | vR1[1]);    
        return 0;   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 0 any 0 found 0 op_new
 
 method op_return()I {
  +START:   #1
        out.print("return: 
");   [  i. RR] 
        return -1;   
  +END:   #1
 }
// Register: rd 0/0 wr 2 swaps 1 any 0 found 0 op_return
 
 method convertToCodeAttribute(LAI/Models/JVM$CodeAttribute;LAI/Models/JVM$AttributeInfo;)I {
  +START:   #1
        vi3 = 0;    
        vR4 = new char[4];    
        vR1.attribute_name_index = vR2.attribute_name_index;   
        vR1.attribute_length = vR2.attribute_length;   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[0] = b2[b3];   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[1] = b2[b3];   
        vR1.max_stack = ((vR4[0] << 8) | vR4[1]);   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[0] = b2[b3];   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[1] = b2[b3];   
        vR1.max_locals = ((vR4[0] << 8) | vR4[1]);   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[0] = b2[b3];   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[1] = b2[b3];   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[2] = b2[b3];   
        b2 = vR2.info;    
        b3 = vi3;    
        vi3++;   
        vR4[3] = b2[b3];   
        vR1.code_length = ((((vR4[0] << 24) | (vR4[1] << 16)) | (vR4[2] << 8)) | vR4[3]);   
        vR1.code = copyOfRange@special(vR2.info,vi3,(vR1.code_length+1));   
        return 0;   
  +END:   #1
 }
// Register: rd 66/66 wr 28 swaps 0 any 16 found 0 convertToCodeAttribute
 
 method executeMethod(LAI/Models/JVM$MethodInfo;)I {
  +START:   #1
        vR2 = new AI/Models/JVM$CodeAttribute(vR0);    [ RR  i][ RR . iRR]
        vi3 = 0;    
  +B11:   #1
        if vi3>=vR1.attributes_count goto B174;   
  +B19:   #1
        vR0.convertToCodeAttribute@this(vR2,access$200@special(vR1)[vi3]);   [Ri RR i RRR] 
        if "Code".equals@extra(vR0.getUTF8String@special(vR2.attribute_name_index))==0 goto B51;   
  +B48:   #1
        goto +B168;   [Ri RR ... ...]
  +B51:   #1
        out.println("----------------------------------------");   [Ri RR i.. RR.] 
        out.println("code dump");   [Ri RR ii. RR.] 
        vR0.printCodeAttribute@this(vR2);   [Ri RR ii. RR.] 
        out.println("----------------------------------------");   [Ri RR iii. RR.] 
        if vR0.run!=0 goto B94;   
  +B90:   #1
        exit@special(1);   [Ri RR .... i..]
  +B94:   #2
        vR4 = new AI/Models/vm/VmByteCode(vR2.code[vR0.pc]);    [ RR .... i..][ RR .... icR]
        vR5 = vR4.findOpCode().func;    
        if vR5==null goto B165;   
  +B127:   #1
        b1 = new AI/Models/JVM(vR0.pc,vR0.stack,vR0.cp);    [ RR .... i..][ RR .... iRRiR]
        if (java/lang/Integer)(vR5.apply(b1)).intValue()>=0 goto B165;   
  +B162:   #1
        goto +B168;   [RiRR RR .... .....]
  +B165:   #2
        goto +B94;   [RiRR RR .... .....]
  +B168:   #2
        vi3++;   
        goto +B11;   [Ri RR .... .....]
  +B174:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 23/23 wr 20 swaps 6 any 3 found 0 executeMethod
 
 method printCodeAttribute(LAI/Models/JVM$CodeAttribute;)V {
  +START:   #1
        vR2 = vR0.getUTF8String@special(vR1.attribute_name_index);    [ RR i iR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR i i.][ RR i iR]
        b0.println(b1.append@extra("attribute name : ").append@extra(vR2).toString@extra());   [R RR iii. RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iii. i..][ RR iii. iR.]
        b0.println(b1.append@extra("attribute length: ").append@extra(vR1.attribute_length).toString@extra());   [R RR iiiiii. RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiii. i..][ RR iiiiii. iR.]
        b0.println(b1.append@extra("max_stack: ").append@extra(vR1.max_stack).toString@extra());   [R RR iiiiiiiii. RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiiiiii. i..][ RR iiiiiiiii. iR.]
        b0.println(b1.append@extra("max_locals: ").append@extra(vR1.max_locals).toString@extra());   [R RR iiiiiiiiiiii. RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiiiiiiiii. i..][ RR iiiiiiiiiiii. iR.]
        b0.println(b1.append@extra("code_length: ").append@extra(vR1.code_length).toString@extra());   [R RR iiiiiiiiiiiiiii. RR.] 
        vi3 = 0;    
  +B153:   #1
        vR4 = new AI/Models/vm/VmByteCode(vR1.code[vi3]);    [ RR ................ i..][ RR ................ icR]
        vR5 = vR4.findOpCode().name;    
        if vR5!=null goto B218;   
  +B183:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ................ i..][ RR ................ iR.]
        b0.println(b1.append@extra("Unknow OpCode %02X").append@extra(vR1.code[vi3]).toString@extra());   [RiRR RR iii............. RR.] 
        exit@special(1);   [RiRR RR iii............. i..]
  +B218:   #1
        out.println(vR5);   [RiRR RR ................ RR.] 
        vi3 = (vi3+vR4.findOpCode().offset);    
        if vi3<vR1.code_length goto B153;   
  +B245:   #1
        return;   
  +END:   #1
 }
// Register: rd 30/30 wr 49 swaps 18 any 3 found 1 printCodeAttribute
}
