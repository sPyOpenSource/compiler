class AI/Models/vm/VmStackFrame {
 
 method isEmpty()Z {
  +START:   #1
        if vR0.top>=0 goto B11;   
  +B7:   #1
        b0 = 1;    
        goto +B12b0;   forward return[ i  ]
  +B11:   #1
        b0 = 0;    
  +B12b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isEmpty
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.a = new java/lang/Object()[1000];   
        vR0.top = -1;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method push(Ljava/lang/Object;)Z {
  +START:   #1
        if vR0.top<999 goto B20;   
  +B10:   #1
        out.println("Stack Overflow");   [ RRi i. RR] 
        return 0;   
  +B20:   #1
        b0 = vR0.a;    
        b2 = (vR0.top+1);    
        b1 = b2;    
        vR0.top = b2;   
        b0[b1] = vR1;   
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RRi .. i.][ RRi .. iR]
        b0.println(b1.append@extra(vR1).append@extra(" pushed into stack").toString@extra());   [ RRi ii. RR.] 
        return 1;   
  +END:   #1
 }
// Register: rd 11/11 wr 11 swaps 3 any 2 found 0 push
 
 method pop()Ljava/lang/Object; {
  +START:   #1
        if vR0.top>=0 goto B20;   
  +B7:   #1
        out.println("Stack Underflow");   [ Rii i. RR] 
        return valueOf@special(0);   
  +B20:   #1
        b0 = vR0.a;    
        b2 = vR0.top;    
        b1 = b2;    
        vR0.top = (b2-1);   
        vR1 = b0[b1];    
        return vR1;   
  +END:   #1
 }
// Register: rd 9/9 wr 6 swaps 1 any 1 found 0 pop
 
 method peek()Ljava/lang/Object; {
  +START:   #1
        if vR0.top>=0 goto B20;   
  +B7:   #1
        out.println("Stack Underflow");   [  i. RR] 
        return valueOf@special(0);   
  +B20:   #1
        vR1 = vR0.a[vR0.top];    
        return vR1;   
  +END:   #1
 }
// Register: rd 4/4 wr 3 swaps 1 any 0 found 0 peek
 
 method popInt()I {
  +START:   #1
        return (java/lang/Integer)(vR0.pop@this()).intValue();   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 0 any 0 found 0 popInt
 
 method popDouble()D {
  +START:   #1
        return (java/lang/Double)(vR0.pop@this()).doubleValue@extra();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 popDouble
 
 method pushInt(I)V {
  +START:   #1
        vR0.push@this(valueOf@special(vi1));   [  i RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 pushInt
 
 method pushRef(I)V {
  +START:   #1
        vR0.push@this(valueOf@special(vi1));   [  i RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 pushRef
 
 method pushDouble(D)V {
  +START:   #1
        vR0.push@this(valueOf@special(vd1));   [  i RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 pushDouble
 
 method popEntry()LAI/Models/vm/VmStackEntry; {
  +START:   #1
        return (AI/Models/vm/VmStackEntry)(vR0.pop@this());   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 popEntry
 
 method isRef()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isRef
 
 method <clinit>()V {
  +START:   #1
        STACK_ENTRY_NONE = 0;   
        STACK_ENTRY_INT = 1;   
        STACK_ENTRY_REF = 2;   
        STACK_ENTRY_LONG = 3;   
        STACK_ENTRY_DOUBLE = 4;   
        STACK_ENTRY_FLOAT = 5;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 6 swaps 0 any 0 found 0 <clinit>
}
