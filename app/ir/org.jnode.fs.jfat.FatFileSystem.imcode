class org/jnode/fs/jfat/FatFileSystem {
 
 method <init>(Z)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.inited = 0;   
        vR0.drive = (jx/devices/bio/BlockIO)(getInitialNaming@special().lookup("BIOFS_RW"));   
  +B26:   #1
        vR0.fat = create@special(vR0.getApi@this());   
  +B37:   #1
        goto +B41;   [ ?R .. ..]
  +H40<caught exception>:   #1 reference
        vR2 = <caught exception>;    
  +B41:   #1
        b1 = new jx/fs/javafs/InodeCache();    [ ?R .. i.][ ?R .. iR]
        vR0.inodeCache = b1;   
        vR0.deviceID = 1;   
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
26 - 37 handler 40 type 47
 }
// Register: rd 9/9 wr 6 swaps 1 any 0 found 0 <init>
 
 method <init>(Ljx/devices/bio/BlockIO;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.inited = 0;   
        vR0.drive = vR1;   
  +B14:   #1
        vR0.fat = create@special(vR1);   
  +B22:   #1
        goto +B26;   [ ?R  .]
  +H25<caught exception>:   #1 reference
        vR2 = <caught exception>;    
  +B26:   #1
        b1 = new jx/fs/javafs/InodeCache();    [ ?R  i][ ?R  iR]
        vR0.inodeCache = b1;   
        vR0.deviceID = 1;   
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
14 - 22 handler 25 type 47
 }
// Register: rd 8/8 wr 2 swaps 0 any 0 found 0 <init>
 
 method getFile(Lorg/jnode/fs/jfat/FatDirEntry;)Lorg/jnode/fs/jfat/FatFile; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getFile
 
 method getClusterSize()I {
  +START:   #1
        return vR0.fat.getClusterSize@extra();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getClusterSize
 
 method getFat()Lorg/jnode/fs/jfat/Fat; {
  +START:   #1
        return vR0.fat;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getFat
 
 method getBootSector()Lorg/jnode/fs/jfat/BootSector; {
  +START:   #1
        return vR0.fat.getBootSector@extra();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getBootSector
 
 method createFile(Ljx/fs/Node;)Ljx/fs/RegularFile; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 createFile
 
 method createDirectory(Ljx/fs/Node;)Ljx/fs/Directory; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 createDirectory
 
 method getFreeSpace()J {
  +START:   #1
        return -1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getFreeSpace
 
 method getTotalSpace()J {
  +START:   #1
        return -1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getTotalSpace
 
 method getUsableSpace()J {
  +START:   #1
        return -1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getUsableSpace
 
 method getApi()Ljx/devices/bio/BlockIO; {
  +START:   #1
        return vR0.drive;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getApi
 
 method init(Ljx/devices/bio/BlockIO;Ljx/fs/buffer/BufferCache;Ljx/zero/Clock;)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 init
 
 method name()Ljava/lang/String; {
  +START:   #1
        return "FAT";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 name
 
 method getRootNode()Ljx/fs/Node; {
  +START:   #2
        b0 = new org/jnode/fs/jfat/FatRootDirectory(vR0);    [ R  i][ R . iRR]
  +B8b0:   #1 reference
        return b0;   
  +H9<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 8 handler 9 type 47
 }
// Register: rd 3/3 wr 3 swaps 0 any 0 found 0 getRootNode
 
 method init(Z)V {
  +START:   #1
        if vR0.inited==0 goto B8;   
  +B7:   #1
        return;   
  +B8:   #1
        vR0.inited = 1;   
        out.println("INIT JavaFS");   [  i. RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 init
 
 method release()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 release
 
 method build(Ljava/lang/String;I)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 build
 
 method check()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 check
 
 method getNode(I)Ljx/fs/Node; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getNode
 
 method getDeviceID()I {
  +START:   #1
        return vR0.deviceID;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getDeviceID
}
