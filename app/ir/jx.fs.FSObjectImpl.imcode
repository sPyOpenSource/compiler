class jx/fs/FSObjectImpl {
 
 method <init>(Ljx/fs/FilesystemImpl;Ljx/fs/FileSystem;Ljx/fs/FSObjectImpl;Ljx/fs/Inode;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.perm = 0;   
        vR0.attr = 0;   
        vR0.fs_impl = vR1;   
        vR0.fs = vR2;   
        vR0.inode = vR4;   
        vR0.perm = (jx/fs/EXT2Permission)(vR1.getDefaultPermission());   
        b1 = new jx/fs/EXT2Attribute(1,vR0.perm);    [ ?R . i.][ ?R . iRiR]
        vR0.attr = b1;   
        return;   
  +END:   #1
 }
// Register: rd 16/16 wr 3 swaps 0 any 0 found 0 <init>
 
 method close()V {
  +START:   #1
        vR0.sync@this();   [   R] 
        vR0.inode.decUseCount();   [   R] 
        vR0.inode = 0;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 close
 
 method sync()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 sync
 
 method getFileSystem()Ljx/fs/FilesystemInterface; {
  +START:   #1
        return vR0.fs_impl;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getFileSystem
 
 method isFile()Z {
  +START:   #1
        return vR0.inode.isFile();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isFile
 
 method isDirectory()Z {
  +START:   #1
        return vR0.inode.isDirectory();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isDirectory
 
 method isExecuteable()Z {
  +START:   #1
        return vR0.inode.isExecutable();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isExecuteable
 
 method getPermission()Ljx/fs/Permission; {
  +START:   #1
        return vR0.perm;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getPermission
 
 method getAttribute()Ljx/fs/FSAttribute; {
  +START:   #1
        if vR0.attr!=null goto B23;   
  +B7:   #1
        b1 = new jx/fs/EXT2Attribute(1,vR0.perm);    [ ?R  i][ ?R . iRiR]
        vR0.attr = b1;   
  +B23:   #1
        return vR0.attr;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 0 found 0 getAttribute
 
 method hashCode()I {
  +START:   #2
        b0 = vR0.inode.getIdentifier();    [ i  R] 
  +B9b0:   #1 int
        return b0;   
  +H10<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        return vR0.hashCode@special();   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 9 handler 10 type 17
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 hashCode
}
