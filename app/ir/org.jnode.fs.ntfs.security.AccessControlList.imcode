class org/jnode/fs/ntfs/security/AccessControlList {
 
 method <init>(Lorg/jnode/fs/ntfs/security/SecurityDescriptor;I)V {
  +START:   #1
        vR0.<init>@special(vR1,vi2);   [   iRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method getRevision()I {
  +START:   #1
        return vR0.getInt8@this(0);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getRevision
 
 method getSize()I {
  +START:   #1
        return vR0.getInt16@this(2);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getSize
 
 method getAceCount()I {
  +START:   #1
        return vR0.getInt16@this(4);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getAceCount
 
 method getAces()Ljava/util/List; {
  +START:   #1
        if vR0.aces!=null goto B65;   
  +B7:   #1
        b1 = new java/util/ArrayList();    [ RR  i][ RR  iR]
        vR0.aces = b1;   
        vi1 = 8;    
        vi2 = 0;    
  +B23:   #1
        if vi2>=vR0.getAceCount@this() goto B65;   
  +B31:   #1
        vR3 = new org/jnode/fs/ntfs/security/AccessControlEntry(vR0,vi1);    [ RR  i.][ RR . iiRR]
        vR0.aces.add(vR3);   [iiR RR . RR..] 
        vi1 = (vi1+vR3.getSize());    
        vi2++;   
        goto +B23;   [iiR RR . ....]
  +B65:   #2
        return vR0.aces;   
  +END:   #1
 }
// Register: rd 15/15 wr 6 swaps 0 any 3 found 2 getAces
}
