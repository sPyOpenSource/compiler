class org/jnode/fs/jfat/AbstractDirectory$DirIterator {
 
 method <init>(Lorg/jnode/fs/jfat/AbstractDirectory;)V {
  +START:   #1
        vR0.this$0 = vR1;   
        vR0.<init>@special();   [   R] 
        vR0.offset = 0;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 <init>
 
 method hasNext()Z {
  +START:   #1
        vi1 = vR0.this$0.entries.size@extra();    [   R] 
        if vR0.offset>=vi1 goto B39;   
  +B19:   #1
        vR2 = (org/jnode/fs/jfat/FatBasicDirEntry)(vR0.this$0.entries.get(vR0.offset));    
        return 1;   
  +B39:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 1 any 0 found 0 hasNext
 
 method next()Ljx/fs/Node; {
  +START:   #1
        vi1 = vR0.this$0.entries.size@extra();    [ R  R] 
        if vR0.offset>=vi1 goto B52;   
  +B19:   #1
        vR2 = (org/jnode/fs/jfat/FatBasicDirEntry)(vR0.this$0.entries.get(vR0.offset));    
        vR0.offset = (vR0.offset+1);   
        return (jx/fs/Node)(vR2);   
  -B52:   #1
        throw new java/util/NoSuchElementException();   
  +END:   #1
 }
// Register: rd 10/10 wr 4 swaps 1 any 0 found 1 next
 
 method remove()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 remove
 
 method next()Ljava/lang/Object; {
  +START:   #1
        return vR0.next@this();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 next
}
