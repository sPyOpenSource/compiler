class org/jnode/fs/jfat/FatChain$ChainIterator {
 
 method <init>(Lorg/jnode/fs/jfat/FatChain;)V {
  +START:   #1
        vR0.this$0 = vR1;   
        vR0.<init>@special();   [   R] 
        vR0.reset@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Lorg/jnode/fs/jfat/FatChain;I)V {
  +START:   #1
        vR0.<init>@special(vR1);   [   RR] 
        vR0.setPosition@special(vi2);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method reset()V {
  +START:   #1
        vR0.address = access$1100@special(vR0.this$0);   
        vR0.cursor = access$1100@special(vR0.this$0);   
        vR0.index = 0;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 reset
 
 method setPosition(I)V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b0.println(b1.append@extra("ps: ").append@extra(vi1).toString@extra());   [ RRR ii. RR.] 
        if vi1>=0 goto B56;   
  -B29:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR ... i..][ RRR ... iR.]
        b1.<init>@special(b2.append@extra("negative index: ").append@extra(vi1).toString@extra());   [ RRR ii. RR.] 
        throw b0;   
  +B56:   #1
        if vi1<=vR0.index goto B88;   
  +B64:   #1
        vi2 = vR0.index;    
  +B69:   #1
        if vi2>=vi1 goto B85;   
  +B74:   #1
        vR0.next@this();   [i RRR ... R..] 
        vi2++;   
        goto +B69;   [i RRR ... ...]
  +B85:   #1
        goto +B118;   forward return[i RRR ... ...]
  +B88:   #1
        if vi1>=vR0.index goto B118;   
  +B96:   #1
        vR0.reset@special();   [i RRR ... R..] 
        vi2 = 0;    
  +B102:   #1
        if vi2>=vi1 goto B118;   
  +B107:   #1
        vR0.next@this();   [i RRR ... R..] 
        vi2++;   
        goto +B102;   [i RRR ... ...]
  +B118:   #3
        return;   
  +END:   #1
 }
// Register: rd 21/21 wr 17 swaps 4 any 8 found 0 setPosition
 
 method getCluster(I)I {
  +START:   #1
        vi2 = 0;    
        if vi1<=vR0.index goto B41;   
  +B10:   #1
        vi3 = vR0.index;    
  +B15:   #1
        if vi3>=vi1 goto B38;   
  +B20:   #1
        if vR0.hasNext@this()==0 goto B38;   
  +B27:   #1
        vi2 = vR0.next@this();    [ii   R] 
        vi3++;   
        goto +B15;   [ii   .]
  +B38:   #2
        goto +B86;   forward return[ii   .]
  +B41:   #1
        if vi1>=vR0.index goto B81;   
  +B49:   #1
        vR0.reset@special();   [ii   R] 
        vi3 = 0;    
  +B55:   #1
        if vi3>=vi1 goto B78;   
  +B60:   #1
        if vR0.hasNext@this()==0 goto B78;   
  +B67:   #1
        vi2 = vR0.next@this();    [ii   R] 
        vi3++;   
        goto +B55;   [ii   .]
  +B78:   #2
        goto +B86;   forward return[ii   .]
  +B81:   #1
        vi2 = vR0.address;    
  +B86:   #2
        return vi2;   
  +END:   #1
 }
// Register: rd 18/18 wr 8 swaps 0 any 6 found 0 getCluster
 
 method appendChain(I)V {
  +START:   #1
        if access$1000@special(vR0.this$0).isEofChain(vR0.cursor)!=0 goto B47;   
  -B17:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR ... i.][ RRR ... iR]
        b1.<init>@special(b2.append@extra("cannot append to: ").append@extra(vR0.cursor).toString@extra());   [ RRR iii. RR.] 
        throw b0;   
  +B47:   #1
        vR0.cursor = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 11 swaps 4 any 1 found 0 appendChain
 
 method hasNext()Z {
  +START:   #1
        return access$1000@special(vR0.this$0).hasNext(vR0.cursor);   
  +END:   #1
 }
// Register: rd 2/2 wr 3 swaps 1 any 0 found 0 hasNext
 
 method next()I {
  +START:   #1
        if vR0.hasNext@this()!=0 goto B15;   
  -B7:   #1
        throw new java/util/NoSuchElementException();   
  +B15:   #1
        vR0.address = vR0.cursor;   
        out.println(vR0.address);   [ RRR i. iR] 
        vR0.cursor = access$1000@special(vR0.this$0).get(vR0.address);   
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RRR ii.R i.][ RRR ii.R iR]
        b0.println(b1.append@extra("cursor: ").append@extra(vR0.cursor).toString@extra());   [ RRR iiiRii. RR.] 
        if vR0.cursor!=vR0.address goto B120;   
  -B90:   #1
        b0 = new java/io/IOException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR ....... i..][ RRR ....... iR.]
        b1.<init>@special(b2.append@extra("circular chain at: ").append@extra(vR0.cursor).toString@extra());   [ RRR iii.... RR.] 
        throw b0;   
  +B120:   #1
        if access$1000@special(vR0.this$0).isFree@extra(vR0.cursor)==0 goto B167;   
  -B137:   #1
        b0 = new java/io/IOException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR ....... i..][ RRR ....... iR.]
        b1.<init>@special(b2.append@extra("free entry in chain at: ").append@extra(vR0.address).toString@extra());   [ RRR iii.... RR.] 
        throw b0;   
  +B167:   #1
        vR0.index = (vR0.index+1);   
        out.println("address ok");   [ RRR i...... RR.] 
        return vR0.address;   
  +END:   #1
 }
// Register: rd 27/27 wr 33 swaps 13 any 2 found 0 next
 
 method hasPrevious()Z {
  +START:   #1
        if vR0.cursor==access$1100@special(vR0.this$0) goto B18;   
  +B14:   #1
        b0 = 1;    
        goto +B19b0;   forward return[ i .. .]
  +B18:   #1
        b0 = 0;    
  +B19b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 4/4 wr 3 swaps 0 any 0 found 0 hasPrevious
 
 method previous()I {
  +START:   #1
        if vR0.hasPrevious@special()!=0 goto B15;   
  -B7:   #1
        throw new java/util/NoSuchElementException();   
  +B15:   #1
        vi1 = (vR0.index-1);    
        vR0.reset@special();   [i R  R.] 
        vi2 = 0;    
  +B28:   #1
        if vi2>=vi1 goto B44;   
  +B33:   #1
        vR0.next@this();   [ii R  R.] 
        vi2++;   
        goto +B28;   [ii R  ..]
  +B44:   #1
        return vR0.cursor;   
  +END:   #1
 }
// Register: rd 8/8 wr 3 swaps 0 any 2 found 0 previous
 
 method nextIndex()I {
  +START:   #1
        return vR0.index;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 nextIndex
 
 method previousIndex()I {
  +START:   #1
        return (vR0.index-1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 previousIndex
 
 method access$100(Lorg/jnode/fs/jfat/FatChain$ChainIterator;)V {
  +START:   #1
        vR0.reset@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 access$100
 
 method <init>(Lorg/jnode/fs/jfat/FatChain;Lorg/jnode/fs/jfat/FatChain$1;)V {
  +START:   #1
        vR0.<init>@special(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Lorg/jnode/fs/jfat/FatChain;ILorg/jnode/fs/jfat/FatChain$1;)V {
  +START:   #1
        vR0.<init>@special(vR1,vi2);   [   iRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method access$600(Lorg/jnode/fs/jfat/FatChain$ChainIterator;I)V {
  +START:   #1
        vR0.setPosition@special(vi1);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 access$600
}
