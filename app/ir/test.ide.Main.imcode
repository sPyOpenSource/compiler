class test/ide/Main {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method commonTest(Ljx/zero/Naming;Ljx/devices/bio/BlockIO;Z)Z {
  +START:   #1
        vR3 = (jx/zero/MemoryManager)(vR0.lookup("MemoryManager"));    
        vR4 = vR3.allocAligned(1024,4);    [R RR i. iiR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR i. i..][ RR i. iR.]
        b0.println(b1.append@extra("Capacity: ").append@extra(vR1.getCapacity()).toString@extra());   [RR RR iiii. RR.] 
        vi5 = 0;    
  +B57:   #1
        if vi5>=50 goto B108;   
  +B64:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ..... i..][ RR ..... iR.]
        b0.println(b1.append@extra("nr:").append@extra(vi5).toString@extra());   [RRi RR ii... RR.] 
        vR1.readSectors(vi5,2,vR4,1);   [RRi RR ii... iRiiR] 
        vi5++;   
        goto +B57;   [RRi RR ii... .....]
  +B108:   #1
        xdump@special(vR4,0,256);   [RRi RR ..... iiR..]
        vi5 = 0;    
  +B120:   #1
        if vi5>=vR4.size() goto B154;   
  +B132:   #1
        vR4.set8(vi5,(byte)(vi5 & 255));   [RRi RR i.... iiR..] 
        vi5++;   
        goto +B120;   [RRi RR i.... .....]
  +B154:   #1
        if vi2!=0 goto B169;   
  +B158:   #1
        vR1.writeSectors(0,2,vR4,1);   [RRi RR ..... iRiiR] 
  +B169:   #1
        out.println("write done.");   [RRi RR i.... RR...] 
        vi5 = 0;    
  +B180:   #1
        if vi5>=vR4.size() goto B208;   
  +B192:   #1
        vR4.set8(vi5,0);   [RRi RR ..... iiR..] 
        vi5++;   
        goto +B180;   [RRi RR ..... .....]
  +B208:   #1
        vR1.readSectors(0,2,vR4,1);   [RRi RR ..... iRiiR] 
        xdump@special(vR4,0,256);   [RRi RR ..... iiR..]
        vi5 = vR1.getCapacity();    [RRi RR ..... R....] 
        vi6 = 1;    
  +B239:   #1
        if vi6>=20 goto B259;   
  +B246:   #1
        throughput@special(vR1,vR3,vi6);   [RRii RR ..... iRR..]
        vi6++;   
        goto +B239;   [RRii RR ..... .....]
  +B259:   #1
        out.println("throughput test finished.");   [RRii RR i.... RR...] 
        vi6 = 0;    
  +B270:   #1
        if vi6>=vi5 goto B321;   
  +B277:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ..... i....][ RR ..... iR...]
        b0.println(b1.append@extra("nr:").append@extra(vi6).toString@extra());   [RRii RR ii... RR...] 
        vR1.readSectors(vi6,1,vR4,1);   [RRii RR ii... iRiiR] 
        vi6++;   
        goto +B270;   [RRii RR ii... .....]
  +B321:   #1
        out.println("read all test finished.");   [RRii RR i.... RR...] 
        return 1;   
  +END:   #1
 }
// Register: rd 34/34 wr 40 swaps 12 any 11 found 2 commonTest
 
 method throughput(Ljx/devices/bio/BlockIO;Ljx/zero/MemoryManager;I)V {
  +START:   #1
        vR3 = (jx/zero/Clock)(getInitialNaming@special().lookup("Clock"));    
        vR4 = vR1.allocAligned((512*vi2),4);    [R RR ii iiR] 
        vi5 = vR3.getTimeInMillis();    [RR RR ii R..] 
        vi6 = 0;    
  +B39:   #1
        if vi6>=100 goto B64;   
  +B46:   #1
        vR0.readSectors(vi6,vi2,vR4,1);   [RRii RR .. iRiiR] 
        vi6++;   
        goto +B39;   [RRii RR .. .....]
  +B64:   #1
        vi6 = vR3.getTimeInMillis();    [RRii RR .. R....] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .. i....][ RR .. iR...]
        b0.println(b1.append@extra("   Time for 100 ").append@extra((512*vi2)).append@extra(" byte blocks (ms): ").append@extra((vi6-vi5)).toString@extra());   [RRii RR iiiii... RR...] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiii... i....][ RR iiiii... iR...]
        b0.println(b1.append@extra("   Throughput (KByte/s): ").append@extra(((100*(512*vi2))/(vi6-vi5))).toString@extra());   [RRii RR iiiiiiii. RR...] 
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 28 swaps 10 any 2 found 0 throughput
 
 method main([Ljava/lang/String;)V {
  +START:   #1
        vR1 = getInitialNaming@special();    
        vR2 = new bioide/IDEDeviceImpl();    [ R  i][ R  iR]
        vR3 = vR2.getDrives();    [RR R  R.] 
        vR4 = vR3[0].getPartitions();    [RRR R  R.] 
        vR5 = vR3[0];    
        vi6 = 1;    
        commonTest@special(vR1,vR5,vi6);   [RRRRRi R  iRR]
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 5 swaps 0 any 0 found 0 main
}
