class java/util/function/IntUnaryOperator {
 
 method compose(Ljava/util/function/IntUnaryOperator;)Ljava/util/function/IntUnaryOperator; {
  +START:   #1
        requireNonNull@special(vR1);   [ RR  R]
        b0 = vR0;    
        b1 = vR1;    
        <operant>;   
        <operant>;   
        <operant>;   
        return -1;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 0 any 2 found 0 compose
 
 method andThen(Ljava/util/function/IntUnaryOperator;)Ljava/util/function/IntUnaryOperator; {
  +START:   #1
        requireNonNull@special(vR1);   [ RR  R]
        b0 = vR0;    
        b1 = vR1;    
        <operant>;   
        <operant>;   
        <operant>;   
        return 0;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 0 any 2 found 0 andThen
 
 method identity()Ljava/util/function/IntUnaryOperator; {
  +START:   #1
        <operant>;   
        <operant>;   
        <operant>;   
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 identity
 
 method lambda$identity$2(I)I {
  +START:   #1
        return vi0;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 lambda$identity$2
 
 method lambda$andThen$1(Ljava/util/function/IntUnaryOperator;I)I {
  +START:   #1
        return vR1.applyAsInt(vR0.applyAsInt(vi2));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 lambda$andThen$1
 
 method lambda$compose$0(Ljava/util/function/IntUnaryOperator;I)I {
  +START:   #1
        return vR0.applyAsInt(vR1.applyAsInt(vi2));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 lambda$compose$0
}
