class java/net/DatagramSocket {
 
 method finalize()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 finalize
 
 method close()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 close
 
 method receive(Ljava/net/DatagramPacket;)V {
  +START:   #1
        vi2 = requiresSpace@special();    [ RR  ]
        vR3 = vR0.net.getUDPBuffer(((vi2+vR1.length)+34));    [i RR i iR] 
        if vR0.timeout==134217727 goto B64;   
  +B32:   #1
        vR4 = vR0.receiver.receive(vR3,vR0.timeout);    [iR RR i iRR] 
        if vR4!=null goto B61;   
  -B53:   #1
        throw new java/net/SocketTimeoutException();   
  +B61:   #1
        goto +B76;   [iRR RR . ...]
  +B64:   #1
        vR4 = vR0.receiver.receive(vR3);    [iRR RR . RR.] 
  +B76:   #1
        vR4 = new jx/net/protocol/udp/UDPFormat(vR3,26);    [ RR . i..][ RR . iiRR]
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR . i...][ RR . iR..]
        b0.println(b1.append@extra("len: ").append@extra(vR4.getLength()).toString@extra());   [iRR RR iii. RR..] 
        vR3.copyToByteArray(vR1.buff,0,34,vR4.getLength());   [iRR RR iiiii iiiRR] 
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 18 swaps 6 any 1 found 0 receive
 
 method send(Ljava/net/DatagramPacket;)V {
  +START:   #2
        b1 = vR0.net;    
        b2 = vR0.port;    
        b3 = new jx/net/IPAddress(vR1.addr.getAddress());    [ ?RiR  i][ ?RiR . iRR]
        vR0.sender = b1.getUDPSender(b2,b3,vR1.getPort@extra());   
        out.println("get udp sender");   [ ?RiR ii. RR..] 
  +B43:   #1
        goto +B47;   [ ?RiR ... ....]
  +H46<caught exception>:   #1 reference
        vR2 = <caught exception>;    
  +B47:   #1
        vi2 = requiresSpace@special();    [ ?RiR ... ....]
        vR3 = vR0.net.getUDPBuffer(((vi2+vR1.length)+34));    [i ?RiR i.. iR..] 
        vR3.copyFromByteArray(vR1.buff,0,(vi2+34),vR1.length);   [iR ?RiR iiii iiiRR] 
        out.println("SENDING udp REQUEST...");   [iR ?RiR iiiii. RR...] 
        vR3 = vR0.sender.send(vR3);    [iR ?RiR iiiii. RR...] 
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 43 handler 46 type 34
 }
// Register: rd 19/19 wr 17 swaps 4 any 0 found 2 send
 
 method getLocalPort()I {
  +START:   #1
        return vR0.port;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getLocalPort
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special();   [ ?R?R  R] 
        vR0.port = 0;   
        vR0.timeout = 2147483647;   
        vR0.port = vi1;   
        vR0.net = (jx/net/NetInit)(getInitialNaming@special().lookup("NIC"));   
        b1 = vR0.net;    
        b3 = new jx/zero/Memory()[4];    
        b3[0] = vR0.net.getUDPBuffer(0);   
        b3[1] = vR0.net.getUDPBuffer(0);   
        b3[2] = vR0.net.getUDPBuffer(0);   
        b3[3] = vR0.net.getUDPBuffer(0);   
        vR0.receiver = b1.getUDPReceiver(vi1,b3);   
        return;   
  +END:   #1
 }
// Register: rd 19/19 wr 5 swaps 1 any 0 found 0 <init>
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special(0);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method setSoTimeout(I)V {
  +START:   #1
        vR0.timeout = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setSoTimeout
}
