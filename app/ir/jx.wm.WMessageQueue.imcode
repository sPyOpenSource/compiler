class jx/wm/WMessageQueue {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.m_acMsgs = 0;   
        vR0.m_nMsgCount = 0;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method addMessage(Ljx/wm/message/WMessage;)V {
  +START:   #1
        vR2 = new jx/wm/message/WMessage()[(vR0.m_nMsgCount+1)];    
        arraycopy@special(vR0.m_acMsgs,0,vR2,0,vR0.m_nMsgCount);   [R ?ii Ri iiRiR]
        b2 = vR0.m_nMsgCount;    
        b1 = b2;    
        vR0.m_nMsgCount = (b2+1);   
        vR2[b1] = vR1;   
        vR0.m_acMsgs = vR2;   
        return;   
  +END:   #1
 }
// Register: rd 12/12 wr 5 swaps 0 any 2 found 0 addMessage
 
 method nextMessage()Ljx/wm/message/WMessage; {
  +START:   #1
        if vR0.m_nMsgCount!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR2 = vR0.m_acMsgs[0];    
        if vR0.m_nMsgCount!=1 goto B37;   
  +B24:   #1
        vR0.m_acMsgs = 0;   
        vR0.m_nMsgCount = 0;   
        goto +B89;   forward return[?R   ]
  +B37:   #1
        vR1 = new jx/wm/message/WMessage()[(vR0.m_nMsgCount-1)];    
        vi3 = 1;    
  +B49:   #1
        if vi3>=vR0.m_nMsgCount goto B74;   
  +B57:   #1
        vR1[(vi3-1)] = vR0.m_acMsgs[vi3];   
        vi3++;   
        goto +B49;   [RRi   ..]
  +B74:   #1
        vR0.m_nMsgCount = (vR0.m_nMsgCount-1);   
        vR0.m_acMsgs = vR1;   
  +B89:   #1
        return vR2;   
  +END:   #1
 }
// Register: rd 18/18 wr 3 swaps 0 any 2 found 0 nextMessage
 
 method lastMessage()Ljx/wm/message/WMessage; {
  +START:   #1
        if vR0.m_nMsgCount!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        return vR0.m_acMsgs[(vR0.m_nMsgCount-1)];   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 lastMessage
 
 method getMessageCount()I {
  +START:   #1
        return vR0.m_nMsgCount;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMessageCount
 
 method isEmpty()Z {
  +START:   #1
        if vR0.m_nMsgCount!=0 goto B11;   
  +B7:   #1
        b0 = 1;    
        goto +B12b0;   forward return[ i  ]
  +B11:   #1
        b0 = 0;    
  +B12b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isEmpty
}
