class jx/synch/blocking/Queue {
 
 method <init>(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.<init>@special();   [ R  R] 
        vR0.cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        vR0.consumer = vR1;   
        vR2 = new jx/synch/blocking/Node();    [ R i. i.][ R i. iR]
        vR0.tail = vR2;   
        vR0.head = vR2;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 4 swaps 1 any 0 found 0 <init>
 
 method enqueue(Ljava/lang/Object;)V {
  +START:   #1
        vR2 = new jx/synch/blocking/Node();    [ R  i][ R  iR]
        vR2.value = vR1;   
        vR2.next.set(0);   [R R  RR] 
        vR0.tail.next.atomicUpdateUnblock(vR2,vR0.consumer);   [R R i RRR] 
        vR0.tail = vR2;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 1 any 0 found 0 enqueue
 
 method dequeue()Ljava/lang/Object; {
  +START:   #1
        vR1 = vR0.head;    
        vR0.head.next.blockIfEqual(0);   [R   RR] 
        vR0.head = (jx/synch/blocking/Node)(vR0.head.next.get());   
        return vR0.head.value;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 0 found 0 dequeue
}
