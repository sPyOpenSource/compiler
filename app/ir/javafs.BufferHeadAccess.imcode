class javafs/BufferHeadAccess {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.offset = 0;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method writeByte(IB)V {
  +START:   #1
        vR0.memory.set8((vR0.offset+vi1),vi2);   [  i iiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 writeByte
 
 method writeShort(IS)V {
  +START:   #1
        vR0.memory.set8(((vR0.offset+vi1)+1),(byte)((vi2 >> 8) & 255));   [  ii iiR] 
        vR0.memory.set8((vR0.offset+vi1),(byte)(vi2 & 255));   [  iiii iiR] 
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 2 any 0 found 0 writeShort
 
 method writeInt(II)V {
  +START:   #1
        vR0.memory.setLittleEndian32((vR0.offset+vi1),vi2);   [  i iiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 writeInt
 
 method writeTime(II)V {
  +START:   #1
        vR0.writeInt@extra(vi1,vi2);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 writeTime
 
 method writeString(ILjava/lang/String;I)V {
  +START:   #1
        vR4 = vR2.getBytes@extra();    [   R] 
        vi5 = vR4.length;    
        if vi5<=vi3 goto B20;   
  +B17:   #1
        vi5 = vi3;    
  +B20:   #1
        vi6 = 0;    
  +B23:   #1
        if vi6>=vi5 goto B59;   
  +B30:   #1
        vR0.memory.set8(((vR0.offset+vi1)+vi6),vR4[vi6]);   [Rii  ib biR] 
        vi6++;   
        goto +B23;   [Rii  ib ...]
  +B59:   #2
        if vi5>=vi3 goto B90;   
  +B65:   #1
        vR0.memory.set8(((vR0.offset+vi1)+vi5),0);   [Rii  i. iiR] 
        vi5++;   
        goto +B59;   [Rii  i. ...]
  +B90:   #1
        return;   
  +END:   #1
 }
// Register: rd 21/21 wr 9 swaps 2 any 6 found 0 writeString
 
 method readByte(I)B {
  +START:   #1
        return vR0.memory.get8((vR0.offset+vi1));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 readByte
 
 method readShort(I)S {
  +START:   #1
        return vR0.memory.getLittleEndian16((vR0.offset+vi1));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 readShort
 
 method readInt(I)I {
  +START:   #1
        return vR0.memory.getLittleEndian32((vR0.offset+vi1));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 readInt
 
 method readTime(I)I {
  +START:   #1
        return vR0.readInt@extra(vi1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 readTime
 
 method readString(II)Ljava/lang/String; {
  +START:   #1
        vR3 = new byte[vi2];    
        vi4 = 0;    
  +B7:   #1
        if vi4>=vi2 goto B41;   
  +B13:   #1
        vR3[vi4] = vR0.memory.get8(((vR0.offset+vi1)+vi4));   
        vi4++;   
        goto +B7;   [Ri R i ..]
  +B41:   #1
        return new java/lang/String(vR3);   
  +END:   #1
 }
// Register: rd 12/12 wr 5 swaps 1 any 2 found 0 readString
 
 method init(Ljx/fs/buffercache/BufferHead;I)V {
  +START:   #1
        vR0.bh = vR1;   
        vR0.offset = vi2;   
        vR0.memory = vR1.getData();   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 0 swaps 0 any 0 found 0 init
 
 method init(I)V {
  +START:   #1
        vR0.offset = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 init
 
 method length()I {
  +START:   #1
        return vR0.length;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 length
 
 method clear()V {
  +START:   #1
        vi1 = vR0.offset;    
  +B5:   #1
        if vi1>=(vR0.offset+vR0.length) goto B35;   
  +B18:   #1
        vR0.memory.set8(vi1,0);   [i   iiR] 
        vi1++;   
        goto +B5;   [i   ...]
  +B35:   #1
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 2 found 0 clear
}
