class gnu/java/awt/BitMaskExtent {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method setMask(J)V {
  +START:   #1
        vR0.leastSignificantBit = 0;   
        vR0.bitWidth = 0;   
        if compare(vl1,0)!=0 goto B17;   
  +B16:   #1
        return;   
  +B17:   #1
        vl3 = vl1;    
  +B19:   #1
        if compare((vl3 & 1),0)!=0 goto B45;   
  +B27:   #1
        vR0.leastSignificantBit = (byte)(vR0.leastSignificantBit+1);   
        vl3 = (vl3 >>> 1);    
        goto +B19;   [?l R  .]
  +B45:   #2
        if compare((vl3 & 1),0)==0 goto B71;   
  +B53:   #1
        vR0.bitWidth = (byte)(vR0.bitWidth+1);   
        vl3 = (vl3 >>> 1);    
        goto +B45;   [?l R  .]
  +B71:   #1
        if compare(vl3,0)==0 goto B87;   
  -B77:   #1
        throw new java/lang/IllegalArgumentException("mask must be continuous");   
  +B87:   #1
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 1 swaps 0 any 0 found 0 setMask
 
 method toMask()J {
  +START:   #1
        return (long)(((1 << vR0.bitWidth)-1) << vR0.leastSignificantBit);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 toMask
}
