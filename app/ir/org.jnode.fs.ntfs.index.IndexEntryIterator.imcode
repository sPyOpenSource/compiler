class org/jnode/fs/ntfs/index/IndexEntryIterator {
 
 method <init>(Lorg/jnode/fs/ntfs/FileRecord;Lorg/jnode/fs/ntfs/NTFSStructure;I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.offset = vi3;   
        vR0.parentFileRecord = vR1;   
        vR0.parent = vR2;   
        vR0.readNext@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 0 swaps 0 any 0 found 0 <init>
 
 method hasNext()Z {
  +START:   #1
        if vR0.nextEntry!=null goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        if vR0.nextEntry.isLastIndexEntryInSubnode@extra()==0 goto B29;   
  +B19:   #1
        if vR0.nextEntry.hasSubNodes@extra()==0 goto B33;   
  +B29:   #1
        b0 = 1;    
        goto +B34b0;   forward return[ i  .]
  +B33:   #1
        b0 = 0;    
  +B34b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 hasNext
 
 method next()Lorg/jnode/fs/ntfs/index/IndexEntry; {
  +START:   #1
        if vR0.nextEntry!=null goto B15;   
  -B7:   #1
        throw new java/util/NoSuchElementException();   
  +B15:   #1
        vR1 = vR0.nextEntry;    
        vi2 = vR0.nextEntry.getSize@extra();    [R RRRR  R.] 
        if vi2> 0 goto B78;   
  -B32:   #1
        b0 = new java/lang/IllegalStateException;    
        b1 = b0;    
        b2 = "Index entry size is 0, filesystem is corrupt.  Parent directory: '%s', reference number '%d'";    
        b3 = new java/lang/Object()[2];    
        b3[0] = vR0.nextEntry.getParentFileRecord@extra().getFileName();   
        b3[1] = valueOf@special(vR0.nextEntry.getParentFileRecord@extra().getReferenceNumber());   
        b1.<init>@special(format@special(b2,b3));   [Ri RRRR i RR] 
        throw b0;   
  +B78:   #1
        vR0.offset = (vR0.offset+vi2);   
        vR0.readNext@special();   [Ri RRRR . R.] 
        return vR1;   
  +END:   #1
 }
// Register: rd 17/17 wr 8 swaps 1 any 2 found 0 next
 
 method remove()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 remove
 
 method readNext()V {
  +START:   #1
        b1 = new org/jnode/fs/ntfs/index/IndexEntry(vR0.parentFileRecord,vR0.parent,vR0.offset);    [ ?R  i][ ?R . iiRRR]
        vR0.nextEntry = b1;   
  +B23:   #1
        if vR0.nextEntry.isLastIndexEntryInSubnode@extra()==0 goto B48;   
  +B33:   #1
        if vR0.nextEntry.hasSubNodes@extra()!=0 goto B48;   
  +B43:   #1
        vR0.nextEntry = 0;   
  +B48:   #3
        goto +B57;   forward return[ ?R . .....]
  +H51<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR0.nextEntry = 0;   
  +B57:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
23 - 48 handler 51 type 83
 }
// Register: rd 10/10 wr 3 swaps 0 any 0 found 0 readNext
 
 method next()Ljava/lang/Object; {
  +START:   #1
        return vR0.next@extra();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 next
}
