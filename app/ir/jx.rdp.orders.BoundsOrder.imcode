class jx/rdp/orders/BoundsOrder {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.left = 0;   
        vR0.right = 0;   
        vR0.top = 0;   
        vR0.bottom = 0;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method getLeft()I {
  +START:   #1
        return vR0.left;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getLeft
 
 method getRight()I {
  +START:   #1
        return vR0.right;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getRight
 
 method getTop()I {
  +START:   #1
        return vR0.top;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getTop
 
 method getBottom()I {
  +START:   #1
        return vR0.bottom;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getBottom
 
 method setLeft(I)V {
  +START:   #1
        vR0.left = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setLeft
 
 method setRight(I)V {
  +START:   #1
        vR0.right = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setRight
 
 method setTop(I)V {
  +START:   #1
        vR0.top = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setTop
 
 method setBottom(I)V {
  +START:   #1
        vR0.bottom = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setBottom
 
 method reset()V {
  +START:   #1
        vR0.left = 0;   
        vR0.right = 0;   
        vR0.top = 0;   
        vR0.bottom = 0;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 reset
}
