class java/lang/AbstractStringBuilder {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.value = new char[vi1];   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method length()I {
  +START:   #1
        return vR0.count;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 length
 
 method capacity()I {
  +START:   #1
        return vR0.value.length;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 capacity
 
 method ensureCapacity(I)V {
  +START:   #1
        if vi1<=0 goto B9;   
  +B4:   #1
        vR0.ensureCapacityInternal@special(vi1);   [   iR] 
  +B9:   #1
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 1 found 0 ensureCapacity
 
 method ensureCapacityInternal(I)V {
  +START:   #1
        if (vi1-vR0.value.length)<=0 goto B15;   
  +B10:   #1
        vR0.expandCapacity@this(vi1);   [   iR] 
  +B15:   #1
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 1 found 0 ensureCapacityInternal
 
 method expandCapacity(I)V {
  +START:   #1
        vi2 = ((vR0.value.length*2)+2);    
        if (vi2-vi1)>=0 goto B18;   
  +B16:   #1
        vi2 = vi1;    
  +B18:   #1
        if vi2>=0 goto B37;   
  +B22:   #1
        if vi1>=0 goto B34;   
  -B26:   #1
        throw new java/lang/OutOfMemoryError();   
  +B34:   #1
        vi2 = 2147483647;    
  +B37:   #1
        vR0.value = copyOf@special(vR0.value,vi2);   
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 3 swaps 0 any 4 found 0 expandCapacity
 
 method trimToSize()V {
  +START:   #1
        if vR0.count>=vR0.value.length goto B12;   
  +B12:   #1
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 trimToSize
 
 method setLength(I)V {
  +START:   #1
        if vi1>=0 goto B13;   
  -B4:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B13:   #1
        vR0.ensureCapacityInternal@special(vi1);   [ R . iR.] 
        if vR0.count>=vi1 goto B57;   
  +B26:   #1
        if vR0.count>=vi1 goto B62;   
  +B34:   #1
        vR0.value[vR0.count] = 0;   
        vR0.count = (vR0.count+1);   
        goto +B26;   [ R . ...]
  +B57:   #1
        vR0.count = vi1;   
  +B62:   #1
        return;   
  +END:   #1
 }
// Register: rd 14/14 wr 1 swaps 0 any 1 found 0 setLength
 
 method charAt(I)C {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<vR0.count goto B21;   
  -B12:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B21:   #1
        return vR0.value[vi1];   
  +END:   #1
 }
// Register: rd 7/7 wr 1 swaps 0 any 2 found 0 charAt
 
 method codePointAt(I)I {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<vR0.count goto B21;   
  -B12:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B21:   #1
        return codePointAt@special(vR0.value,vi1);   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 2 found 0 codePointAt
 
 method codePointBefore(I)I {
  +START:   #1
        vi2 = (vi1-1);    
        if vi2< 0 goto B16;   
  +B8:   #1
        if vi2<vR0.count goto B25;   
  -B16:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B25:   #1
        return codePointBefore@special(vR0.value,vi1);   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 3 found 0 codePointBefore
 
 method codePointCount(II)I {
  +START:   #1
        if vi1< 0 goto B17;   
  +B4:   #1
        if vi2>vR0.count goto B17;   
  +B12:   #1
        if vi1<=vi2 goto B25;   
  -B17:   #2
        throw new java/lang/IndexOutOfBoundsException();   
  +B25:   #1
        return codePointCountImpl@special(vR0.value,vi1,(vi2-vi1));   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 0 any 3 found 0 codePointCount
 
 method offsetByCodePoints(II)I {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<=vR0.count goto B20;   
  -B12:   #1
        throw new java/lang/IndexOutOfBoundsException();   
  +B20:   #1
        return offsetByCodePointsImpl@special(vR0.value,0,vR0.count,vi1,vi2);   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 2 found 0 offsetByCodePoints
 
 method getChars(II[CI)V {
  +START:   #1
        if vi1>=0 goto B13;   
  -B4:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B13:   #1
        if vi2< 0 goto B25;   
  +B17:   #1
        if vi2<=vR0.count goto B34;   
  -B25:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi2);   
  +B34:   #1
        if vi1<=vi2 goto B49;   
  -B39:   #1
        throw new java/lang/StringIndexOutOfBoundsException("srcBegin > srcEnd");   
  +B49:   #1
        arraycopy@special(vR0.value,vi1,vR3,vi4,(vi2-vi1));   [ R Ri iiRiR]
        return;   
  +END:   #1
 }
// Register: rd 14/14 wr 5 swaps 0 any 4 found 0 getChars
 
 method setCharAt(IC)V {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<vR0.count goto B21;   
  -B12:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B21:   #1
        vR0.value[vi1] = vi2;   
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 1 swaps 0 any 3 found 0 setCharAt
 
 method append(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.append@this(valueOf@special(vR1));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 append
 
 method append(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vR1!=null goto B7;   
  +B4:   #1
        vR1 = "null";    
  +B7:   #1
        vi2 = vR1.length@extra();    [   R] 
        vR0.ensureCapacityInternal@special((vR0.count+vi2));   [i  i iR] 
        vR1.getChars@extra(0,vi2,vR0.value,vR0.count);   [i  iii iRiiR] 
        vR0.count = (vR0.count+vi2);   
        return vR0;   
  +END:   #1
 }
// Register: rd 12/12 wr 5 swaps 2 any 1 found 0 append
 
 method append(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vR1!=null goto B11;   
  +B4:   #1
        return vR0.append@this("null");   
  +B11:   #1
        vi2 = vR1.length();    [  . R.] 
        vR0.ensureCapacityInternal@special((vR0.count+vi2));   [i  i iR] 
        vR1.getChars(0,vi2,vR0.value,vR0.count);   [i  iii iRiiR] 
        vR0.count = (vR0.count+vi2);   
        return vR0;   
  +END:   #1
 }
// Register: rd 13/13 wr 5 swaps 3 any 1 found 0 append
 
 method append(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vR1!=null goto B7;   
  +B4:   #1
        vR1 = "null";    
  +B7:   #1
        if (vR1 instanceof java/lang/String)==0 goto B23;   
  +B14:   #1
        return vR0.append@this((java/lang/String)(vR1));   
  +B23:   #1
        if (vR1 instanceof java/lang/StringBuffer)==0 goto B39;   
  +B30:   #1
        return vR0.append@this((java/lang/StringBuffer)(vR1));   
  +B39:   #1
        return vR0.append@this(vR1,0,vR1.length());   
  +END:   #1
 }
// Register: rd 11/11 wr 2 swaps 1 any 1 found 2 append
 
 method append(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vR1!=null goto B7;   
  +B4:   #1
        vR1 = "null";    
  +B7:   #1
        if vi2< 0 goto B26;   
  +B11:   #1
        if vi2>vi3 goto B26;   
  +B16:   #1
        if vi3<=vR1.length() goto B76;   
  -B26:   #2
        b0 = new java/lang/IndexOutOfBoundsException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra("start ").append@extra(vi2).append@extra(", end ").append@extra(vi3).append@extra(", s.length() ").append@extra(vR1.length()).toString@extra());   [ RRR iiiii..... RR.....] 
        throw b0;   
  +B76:   #1
        vi4 = (vi3-vi2);    
        vR0.ensureCapacityInternal@special((vR0.count+vi4));   [i RRR i......... iR.....] 
        vi5 = vi2;    
        vi6 = vR0.count;    
  +B101:   #1
        if vi5>=vi3 goto B131;   
  +B107:   #1
        vR0.value[vi6] = vR1.charAt(vi5);   
        vi5++;   
        vi6++;   
        goto +B101;   [iii RRR .......... .......]
  +B131:   #1
        vR0.count = (vR0.count+vi4);   
        return vR0;   
  +END:   #1
 }
// Register: rd 30/30 wr 21 swaps 6 any 10 found 1 append
 
 method append([C)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        vi2 = vR1.length;    
        vR0.ensureCapacityInternal@special((vR0.count+vi2));   [i  i iR] 
        arraycopy@special(vR1,0,vR0.value,vR0.count,vi2);   [i  iRi iiRiR]
        vR0.count = (vR0.count+vi2);   
        return vR0;   
  +END:   #1
 }
// Register: rd 10/10 wr 4 swaps 1 any 0 found 0 append
 
 method append([CII)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi3<=0 goto B14;   
  +B4:   #1
        vR0.ensureCapacityInternal@special((vR0.count+vi3));   [  i iR] 
  +B14:   #1
        arraycopy@special(vR1,vi2,vR0.value,vR0.count,vi3);   [  Ri iiRiR]
        vR0.count = (vR0.count+vi3);   
        return vR0;   
  +END:   #1
 }
// Register: rd 10/10 wr 3 swaps 1 any 1 found 0 append
 
 method append(Z)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1==0 goto B89;   
  +B4:   #1
        vR0.ensureCapacityInternal@special((vR0.count+4));   [ Rii i iR] 
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 116;   
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 114;   
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 117;   
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 101;   
        goto +B189;   forward return[ Rii i ..]
  +B89:   #1
        vR0.ensureCapacityInternal@special((vR0.count+5));   [ Rii i iR] 
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 102;   
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 97;   
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 108;   
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 115;   
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = 101;   
  +B189:   #1
        return vR0;   
  +END:   #1
 }
// Register: rd 69/69 wr 29 swaps 2 any 10 found 0 append
 
 method append(C)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        vR0.ensureCapacityInternal@special((vR0.count+1));   [ Rii i iR] 
        b0 = vR0.value;    
        b2 = vR0.count;    
        b1 = b2;    
        vR0.count = (b2+1);   
        b0[b1] = vi1;   
        return vR0;   
  +END:   #1
 }
// Register: rd 11/11 wr 4 swaps 1 any 2 found 0 append
 
 method append(I)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1!=-2147483648 goto B15;   
  +B6:   #1
        vR0.append@this("-2147483648");   [ i i RR] 
        return vR0;   
  +B15:   #1
        if vi1>=0 goto B29;   
  +B19:   #1
        b0 = (stringSize@special(-vi1)+1);    
        goto +B33b0;   [ i i ..]
  +B29:   #1
        b0 = stringSize@special(vi1);    [ii i . i.]
  +B33b0:   #1 int
        vi2 = b0;    
        vi3 = (vR0.count+vi2);    
        vR0.ensureCapacityInternal@special(vi3);   [ii i . iR] 
        getChars@special(vi1,vi3,vR0.value);   [ii i R Rii]
        vR0.count = vi3;   
        return vR0;   
  +END:   #1
 }
// Register: rd 13/13 wr 7 swaps 1 any 3 found 0 append
 
 method append(J)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if compare(vl1,-9223372036854775808)!=0 goto B17;   
  +B8:   #1
        vR0.append@this("-9223372036854775808");   [ i i RR] 
        return vR0;   
  +B17:   #1
        if compare(vl1,0)>=0 goto B33;   
  +B23:   #1
        b0 = (stringSize@special(-vl1)+1);    
        goto +B37b0;   [ i . ..]
  +B33:   #1
        b0 = stringSize@special(vl1);    [?ii i . ??]
  +B37b0:   #1 int
        vi3 = b0;    
        vi4 = (vR0.count+vi3);    
        vR0.ensureCapacityInternal@special(vi4);   [?ii i . iR] 
        getChars@special(vl1,vi4,vR0.value);   [?ii i R Ri??]
        vR0.count = vi4;   
        return vR0;   
  +END:   #1
 }
// Register: rd 10/10 wr 6 swaps 1 any 1 found 0 append
 
 method append(F)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 append
 
 method append(D)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 append
 
 method delete(II)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1>=0 goto B13;   
  -B4:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B13:   #1
        if vi2<=vR0.count goto B26;   
  +B21:   #1
        vi2 = vR0.count;    
  +B26:   #1
        if vi1<=vi2 goto B39;   
  -B31:   #1
        throw new java/lang/StringIndexOutOfBoundsException();   
  +B39:   #1
        vi3 = (vi2-vi1);    
        if vi3<=0 goto B78;   
  +B47:   #1
        arraycopy@special(vR0.value,(vi1+vi3),vR0.value,vi1,(vR0.count-vi2));   [i R RiRi iiRiR]
        vR0.count = (vR0.count-vi3);   
  +B78:   #1
        return vR0;   
  +END:   #1
 }
// Register: rd 21/21 wr 7 swaps 0 any 5 found 0 delete
 
 method appendCodePoint(I)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        vi2 = vR0.count;    
        if isBmpCodePoint@special(vi1)==0 goto B37;   
  +B12:   #1
        vR0.ensureCapacityInternal@special((vi2+1));   [i R i iR] 
        vR0.value[vi2] = (char)vi1;   
        vR0.count = (vi2+1);   
        goto +B78;   forward return[i R i ..]
  +B37:   #1
        if isValidCodePoint@special(vi1)==0 goto B70;   
  +B44:   #1
        vR0.ensureCapacityInternal@special((vi2+2));   [i R i iR] 
        toSurrogates@special(vi1,vR0.value,vi2);   [i R iR iRi]
        vR0.count = (vi2+2);   
        goto +B78;   forward return[i R iR ...]
  -B70:   #1
        throw new java/lang/IllegalArgumentException();   
  +B78:   #2
        return vR0;   
  +END:   #1
 }
// Register: rd 14/14 wr 4 swaps 2 any 1 found 0 appendCodePoint
 
 method deleteCharAt(I)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<vR0.count goto B21;   
  -B12:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B21:   #1
        arraycopy@special(vR0.value,(vi1+1),vR0.value,vi1,((vR0.count-vi1)-1));   [ R RiRi iiRiR]
        vR0.count = (vR0.count-1);   
        return vR0;   
  +END:   #1
 }
// Register: rd 13/13 wr 5 swaps 0 any 2 found 0 deleteCharAt
 
 method replace(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1>=0 goto B13;   
  -B4:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B13:   #1
        if vi1<=vR0.count goto B31;   
  -B21:   #1
        throw new java/lang/StringIndexOutOfBoundsException("start > length()");   
  +B31:   #1
        if vi1<=vi2 goto B46;   
  -B36:   #1
        throw new java/lang/StringIndexOutOfBoundsException("start > end");   
  +B46:   #1
        if vi2<=vR0.count goto B59;   
  +B54:   #1
        vi2 = vR0.count;    
  +B59:   #1
        vi4 = vR3.length@extra();    [ R . R..] 
        vi5 = ((vR0.count+vi4)-(vi2-vi1));    
        vR0.ensureCapacityInternal@special(vi5);   [ii R . iR.] 
        arraycopy@special(vR0.value,vi2,vR0.value,(vi1+vi4),(vR0.count-vi2));   [ii R RRii iiRiR]
        vR3.getChars@extra(vR0.value,vi1);   [ii R RRiii iRR..] 
        vR0.count = vi5;   
        return vR0;   
  +END:   #1
 }
// Register: rd 29/29 wr 11 swaps 1 any 4 found 0 replace
 
 method substring(I)Ljava/lang/String; {
  +START:   #1
        return vR0.substring@this(vi1,vR0.count);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 substring
 
 method subSequence(II)Ljava/lang/CharSequence; {
  +START:   #1
        return vR0.substring@this(vi1,vi2);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 subSequence
 
 method substring(II)Ljava/lang/String; {
  +START:   #1
        if vi1>=0 goto B13;   
  -B4:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B13:   #1
        if vi2<=vR0.count goto B30;   
  -B21:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi2);   
  +B30:   #1
        if vi1<=vi2 goto B46;   
  -B35:   #1
        throw new java/lang/StringIndexOutOfBoundsException((vi2-vi1));   
  +B46:   #1
        return new java/lang/String(vR0.value,vi1,(vi2-vi1));   
  +END:   #1
 }
// Register: rd 17/17 wr 4 swaps 0 any 3 found 0 substring
 
 method insert(I[CII)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<=vR0.length@this() goto B21;   
  -B12:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B21:   #1
        if vi3< 0 goto B39;   
  +B25:   #1
        if vi4< 0 goto B39;   
  +B30:   #1
        if vi3<=(vR2.length-vi4) goto B86;   
  -B39:   #2
        b0 = new java/lang/StringIndexOutOfBoundsException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR . i..][ RRR . iR.]
        b1.<init>@special(b2.append@extra("offset ").append@extra(vi3).append@extra(", len ").append@extra(vi4).append@extra(", str.length ").append@extra(vR2.length).toString@extra());   [ RRR iiiii..... RR.....] 
        throw b0;   
  +B86:   #1
        vR0.ensureCapacityInternal@special((vR0.count+vi4));   [ RRR i......... iR.....] 
        arraycopy@special(vR0.value,vi1,vR0.value,(vi1+vi4),(vR0.count-vi1));   [ RRR iRRii..... iiRiR..]
        arraycopy@special(vR2,vi3,vR0.value,vi1,vi4);   [ RRR iRRiiR.... iiRiR..]
        vR0.count = (vR0.count+vi4);   
        return vR0;   
  +END:   #1
 }
// Register: rd 30/30 wr 21 swaps 7 any 6 found 1 insert
 
 method insert(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.insert@this(vi1,valueOf@special(vR2));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 insert
 
 method insert(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<=vR0.length@this() goto B21;   
  -B12:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B21:   #1
        if vR2!=null goto B28;   
  +B25:   #1
        vR2 = "null";    
  +B28:   #1
        vi3 = vR2.length@extra();    [ R . R..] 
        vR0.ensureCapacityInternal@special((vR0.count+vi3));   [i R i iR.] 
        arraycopy@special(vR0.value,vi1,vR0.value,(vi1+vi3),(vR0.count-vi1));   [i R iRRii iiRiR]
        vR2.getChars@extra(vR0.value,vi1);   [i R iRRiii iRR..] 
        vR0.count = (vR0.count+vi3);   
        return vR0;   
  +END:   #1
 }
// Register: rd 23/23 wr 9 swaps 2 any 3 found 1 insert
 
 method insert(I[C)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<=vR0.length@this() goto B21;   
  -B12:   #1
        throw new java/lang/StringIndexOutOfBoundsException(vi1);   
  +B21:   #1
        vi3 = vR2.length;    
        vR0.ensureCapacityInternal@special((vR0.count+vi3));   [i R i iR.] 
        arraycopy@special(vR0.value,vi1,vR0.value,(vi1+vi3),(vR0.count-vi1));   [i R iRRii iiRiR]
        arraycopy@special(vR2,0,vR0.value,vi1,vi3);   [i R iRRiiR iiRiR]
        vR0.count = (vR0.count+vi3);   
        return vR0;   
  +END:   #1
 }
// Register: rd 21/21 wr 8 swaps 1 any 2 found 1 insert
 
 method insert(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.insert@this(vi1,vR2,0,vR2.length());   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 insert
 
 method insert(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        if vi1< 0 goto B12;   
  +B4:   #1
        if vi1<=vR0.length@this() goto B39;   
  -B12:   #1
        b0 = new java/lang/IndexOutOfBoundsException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra("dstOffset ").append@extra(vi1).toString@extra());   [ RRR ii. RR.] 
        throw b0;   
  +B39:   #1
        if vi3< 0 goto B65;   
  +B43:   #1
        if vi4< 0 goto B65;   
  +B48:   #1
        if vi3>vi4 goto B65;   
  +B54:   #1
        if vi4<=vR2.length() goto B116;   
  -B65:   #3
        b0 = new java/lang/IndexOutOfBoundsException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR ... i..][ RRR ... iR.]
        b1.<init>@special(b2.append@extra("start ").append@extra(vi3).append@extra(", end ").append@extra(vi4).append@extra(", s.length() ").append@extra(vR2.length()).toString@extra());   [ RRR iiiii..... RR.....] 
        throw b0;   
  +B116:   #1
        vi5 = (vi4-vi3);    
        vR0.ensureCapacityInternal@special((vR0.count+vi5));   [i RRR i......... iR.....] 
        arraycopy@special(vR0.value,vi1,vR0.value,(vi1+vi5),(vR0.count-vi1));   [i RRR iRRii..... iiRiR..]
        vi6 = vi3;    
  +B158:   #1
        if vi6>=vi4 goto B188;   
  +B165:   #1
        b0 = vR0.value;    
        b1 = vi1;    
        vi1++;   
        b0[b1] = vR2.charAt(vi6);   
        vi6++;   
        goto +B158;   [ii RiR .......... .......]
  +B188:   #1
        vR0.count = (vR0.count+vi5);   
        return vR0;   
  +END:   #1
 }
// Register: rd 45/45 wr 32 swaps 8 any 14 found 2 insert
 
 method insert(IZ)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.insert@this(vi1,valueOf@special(vi2));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 insert
 
 method insert(IC)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        vR0.ensureCapacityInternal@special((vR0.count+1));   [  i iR] 
        arraycopy@special(vR0.value,vi1,vR0.value,(vi1+1),(vR0.count-vi1));   [  iRRii iiRiR]
        vR0.value[vi1] = vi2;   
        vR0.count = (vR0.count+1);   
        return vR0;   
  +END:   #1
 }
// Register: rd 13/13 wr 5 swaps 1 any 1 found 0 insert
 
 method insert(II)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.insert@this(vi1,valueOf@special(vi2));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 insert
 
 method insert(IJ)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.insert@this(vi1,valueOf@special(vl2));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 insert
 
 method insert(IF)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.insert@this(vi1,valueOf@special(vl2));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 insert
 
 method insert(ID)Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        return vR0.insert@this(vi1,valueOf@special(vd2));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 insert
 
 method indexOf(Ljava/lang/String;)I {
  +START:   #1
        return vR0.indexOf@this(vR1,0);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 indexOf
 
 method indexOf(Ljava/lang/String;I)I {
  +START:   #1
        return indexOf@special(vR0.value,0,vR0.count,vR1.toCharArray@extra(),0,vR1.length@extra(),vi2);   
  +END:   #1
 }
// Register: rd 7/7 wr 7 swaps 1 any 0 found 0 indexOf
 
 method lastIndexOf(Ljava/lang/String;)I {
  +START:   #1
        return vR0.lastIndexOf@this(vR1,vR0.count);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 lastIndexOf
 
 method lastIndexOf(Ljava/lang/String;I)I {
  +START:   #1
        return lastIndexOf@special(vR0.value,0,vR0.count,vR1.toCharArray@extra(),0,vR1.length@extra(),vi2);   
  +END:   #1
 }
// Register: rd 7/7 wr 7 swaps 1 any 0 found 0 lastIndexOf
 
 method reverse()Ljava/lang/AbstractStringBuilder; {
  +START:   #1
        vi1 = 0;    
        vi2 = (vR0.count-1);    
        vi3 = ((vi2-1) >> 1);    
  +B15:   #1
        if vi3< 0 goto B103;   
  +B19:   #1
        vi4 = vR0.value[vi3];    
        vi5 = vR0.value[(vi2-vi3)];    
        if vi1!=0 goto B79;   
  +B41:   #1
        if vi4<MIN_SURROGATE goto B57;   
  +B49:   #1
        if vi4<=MAX_SURROGATE goto B73;   
  +B57:   #1
        if vi5<MIN_SURROGATE goto B77;   
  +B65:   #1
        if vi5>MAX_SURROGATE goto B77;   
  +B73:   #1
        b0 = 1;    
        goto +B78b0;   [iiiii ii  .]
  +B77:   #2
        b0 = 0;    
  +B78b0:   #1 int
        vi1 = b0;    
  +B79:   #1
        vR0.value[vi3] = vi5;   
        vR0.value[(vi2-vi3)] = vi4;   
        vi3--;   
        goto +B15;   [iiiii ii  .]
  +B103:   #1
        if vi1==0 goto B178;   
  +B107:   #1
        vi3 = 0;    
  +B109:   #1
        if vi3>=(vR0.count-1) goto B178;   
  +B119:   #1
        vi4 = vR0.value[vi3];    
        if isLowSurrogate@special(vi4)==0 goto B172;   
  +B135:   #1
        vi5 = vR0.value[(vi3+1)];    
        if isHighSurrogate@special(vi5)==0 goto B172;   
  +B153:   #1
        b0 = vR0.value;    
        b1 = vi3;    
        vi3++;   
        b0[b1] = vi5;   
        vR0.value[vi3] = vi4;   
  +B172:   #2
        vi3++;   
        goto +B109;   [iiiii Ri  .]
  +B178:   #2
        return vR0;   
  +END:   #1
 }
// Register: rd 44/44 wr 15 swaps 0 any 18 found 4 reverse
 
 method getValue()[C {
  +START:   #1
        return vR0.value;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getValue
 
 method append(C)Ljava/lang/Appendable; {
  +START:   #1
        return vR0.append@this(vi1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 append
 
 method append(Ljava/lang/CharSequence;II)Ljava/lang/Appendable; {
  +START:   #1
        return vR0.append@this(vR1,vi2,vi3);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 append
 
 method append(Ljava/lang/CharSequence;)Ljava/lang/Appendable; {
  +START:   #1
        return vR0.append@this(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 append
}
