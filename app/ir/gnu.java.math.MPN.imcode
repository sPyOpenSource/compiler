class gnu/java/math/MPN {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method add_1([I[III)I {
  +START:   #1
        vl4 = ((long)vi3 & 4294967295);    
        vi6 = 0;    
  +B11:   #1
        if vi6>=vi2 goto B51;   
  +B17:   #1
        vl4 = (vl4+((long)vR1[vi6] & 4294967295));    
        vR0[vi6] = (int)vl4;   
        vl4 = (vl4 >> 32);    
        vi6++;   
        goto +B11;   [l?i  . .]
  +B51:   #1
        return (int)vl4;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 2 found 0 add_1
 
 method add_n([I[I[II)I {
  +START:   #1
        vl4 = 0;    
        vi6 = 0;    
  +B6:   #1
        if vi6>=vi3 goto B56;   
  +B12:   #1
        vl4 = (vl4+(((long)vR1[vi6] & 4294967295)+((long)vR2[vi6] & 4294967295)));    
        vR0[vi6] = (int)vl4;   
        vl4 = (vl4 >>> 32);    
        vi6++;   
        goto +B6;   [l?i  . .]
  +B56:   #1
        return (int)vl4;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 2 found 0 add_n
 
 method sub_n([I[I[II)I {
  +START:   #1
        vi4 = 0;    
        vi5 = 0;    
  +B6:   #1
        if vi5>=vi3 goto B93;   
  +B12:   #1
        vi6 = vR2[vi5];    
        vi7 = vR1[vi5];    
        vi6 = (vi6+vi4);    
        if (vi6 ^ -2147483648)>=(vi4 ^ -2147483648) goto B48;   
  +B44:   #1
        b0 = 1;    
        goto +B49b0;   [iiii ii  ]
  +B48:   #1
        b0 = 0;    
  +B49b0:   #1 int
        vi4 = b0;    
        vi6 = (vi7-vi6);    
        b0 = vi4;    
        if (vi6 ^ -2147483648)<=(vi7 ^ -2147483648) goto B77;   
  +B73b0:   #1 int
        b1 = 1;    
        goto +B78b0b1;   [iiii ii  ]
  +B77b0:   #1 int
        b1 = 0;    
  +B78b0b1:   #1 int int
        vi4 = (b0+b1);    
        vR0[vi5] = vi6;   
        vi5++;   
        goto +B6;   [iiii ii  ]
  +B93:   #1
        return vi4;   
  +END:   #1
 }
// Register: rd 23/23 wr 12 swaps 0 any 10 found 0 sub_n
 
 method mul_1([I[III)I {
  +START:   #1
        vl4 = ((long)vi3 & 4294967295);    
        vl6 = 0;    
        vi8 = 0;    
  +B14:   #1
        if vi8>=vi2 goto B57;   
  +B20:   #1
        vl6 = (vl6+(((long)vR1[vi8] & 4294967295)*vl4));    
        vR0[vi8] = (int)vl6;   
        vl6 = (vl6 >>> 32);    
        vi8++;   
        goto +B14;   [l?l?i  . .]
  +B57:   #1
        return (int)vl6;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 2 found 0 mul_1
 
 method mul([I[II[II)V {
  +START:   #1
        vR0[vi2] = mul_1@special(vR0,vR1,vi2,vR3[0]);   
        vi5 = 1;    
  +B15:   #1
        if vi5>=vi4 goto B113;   
  +B22:   #1
        vl6 = ((long)vR3[vi5] & 4294967295);    
        vl8 = 0;    
        vi10 = 0;    
  +B39:   #1
        if vi10>=vi2 goto B98;   
  +B45:   #1
        vl8 = (vl8+((((long)vR1[vi10] & 4294967295)*vl6)+((long)vR0[(vi5+vi10)] & 4294967295)));    
        vR0[(vi5+vi10)] = (int)vl8;   
        vl8 = (vl8 >>> 32);    
        vi10++;   
        goto +B39;   [il?l?i  . ....]
  +B98:   #1
        vR0[(vi5+vi2)] = (int)vl8;   
        vi5++;   
        goto +B15;   [il?l?i  . ....]
  +B113:   #1
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 6 swaps 0 any 4 found 0 mul
 
 method udiv_qrnnd(JI)J {
  +START:   #1
        vl7 = (vl0 >>> 32);    
        vl9 = (vl0 & 4294967295);    
        if vi2< 0 goto B83;   
  +B17:   #1
        if compare(vl7,((((long)vi2-vl7)-(vl9 >>> 31)) & 4294967295))>=0 goto B52;   
  +B38:   #1
        vl3 = (vl0/(long)vi2);    
        vl5 = (vl0%(long)vi2);    
        goto +B309;   forward return[il?l?l?l   .]
  +B52:   #1
        vl11 = (vl0-((long)vi2 << 31));    
        vl3 = (vl11/(long)vi2);    
        vl5 = (vl11%(long)vi2);    
        vl3 = (vl3+-2147483648);    
        goto +B309;   forward return[il?l?l?l?l   .]
  +B83:   #1
        vl11 = (long)(vi2 >>> 1);    
        vl13 = (vl0 >>> 1);    
        if compare(vl7,vl11)< 0 goto B112;   
  +B102:   #1
        if compare((vl7 >> 1),vl11)>=0 goto B268;   
  +B112:   #1
        if compare(vl7,vl11)>=0 goto B136;   
  +B120:   #1
        vl3 = (vl13/vl11);    
        vl5 = (vl13%vl11);    
        goto +B182;   [il?l?l?l?l?l   .]
  +B136:   #1
        vl13 = ((vl13-(vl11 << 32)) ^ -1);    
        vl3 = (vl13/vl11);    
        vl5 = (vl13%vl11);    
        vl3 = ((vl3 ^ -1) & 4294967295);    
        vl5 = ((vl11-1)-vl5);    
  +B182:   #1
        vl5 = ((2*vl5)+(vl9 & 1));    
        if (vi2 & 1)==0 goto B309;   
  +B201:   #1
        if compare(vl5,vl3)< 0 goto B217;   
  +B208:   #1
        vl5 = (vl5-vl3);    
        goto +B309;   forward return[il?l?l?l?l?l   .]
  +B217:   #1
        if compare((vl3-vl5),((long)vi2 & 4294967295))> 0 goto B247;   
  +B231:   #1
        vl5 = ((vl5-vl3)+(long)vi2);    
        vl3 = (vl3-1);    
        goto +B309;   forward return[il?l?l?l?l?l   .]
  +B247:   #1
        vl5 = (((vl5-vl3)+(long)vi2)+(long)vi2);    
        vl3 = (vl3-2);    
        goto +B309;   forward return[il?l?l?l?l?l   .]
  +B268:   #1
        if compare(vl9,((long)-vi2 & 4294967295))< 0 goto B295;   
  +B281:   #1
        vl3 = -1;    
        vl5 = (vl9+(long)vi2);    
        goto +B309;   forward return[il?l?l?l?l?l   .]
  +B295:   #1
        vl3 = -2;    
        vl5 = ((vl9+(long)vi2)+(long)vi2);    
  +B309:   #7
        return ((vl5 << 32) | (vl3 & 4294967295));   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 2 found 0 udiv_qrnnd
 
 method divmod_1([I[III)I {
  +START:   #1
        vi4 = (vi2-1);    
        vl5 = (long)vR1[vi4];    
        if compare((vl5 & 4294967295),((long)vi3 & 4294967295))< 0 goto B34;   
  +B28:   #1
        vl5 = 0;    
        goto +B49;   [il ?i  .]
  +B34:   #1
        b1 = vi4;    
        vi4--;   
        vR0[b1] = 0;   
        vl5 = (vl5 << 32);    
  +B49:   #2
        if vi4< 0 goto B97;   
  +B54:   #1
        vi7 = vR1[vi4];    
        vl5 = ((vl5 & -4294967296) | ((long)vi7 & 4294967295));    
        vl5 = udiv_qrnnd@special(vl5,vi3);    
        vR0[vi4] = (int)vl5;   
        vi4--;   
        goto +B49;   [il?i ?i . .]
  +B97:   #1
        return (int)(vl5 >> 32);   
  +END:   #1
 }
// Register: rd 12/12 wr 7 swaps 0 any 5 found 0 divmod_1
 
 method submul_1([II[III)I {
  +START:   #1
        vl5 = ((long)vi4 & 4294967295);    
        vi7 = 0;    
        vi8 = 0;    
  +B15:   #1
        vl9 = (((long)vR2[vi8] & 4294967295)*vl5);    
        vi11 = (int)vl9;    
        vi12 = (int)(vl9 >> 32);    
        vi11 = (vi11+vi7);    
        if (vi11 ^ -2147483648)>=(vi7 ^ -2147483648) goto B66;   
  +B62:   #1
        b0 = 1;    
        goto +B67b0;   [l?iil?ii i .. .]
  +B66:   #1
        b0 = 0;    
  +B67b0:   #1 int
        vi7 = (b0+vi12);    
        vi13 = vR0[(vi1+vi8)];    
        vi11 = (vi13-vi11);    
        if (vi11 ^ -2147483648)<=(vi13 ^ -2147483648) goto B103;   
  +B100:   #1
        vi7++;   
  +B103:   #1
        vR0[(vi1+vi8)] = vi11;   
        vi8++;   
        if vi8<vi3 goto B15;   
  +B120:   #1
        return vi7;   
  +END:   #1
 }
// Register: rd 22/22 wr 13 swaps 0 any 9 found 0 submul_1
 
 method divide([II[II)V {
  +START:   #1
        vi4 = vi1;    
  +B3:   #1
        if vR0[vi4]!=vR2[(vi3-1)] goto B21;   
  +B15:   #1
        vi5 = -1;    
        goto +B56;   [ii   ]
  +B21:   #1
        vl6 = (((long)vR0[vi4] << 32)+((long)vR0[(vi4-1)] & 4294967295));    
        vi5 = (int)udiv_qrnnd@special(vl6,vR2[(vi3-1)]);    
  +B56:   #1
        if vi5==0 goto B194;   
  +B61:   #1
        vi6 = submul_1@special(vR0,(vi4-vi3),vR2,vi3,vi5);    [ii  i iiRiR]
        vi7 = vR0[vi4];    
        vl8 = (((long)vi7 & 4294967295)-((long)vi6 & 4294967295));    
  +B98:   #1
        if compare(vl8,0)==0 goto B194;   
  +B105:   #1
        vi5--;   
        vl10 = 0;    
        vi12 = 0;    
  +B114:   #1
        if vi12>=vi3 goto B174;   
  +B120:   #1
        vl10 = (vl10+(((long)vR0[((vi4-vi3)+vi12)] & 4294967295)+((long)vR2[vi12] & 4294967295)));    
        vR0[((vi4-vi3)+vi12)] = (int)vl10;   
        vl10 = (vl10 >>> 32);    
        vi12++;   
        goto +B114;   [iiiil?l?i  . .....]
  +B174:   #1
        vR0[vi4] = (int)((long)vR0[vi4]+vl10);   
        vl8 = (vl10-1);    
        goto +B98;   [iiiil?l?i  . .....]
  +B194:   #2
        vR0[vi4] = vi5;   
        vi4--;   
        if vi4>=vi3 goto B3;   
  +B209:   #1
        return;   
  +END:   #1
 }
// Register: rd 28/28 wr 12 swaps 0 any 8 found 0 divide
 
 method chars_per_word(I)I {
  +START:   #1
        if vi0>=10 goto B44;   
  +B6:   #1
        if vi0>=8 goto B41;   
  +B12:   #1
        if vi0>2 goto B20;   
  +B17:   #1
        return 32;   
  +B20:   #1
        if vi0!=3 goto B28;   
  +B25:   #1
        return 20;   
  +B28:   #1
        if vi0!=4 goto B36;   
  +B33:   #1
        return 16;   
  +B36:   #1
        return (18-vi0);   
  +B41:   #1
        return 10;   
  +B44:   #1
        if vi0>=12 goto B53;   
  +B50:   #1
        return 9;   
  +B53:   #1
        if vi0>16 goto B62;   
  +B59:   #1
        return 8;   
  +B62:   #1
        if vi0>23 goto B71;   
  +B68:   #1
        return 7;   
  +B71:   #1
        if vi0>40 goto B80;   
  +B77:   #1
        return 6;   
  +B80:   #1
        if vi0>256 goto B89;   
  +B87:   #1
        return 4;   
  +B89:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 11/11 wr 0 swaps 0 any 10 found 0 chars_per_word
 
 method count_leading_zeros(I)I {
  +START:   #1
        if vi0!=0 goto B7;   
  +B4:   #1
        return 32;   
  +B7:   #1
        vi1 = 0;    
        vi2 = 16;    
  +B12:   #1
        if vi2<=0 goto B40;   
  +B16:   #1
        vi3 = (vi0 >>> vi2);    
        if vi3!=0 goto B31;   
  +B24:   #1
        vi1 = (vi1+vi2);    
        goto +B33;   [iii   ]
  +B31:   #1
        vi0 = vi3;    
  +B33:   #1
        vi2 = (vi2 >> 1);    
        goto +B12;   [iii   ]
  +B40:   #1
        return vi1;   
  +END:   #1
 }
// Register: rd 10/10 wr 5 swaps 0 any 6 found 0 count_leading_zeros
 
 method set_str([I[BII)I {
  +START:   #1
        vi4 = 0;    
        if (vi3 & (vi3-1))!=0 goto B122;   
  +B11:   #1
        vi5 = 0;    
        vi6 = 0;    
        vi7 = vi3;    
  +B20:   #1
        b0 = (vi7 >> 1);    
        vi7 = b0;    
        if b0==0 goto B36;   
  +B30:   #1
        vi6++;   
        goto +B20;   [iiii iii  ]
  +B36:   #1
        vi7 = 0;    
        vi8 = vi2;    
  +B42:   #1
        vi8--;   
        if vi8< 0 goto B105;   
  +B50:   #1
        vi9 = vR1[vi8];    
        vi7 = (vi7 | (vi9 << vi5));    
        vi5 = (vi5+vi6);    
        if vi5<32 goto B102;   
  +B80:   #1
        b1 = vi4;    
        vi4++;   
        vR0[b1] = vi7;   
        vi5+=-32;   
        vi7 = (vi9 >> (vi6-vi5));    
  +B102:   #1
        goto +B42;   [iiiiii iii  ]
  +B105:   #1
        if vi7==0 goto B119;   
  +B110:   #1
        b1 = vi4;    
        vi4++;   
        vR0[b1] = vi7;   
  +B119:   #1
        goto +B251;   forward return[iiiiii iii  ]
  +B122:   #1
        vi5 = chars_per_word@special(vi3);    [iiiiii iii  i]
        vi6 = 0;    
  +B131:   #1
        if vi6>=vi2 goto B251;   
  +B137:   #1
        vi7 = (vi2-vi6);    
        if vi7<=vi5 goto B154;   
  +B150:   #1
        vi7 = vi5;    
  +B154:   #1
        b1 = vi6;    
        vi6++;   
        vi8 = vR1[b1];    
        vi9 = vi3;    
  +B166:   #1
        vi7--;   
        if vi7<=0 goto B197;   
  +B174:   #1
        b0 = (vi8*vi3);    
        b2 = vi6;    
        vi6++;   
        vi8 = (b0+vR1[b2]);    
        vi9 = (vi9*vi3);    
        goto +B166;   [iiiiii iii  .]
  +B197:   #1
        if vi4!=0 goto B209;   
  +B202:   #1
        vi10 = vi8;    
        goto +B234;   [iiiiiii iii  .]
  +B209:   #1
        vi10 = mul_1@special(vR0,vR0,vi4,vi9);    [iiiiiii iii  iiRR]
        vi10 = (vi10+add_1@special(vR0,vR0,vi4,vi8));    
  +B234:   #1
        if vi10==0 goto B248;   
  +B239:   #1
        b1 = vi4;    
        vi4++;   
        vR0[b1] = vi10;   
  +B248:   #1
        goto +B131;   [iiiiiii iii  ....]
  +B251:   #2
        return vi4;   
  +END:   #1
 }
// Register: rd 67/67 wr 38 swaps 0 any 41 found 2 set_str
 
 method cmp([I[II)I {
  +START:   #2
        vi2--;   
        if vi2< 0 goto B43;   
  +B7:   #1
        vi3 = vR0[vi2];    
        vi4 = vR1[vi2];    
        if vi3==vi4 goto B40;   
  +B22:   #1
        if (vi3 ^ -2147483648)<=(vi4 ^ -2147483648) goto B38;   
  +B34:   #1
        b0 = 1;    
        goto +B39b0;   forward return[ii i  ]
  +B38:   #1
        b0 = -1;    
  +B39b0:   #1 int
        return b0;   
  +B40:   #1
        goto +START;   [ii i  ]
  +B43:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 11/11 wr 3 swaps 0 any 4 found 0 cmp
 
 method cmp([II[II)I {
  +START:   #1
        if vi1<=vi3 goto B9;   
  +B5:   #1
        b0 = 1;    
        goto +B24b0;   forward return[ i  ]
  +B9:   #1
        if vi1>=vi3 goto B18;   
  +B14:   #1
        b0 = -1;    
        goto +B24b0;   forward return[ i  ]
  +B18:   #1
        b0 = cmp@special(vR0,vR2,vi1);    [ i  iRR]
  +B24b0:   #2 int
        return b0;   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 0 any 2 found 0 cmp
 
 method rshift([I[IIII)I {
  +START:   #1
        vi5 = (32-vi4);    
        vi6 = vR1[vi2];    
        vi7 = (vi6 << vi5);    
        vi8 = 1;    
  +B22:   #1
        if vi8>=vi3 goto B63;   
  +B28:   #1
        vi9 = vR1[(vi2+vi8)];    
        vR0[(vi8-1)] = ((vi6 >>> vi4) | (vi9 << vi5));   
        vi6 = vi9;    
        vi8++;   
        goto +B22;   [iiiii   ]
  +B63:   #1
        vR0[(vi8-1)] = (vi6 >>> vi4);   
        return vi7;   
  +END:   #1
 }
// Register: rd 23/23 wr 6 swaps 0 any 3 found 0 rshift
 
 method rshift0([I[IIII)V {
  +START:   #1
        if vi4<=0 goto B18;   
  +B5:   #1
        rshift@special(vR0,vR1,vi2,vi3,vi4);   [   iiiRR]
        goto +B43;   forward return[   .....]
  +B18:   #1
        vi5 = 0;    
  +B21:   #1
        if vi5>=vi3 goto B43;   
  +B27:   #1
        vR0[vi5] = vR1[(vi5+vi2)];   
        vi5++;   
        goto +B21;   [i   .....]
  +B43:   #2
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 2 swaps 0 any 3 found 0 rshift0
 
 method rshift_long([III)J {
  +START:   #1
        vi3 = (vi2 >> 5);    
        vi2 = (vi2 & 31);    
        if vR0[(vi1-1)]>=0 goto B21;   
  +B17:   #1
        b0 = -1;    
        goto +B22b0;   [i i  ]
  +B21:   #1
        b0 = 0;    
  +B22b0:   #1 int
        vi4 = b0;    
        if vi3<vi1 goto B34;   
  +B29:   #1
        b0 = vi4;    
        goto +B37b0;   [ii i  ]
  +B34:   #1
        b0 = vR0[vi3];    
  +B37b0:   #1 int
        vi5 = b0;    
        vi3++;   
        if vi3<vi1 goto B52;   
  +B47:   #1
        b0 = vi4;    
        goto +B55b0;   [iii i  ]
  +B52:   #1
        b0 = vR0[vi3];    
  +B55b0:   #1 int
        vi6 = b0;    
        if vi2==0 goto B107;   
  +B61:   #1
        vi3++;   
        if vi3<vi1 goto B74;   
  +B69:   #1
        b0 = vi4;    
        goto +B77b0;   [iiii i  ]
  +B74:   #1
        b0 = vR0[vi3];    
  +B77b0:   #1 int
        vi7 = b0;    
        vi5 = ((vi5 >>> vi2) | (vi6 << (32-vi2)));    
        vi6 = ((vi6 >>> vi2) | (vi7 << (32-vi2)));    
  +B107:   #1
        return (((long)vi6 << 32) | ((long)vi5 & 4294967295));   
  +END:   #1
 }
// Register: rd 34/34 wr 17 swaps 0 any 15 found 0 rshift_long
 
 method lshift([II[III)I {
  +START:   #1
        vi5 = (32-vi4);    
        vi6 = (vi3-1);    
        vi7 = vR2[vi6];    
        vi8 = (vi7 >>> vi5);    
        vi1++;   
  +B28:   #1
        vi6--;   
        if vi6< 0 goto B66;   
  +B36:   #1
        vi9 = vR2[vi6];    
        vR0[(vi1+vi6)] = ((vi7 << vi4) | (vi9 >>> vi5));   
        vi7 = vi9;    
        goto +B28;   [iiiii   ]
  +B66:   #1
        vR0[(vi1+vi6)] = (vi7 << vi4);   
        return vi8;   
  +END:   #1
 }
// Register: rd 25/25 wr 8 swaps 0 any 5 found 0 lshift
 
 method findLowestBit(I)I {
  +START:   #1
        vi1 = 0;    
  +B2:   #1
        if (vi0 & 15)!=0 goto B19;   
  +B9:   #1
        vi0 = (vi0 >> 4);    
        vi1+=4;   
        goto +B2;   [i   ]
  +B19:   #1
        if (vi0 & 3)!=0 goto B32;   
  +B25:   #1
        vi0 = (vi0 >> 2);    
        vi1+=2;   
  +B32:   #1
        if (vi0 & 1)!=0 goto B41;   
  +B38:   #1
        vi1++;   
  +B41:   #1
        return vi1;   
  +END:   #1
 }
// Register: rd 9/9 wr 6 swaps 0 any 8 found 0 findLowestBit
 
 method findLowestBit([I)I {
  +START:   #1
        vi1 = 0;    
  +B2:   #1
        if vR0[vi1]==0 goto B20;   
  +B8:   #1
        return ((32*vi1)+findLowestBit@special(vR0[vi1]));   
  +B20:   #1
        vi1++;   
        goto +B2;   [i  .. .]
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 0 any 1 found 0 findLowestBit
 
 method gcd([I[II)I {
  +START:   #1
        vi3 = 0;    
  +B2:   #1
        vi4 = (vR0[vi3] | vR1[vi3]);    
        if vi4==0 goto B19;   
  +B16:   #1
        goto +B25;   [ii ?i  ]
  +B19:   #1
        vi3++;   
        goto +B2;   [iiiiRRR ?i  ]
  +B25:   #1
        vi5 = vi3;    
        vi6 = findLowestBit@special(vi4);    [iii ?i  i]
        vi2 = (vi2-vi5);    
        rshift0@special(vR0,vR0,vi5,vi2,vi6);   [iiii ?i  iiiRR]
        rshift0@special(vR1,vR1,vi5,vi2,vi6);   [iiii ?i  iiiRR]
        if (vR0[0] & 1)==0 goto B77;   
  +B68:   #1
        vR7 = vR0;    
        vR8 = vR1;    
        goto +B83;   [iiiiRR ?i  .....]
  +B77:   #1
        vR7 = vR1;    
        vR8 = vR0;    
  +B83:   #3
        vi3 = 0;    
  +B85:   #1
        if vR8[vi3]!=0 goto B98;   
  +B92:   #1
        vi3++;   
        goto +B85;   [iiiiRR ?i  .....]
  +B98:   #1
        if vi3<=0 goto B149;   
  +B102:   #1
        vi9 = 0;    
  +B105:   #1
        if vi9>=(vi2-vi3) goto B131;   
  +B113:   #1
        vR8[vi9] = vR8[(vi9+vi3)];   
        vi9++;   
        goto +B105;   [iiiiRRi ?i  .....]
  +B131:   #2
        if vi9>=vi2 goto B149;   
  +B137:   #1
        vR8[vi9] = 0;   
        vi9++;   
        goto +B131;   [iiiiRRi ?i  .....]
  +B149:   #2
        vi3 = findLowestBit@special(vR8[0]);    [iiiiRRi ?i i i....]
        if vi3<=0 goto B172;   
  +B161:   #1
        rshift@special(vR8,vR8,0,vi2,vi3);   [iiiiRRi ?i . iiiRR]
  +B172:   #1
        vi3 = cmp@special(vR7,vR8,vi2);    [iiiiRRi ?i . iRR..]
        if vi3!=0 goto B188;   
  +B185:   #1
        goto +B253;   [iiiiRRi ?i . .....]
  +B188:   #1
        if vi3<=0 goto B218;   
  +B192:   #1
        sub_n@special(vR7,vR7,vR8,vi2);   [iiiiRRi ?i . iRRR.]
        vR9 = vR7;    
        vR7 = vR8;    
        vR8 = vR9;    
        goto +B229;   [iiiiRRR ?i . .....]
  +B218:   #1
        sub_n@special(vR8,vR8,vR7,vi2);   [iiiiRRR ?i . iRRR.]
  +B229:   #2
        if vR7[(vi2-1)]!=0 goto B83;   
  +B238:   #1
        if vR8[(vi2-1)]!=0 goto B83;   
  +B247:   #1
        vi2--;   
        goto +B229;   [iiiiRRR ?i . .....]
  +B253:   #1
        if (vi5+vi6)<=0 goto B340;   
  +B261:   #1
        if vi6<=0 goto B297;   
  +B266:   #1
        vi9 = lshift@special(vR0,vi5,vR0,vi2,vi6);    [iiiiRRi ?i . iiRiR]
        if vi9==0 goto B294;   
  +B283:   #1
        b1 = vi2;    
        vi2++;   
        vR0[(b1+vi5)] = vi9;   
  +B294:   #1
        goto +B318;   [iiiiRRi ?i . .....]
  +B297:   #1
        vi3 = vi2;    
  +B299:   #1
        vi3--;   
        if vi3< 0 goto B318;   
  +B306:   #1
        vR0[(vi3+vi5)] = vR0[vi3];   
        goto +B299;   [iiiiRRi ?i . .....]
  +B318:   #2
        vi3 = vi5;    
  +B321:   #1
        vi3--;   
        if vi3< 0 goto B335;   
  +B328:   #1
        vR0[vi3] = 0;   
        goto +B321;   [iiiiRRi ?i . .....]
  +B335:   #1
        vi2 = (vi2+vi5);    
  +B340:   #1
        return vi2;   
  +END:   #1
 }
// Register: rd 70/70 wr 30 swaps 0 any 34 found 0 gcd
 
 method intLength(I)I {
  +START:   #1
        b0 = 32;    
        if vi0>=0 goto B12;   
  +B6b0:   #1 int
        b1 = (vi0 ^ -1);    
        goto +B13b0b1;   forward return[ ii  ]
  +B12b0:   #1 int
        b1 = vi0;    
  +B13b0b1:   #1 int int
        return (b0-count_leading_zeros@special(b1));   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 3 found 1 intLength
 
 method intLength([II)I {
  +START:   #1
        vi1--;   
        return (intLength@special(vR0[vi1])+(32*vi1));   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 1 found 0 intLength
}
