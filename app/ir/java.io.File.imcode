class java/io/File {
 
 method <init>(Ljava/lang/String;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vi2 = vR1.lastIndexOf@extra(47);    [   iR] 
        if vi2>=0 goto B29;   
  +B15:   #1
        vR0.fileName = vR1;   
        vR0.pathName = "";   
        goto +B63;   [i   ..]
  +B29:   #1
        vR0.fileName = vR1.substring@extra((vi2+1));   
        if vi2!=0 goto B53;   
  +B44:   #1
        vR0.pathName = "/";   
        goto +B63;   [i  . ..]
  +B53:   #1
        vR0.pathName = vR1.substring@extra(0,vi2);   
  +B63:   #2
        vR0.name = vR1;   
        vR0.fs = (jx/fs/FS)(lookup@special("FS"));   
  +B80:   #1
        vR0.fsobj = vR0.fs.lookup("/index.html");   
  +B95:   #1
        goto +B104;   forward return[i  .. ...]
  +H98<caught exception>:   #1 reference
        vR3 = <caught exception>;    
        vR0.fsobj = 0;   
  +B104:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
80 - 95 handler 98 type 59
 }
// Register: rd 20/20 wr 6 swaps 2 any 2 found 0 <init>
 
 method <init>(Ljava/lang/String;Ljava/lang/String;)V {
  +START:   #1
        b1 = new java/io/File(vR1);    [ ?R  i][ ?R . iRR]
        vR0.<init>@special(b1,vR2);   [ ?R . RRR] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljava/io/File;Ljava/lang/String;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.fileName = vR2;   
        vR0.name = vR0.fileName;   
        b1 = new java/lang/StringBuilder();    [ ?R  i][ ?R  iR]
        vR0.pathName = b1.append@extra(vR1.getPath@extra()).append@extra("/").append@extra(vR2).toString@extra();   
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 6 swaps 2 any 0 found 0 <init>
 
 method getName()Ljava/lang/String; {
  +START:   #1
        return vR0.fileName;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getName
 
 method getPath()Ljava/lang/String; {
  +START:   #1
        return vR0.pathName;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getPath
 
 method getCanonicalPath()Ljava/lang/String; {
  +START:   #1
        return vR0.getAbsolutePath@extra();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCanonicalPath
 
 method getParent()Ljava/lang/String; {
  +START:   #1
        return vR0.pathName;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getParent
 
 method exists()Z {
  +START:   #1
        if vR0.fsobj==null goto B11;   
  +B7:   #1
        b0 = 1;    
        goto +B12b0;   forward return[ i  ]
  +B11:   #1
        b0 = 0;    
  +B12b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 exists
 
 method canWrite()Z {
  -START:   #1
        throw new java/lang/Error("not implemented");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 canWrite
 
 method canRead()Z {
  -START:   #1
        throw new java/lang/Error("not implemented");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 canRead
 
 method isFile()Z {
  +START:   #1
        return vR0.fsobj.isFile();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isFile
 
 method isDirectory()Z {
  +START:   #2
        b0 = vR0.fsobj.isDirectory();    [ b  R] 
  +B9b0:   #1 boolean
        return b0;   
  +H10<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 9 handler 10 type 59
 }
// Register: rd 2/2 wr 2 swaps 0 any 0 found 0 isDirectory
 
 method isAbsolute()Z {
  +START:   #1
        if vR0.name.charAt@extra(0)==47 goto B53;   
  +B13:   #1
        if isLetter@special(vR0.name.charAt@extra(0))==0 goto B57;   
  +B27:   #1
        if vR0.name.charAt@extra(1)!=58 goto B57;   
  +B40:   #1
        if vR0.name.charAt@extra(2)!=92 goto B57;   
  +B53:   #1
        b0 = 1;    
        goto +B58b0;   forward return[ i . ..]
  +B57:   #3
        b0 = 0;    
  +B58b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 isAbsolute
 
 method getAbsolutePath()Ljava/lang/String; {
  +START:   #1
        if vR0.isAbsolute@extra()==0 goto B14;   
  +B7:   #1
        b0 = vR0.name;    
        goto +B44b0;   forward return[ R  .]
  +B14:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        b0 = b0.append@extra(getProperty@special("user.dir")).append@extra("/").append@extra(vR0.name).toString@extra();    [ R ii...Ri R...] [ R iiR..Ri RR..] [ R iiRR.Ri RRR.] [ R iiRRRRi RRRR] 
  +B44b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 5/5 wr 10 swaps 3 any 0 found 0 getAbsolutePath
 
 method lastModified()J {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 lastModified
 
 method length()I {
  +START:   #2
        b0 = (jx/fs/RegularFile)(vR0.fsobj).getLength();    [ i . R.] 
  +B12b0:   #1 int
        return b0;   
  +H13<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        return -1;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 12 handler 13 type 59
 }
// Register: rd 3/3 wr 3 swaps 0 any 0 found 0 length
 
 method mkdir()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 mkdir
 
 method renameTo(Ljava/io/File;)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 renameTo
 
 method mkdirs()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 mkdirs
 
 method list()[Ljava/lang/String; {
  +START:   #2
        vR1 = (jx/fs/Directory)(vR0.fsobj);    
        b0 = vR1.list();    [R R . R.] 
  +B14b0:   #1 reference
        return b0;   
  +H15<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 14 handler 15 type 59
 }
// Register: rd 4/4 wr 4 swaps 0 any 0 found 0 list
 
 method list(Ljava/io/FilenameFilter;)[Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/String()[1];    
        b0[0] = "";   
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 list
 
 method delete()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 delete
 
 method hashCode()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hashCode
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 equals
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return vR0.name;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 toString
 
 method compareTo(Ljava/io/File;)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 compareTo
 
 method compareTo(Ljava/lang/Object;)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 compareTo
 
 method createNewFile()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 createNewFile
 
 method createTempFile(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 createTempFile
 
 method createTempFile(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 createTempFile
 
 method deleteOnExit()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 deleteOnExit
 
 method getAbsoluteFile()Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getAbsoluteFile
 
 method getCanonicalFile()Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getCanonicalFile
 
 method getParentFile()Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getParentFile
 
 method isHidden()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isHidden
 
 method listFiles()[Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 listFiles
 
 method listFiles(Ljava/io/FilenameFilter;)[Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 listFiles
 
 method listRoots()[Ljava/io/File; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 listRoots
 
 method setLastModified(J)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setLastModified
 
 method setReadOnly()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setReadOnly
}
