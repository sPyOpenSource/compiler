class metaxa/os/devices/net/Befehl {
 
 method COMMAND_GLOBAL_RESET()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_GLOBAL_RESET
 
 method GLOBAL_RESET_MASK_TP_AUI_RESET()I {
  +START:   #1
        return bit_0@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_TP_AUI_RESET
 
 method GLOBAL_RESET_MASK_ENDEC_RESET()I {
  +START:   #1
        return bit_1@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_ENDEC_RESET
 
 method GLOBAL_RESET_MASK_NETWORK_RESET()I {
  +START:   #1
        return bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_NETWORK_RESET
 
 method GLOBAL_RESET_MASK_FIFO_RESET()I {
  +START:   #1
        return bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_FIFO_RESET
 
 method GLOBAL_RESET_MASK_AISM_RESET()I {
  +START:   #1
        return bit_4@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_AISM_RESET
 
 method GLOBAL_RESET_MASK_HOST_RESET()I {
  +START:   #1
        return bit_5@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_HOST_RESET
 
 method GLOBAL_RESET_MASK_SMB_RESET()I {
  +START:   #1
        return bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_SMB_RESET
 
 method GLOBAL_RESET_MASK_VCO_RESET()I {
  +START:   #1
        return bit_7@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_VCO_RESET
 
 method GLOBAL_RESET_MASK_UP_DOWN_RESET()I {
  +START:   #1
        return bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 GLOBAL_RESET_MASK_UP_DOWN_RESET
 
 method COMMAND_SELECT_REGISTER_WINDOW()I {
  +START:   #1
        return 2048;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_SELECT_REGISTER_WINDOW
 
 method COMMAND_ENABLE_DC_CONVERTER()I {
  +START:   #1
        return 4096;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_ENABLE_DC_CONVERTER
 
 method COMMAND_RX_DISABLE()I {
  +START:   #1
        return 6144;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_RX_DISABLE
 
 method COMMAND_RX_ENABLE()I {
  +START:   #1
        return 8192;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_RX_ENABLE
 
 method COMMAND_RX_RESET()I {
  +START:   #1
        return 10240;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_RX_RESET
 
 method RX_RESET_MASK_TP_AUI_RESET()I {
  +START:   #1
        return bit_0@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_RESET_MASK_TP_AUI_RESET
 
 method RX_RESET_MASK_ENDEC_RESET()I {
  +START:   #1
        return bit_1@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_RESET_MASK_ENDEC_RESET
 
 method RX_RESET_MASK_NETWORK_RESET()I {
  +START:   #1
        return bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_RESET_MASK_NETWORK_RESET
 
 method RX_RESET_MASK_FIFO_RESET()I {
  +START:   #1
        return bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_RESET_MASK_FIFO_RESET
 
 method RX_RESET_MASK_UP_RESET()I {
  +START:   #1
        return bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_RESET_MASK_UP_RESET
 
 method COMMAND_UP_STALL()I {
  +START:   #1
        return 12288;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_UP_STALL
 
 method COMMAND_UP_UNSTALL()I {
  +START:   #1
        return 12289;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_UP_UNSTALL
 
 method COMMAND_DOWN_STALL()I {
  +START:   #1
        return 12290;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_DOWN_STALL
 
 method COMMAND_DOWN_UNSTALL()I {
  +START:   #1
        return 12291;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_DOWN_UNSTALL
 
 method COMMAND_TX_DONE()I {
  +START:   #1
        return 14336;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_TX_DONE
 
 method COMMAND_RX_DISCARD()I {
  +START:   #1
        return 16384;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_RX_DISCARD
 
 method COMMAND_TX_ENABLE()I {
  +START:   #1
        return 18432;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_TX_ENABLE
 
 method COMMAND_TX_DISABLE()I {
  +START:   #1
        return 20480;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_TX_DISABLE
 
 method COMMAND_TX_RESET()I {
  +START:   #1
        return 22528;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_TX_RESET
 
 method TX_RESET_MASK_TP_AUI_RESET()I {
  +START:   #1
        return bit_0@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_RESET_MASK_TP_AUI_RESET
 
 method TX_RESET_MASK_ENDEC_RESET()I {
  +START:   #1
        return bit_1@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_RESET_MASK_ENDEC_RESET
 
 method TX_RESET_MASK_NETWORK_RESET()I {
  +START:   #1
        return bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_RESET_MASK_NETWORK_RESET
 
 method TX_RESET_MASK_FIFO_RESET()I {
  +START:   #1
        return bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_RESET_MASK_FIFO_RESET
 
 method TX_RESET_MASK_DOWN_RESET()I {
  +START:   #1
        return bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 TX_RESET_MASK_DOWN_RESET
 
 method COMMAND_REQUEST_INTERRUPT()I {
  +START:   #1
        return 24576;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_REQUEST_INTERRUPT
 
 method COMMAND_ACKNOWLEDGE_INTERRUPT()I {
  +START:   #1
        return 26624;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_ACKNOWLEDGE_INTERRUPT
 
 method ACKNOWLEDGE_INTERRUPT_LATCH()I {
  +START:   #1
        return bit_0@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_INTERRUPT_LATCH
 
 method ACKNOWLEDGE_HOST_ERROR()I {
  +START:   #1
        return bit_1@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_HOST_ERROR
 
 method ACKNOWLEDGE_TX_COMPLETE()I {
  +START:   #1
        return bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_TX_COMPLETE
 
 method ACKNOWLEDGE_RX_COMPLETE()I {
  +START:   #1
        return bit_4@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_RX_COMPLETE
 
 method ACKNOWLEDGE_RX_EARLY()I {
  +START:   #1
        return bit_5@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_RX_EARLY
 
 method ACKNOWLEDGE_INTERRUPT_REQUESTED()I {
  +START:   #1
        return bit_6@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_INTERRUPT_REQUESTED
 
 method ACKNOWLEDGE_UPDATE_STATS()I {
  +START:   #1
        return bit_7@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_UPDATE_STATS
 
 method ACKNOWLEDGE_LINK_EVENT()I {
  +START:   #1
        return bit_8@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_LINK_EVENT
 
 method ACKNOWLEDGE_DOWN_COMPLETE()I {
  +START:   #1
        return bit_9@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_DOWN_COMPLETE
 
 method ACKNOWLEDGE_UP_COMPLETE()I {
  +START:   #1
        return bit_10@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_UP_COMPLETE
 
 method ACKNOWLEDGE_CMD_IN_PROGRESS()I {
  +START:   #1
        return bit_12@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_CMD_IN_PROGRESS
 
 method ACKNOWLEDGE_ALL_INTERRUPT()I {
  +START:   #1
        return 2047;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 ACKNOWLEDGE_ALL_INTERRUPT
 
 method COMMAND_SET_INTERRUPT_ENABLE()I {
  +START:   #1
        return 28672;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_SET_INTERRUPT_ENABLE
 
 method DISABLE_ALL_INTERRUPT()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 DISABLE_ALL_INTERRUPT
 
 method COMMAND_SET_INDICATION_ENABLE()I {
  +START:   #1
        return 30720;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_SET_INDICATION_ENABLE
 
 method ENABLE_ALL_INTERRUPT()I {
  +START:   #1
        return (((((((((ACKNOWLEDGE_HOST_ERROR@special() | ACKNOWLEDGE_TX_COMPLETE@special()) | ACKNOWLEDGE_RX_COMPLETE@special()) | ACKNOWLEDGE_RX_EARLY@special()) | ACKNOWLEDGE_INTERRUPT_REQUESTED@special()) | ACKNOWLEDGE_UPDATE_STATS@special()) | ACKNOWLEDGE_LINK_EVENT@special()) | ACKNOWLEDGE_DOWN_COMPLETE@special()) | ACKNOWLEDGE_UP_COMPLETE@special()) | ACKNOWLEDGE_CMD_IN_PROGRESS@special());   
  +END:   #1
 }
// Register: rd 9/9 wr 9 swaps 0 any 0 found 0 ENABLE_ALL_INTERRUPT
 
 method COMMAND_SET_RX_FILTER()I {
  +START:   #1
        return 32768;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_SET_RX_FILTER
 
 method RX_FILTER_INDIVIDUAL()I {
  +START:   #1
        return bit_0@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_FILTER_INDIVIDUAL
 
 method RX_FILTER_ALL_MULTICAST()I {
  +START:   #1
        return bit_1@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_FILTER_ALL_MULTICAST
 
 method RX_FILTER_BROADCAST()I {
  +START:   #1
        return bit_2@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_FILTER_BROADCAST
 
 method RX_FILTER_PROMISCUOUS()I {
  +START:   #1
        return bit_3@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_FILTER_PROMISCUOUS
 
 method RX_FILTER_MULTICAST_HASH()I {
  +START:   #1
        return bit_4@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 RX_FILTER_MULTICAST_HASH
 
 method COMMAND_TX_AGAIN()I {
  +START:   #1
        return 38912;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_TX_AGAIN
 
 method COMMAND_STATISTICS_ENABLE()I {
  +START:   #1
        return 43008;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_STATISTICS_ENABLE
 
 method COMMAND_STATISTICS_DISABLE()I {
  +START:   #1
        return 45056;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_STATISTICS_DISABLE
 
 method COMMAND_DISABLE_DC_CONVERTER()I {
  +START:   #1
        return 47104;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_DISABLE_DC_CONVERTER
 
 method COMMAND_SET_HASH_FILTER_BIT()I {
  +START:   #1
        return 51200;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_SET_HASH_FILTER_BIT
 
 method COMMAND_TX_FIFO_BISECT()I {
  +START:   #1
        return 55296;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 COMMAND_TX_FIFO_BISECT
 
 method <init>(Ljx/zero/Ports;Ljx/timer/TimerManager;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.ports = vR1;   
        vR0.timerManager = vR2;   
        vR0.cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 0 found 0 <init>
 
 method NicReadPortByte(Lmetaxa/os/devices/net/NicInformation;I)B {
  +START:   #1
        return vR0.ports.inb((vR1.IoBaseAddress+vi2));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 NicReadPortByte
 
 method NicReadPortShort(Lmetaxa/os/devices/net/NicInformation;I)S {
  +START:   #1
        return vR0.ports.inw((vR1.IoBaseAddress+vi2));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 NicReadPortShort
 
 method NicReadPortLong(Lmetaxa/os/devices/net/NicInformation;I)I {
  +START:   #1
        return vR0.ports.inl((vR1.IoBaseAddress+vi2));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 NicReadPortLong
 
 method NicWritePortByte(Lmetaxa/os/devices/net/NicInformation;IB)V {
  +START:   #1
        vR0.ports.outb((vR1.IoBaseAddress+vi2),vi3);   [  i iiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 NicWritePortByte
 
 method NicWritePortShort(Lmetaxa/os/devices/net/NicInformation;IS)V {
  +START:   #1
        vR0.ports.outw((vR1.IoBaseAddress+vi2),vi3);   [  i iiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 NicWritePortShort
 
 method NicWritePortLong(Lmetaxa/os/devices/net/NicInformation;II)V {
  +START:   #1
        vR0.ports.outl((vR1.IoBaseAddress+vi2),vi3);   [  i iiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 NicWritePortLong
 
 method NicCommand(Lmetaxa/os/devices/net/NicInformation;I)V {
  +START:   #1
        vR0.NicWritePortShort@this(vR1,14,(short)vi2);   [  i iiRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 NicCommand
 
 method NicCommandWait(Lmetaxa/os/devices/net/NicInformation;S)Z {
  +START:   #1
        vR0.NicWritePortShort@this(vR1,14,vi2);   [   iiRR] 
        vi3 = (vR0.timerManager.getCurrentTime()+100);    
  +B21:   #1
        vi4 = vR0.NicReadPortShort@this(vR1,14);    [i   iRR.] 
        udelay@special(10);   [ii   i...]
        if (vi4 & INTSTATUS_COMMAND_IN_PROGRESS@special())!=1 goto B58;   
  +B45:   #1
        if vi3>vR0.timerManager.getCurrentTime() goto B21;   
  +B58:   #1
        if vi3>=vR0.timerManager.getCurrentTime() goto B81;   
  +B71:   #1
        out.println("NIC_COMMAND_WAIT: timeout");   [ii  i. RR..] 
        return 0;   
  +B81:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 11/11 wr 4 swaps 1 any 3 found 3 NicCommandWait
 
 method NicMaskAllInterrupt(Lmetaxa/os/devices/net/NicInformation;)S {
  +START:   #1
        vR0.NicCommand@this(vR1,(COMMAND_SET_INTERRUPT_ENABLE@special() | DISABLE_ALL_INTERRUPT@special()));   [  i iRR] 
        return vR0.NicReadPortShort@this(vR1,14);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 1 any 0 found 0 NicMaskAllInterrupt
 
 method NicUnmaskAllInterrupt(Lmetaxa/os/devices/net/NicInformation;)S {
  +START:   #1
        vR0.NicCommand@this(vR1,(COMMAND_SET_INTERRUPT_ENABLE@special() | ENABLE_ALL_INTERRUPT@special()));   [  i iRR] 
        return vR0.NicReadPortShort@this(vR1,14);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 1 any 0 found 0 NicUnmaskAllInterrupt
 
 method NicAcknowledgeAllInterrupt(Lmetaxa/os/devices/net/NicInformation;)V {
  +START:   #1
        vR0.NicCommand@this(vR1,(COMMAND_ACKNOWLEDGE_INTERRUPT@special() | ACKNOWLEDGE_ALL_INTERRUPT@special()));   [  i iRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 NicAcknowledgeAllInterrupt
 
 method NicEnableAllInterruptIndication(Lmetaxa/os/devices/net/NicInformation;)V {
  +START:   #1
        vR0.NicCommand@this(vR1,(COMMAND_SET_INDICATION_ENABLE@special() | ENABLE_ALL_INTERRUPT@special()));   [  i iRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 NicEnableAllInterruptIndication
 
 method NicDisableAllInterruptIndication(Lmetaxa/os/devices/net/NicInformation;)V {
  +START:   #1
        vR0.NicCommand@this(vR1,(COMMAND_SET_INDICATION_ENABLE@special() | DISABLE_ALL_INTERRUPT@special()));   [  i iRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 NicDisableAllInterruptIndication
}
