class jx/bio/buffercache/BufferHashtable {
 
 method <init>(II)V {
  +START:   #1
        vR0.<init>@special();   [ RRR  R] 
        out.println("BufferHashtable create");   [ RRR i. RR] 
        if vi2<=0 goto B22;   
  +B16:   #1
        if vi2<100 goto B52;   
  -B22:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR .. i.][ RRR .. iR]
        b1.<init>@special(b2.append@extra("fill value out of range ").append@extra(toString@special(vi2)).toString@extra());   [ RRR iii. RR.] 
        throw b0;   
  +B52:   #1
        vR0.fillPercent = vi2;   
        vi3 = max@special(((vi1*100)/vR0.fillPercent),31);    [ RRR i... ii.]
        vi3 = (vi3+((vi3+1)%2));    
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RRR i... i..][ RRR i... iR.]
        b0.println(b1.append@extra("size: ").append@extra(vi3).toString@extra());   [i RRR iii. RR.] 
        vR0.entryLimit = ((vi3*vR0.fillPercent)/100);   
        vR0.hashTable = new jx/bio/buffercache/BufferHead()[vi3];   
        vR0.hashTable_length = vi3;   
        return;   
  +END:   #1
 }
// Register: rd 23/23 wr 19 swaps 6 any 4 found 1 <init>
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special(vi1,30);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special(0,30);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method size()I {
  +START:   #1
        return vR0.entryCount;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method expandTable()V {
  +START:   #1
        vi1 = ((vR0.hashTable.length*2)+1);    
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("expandTable to size=").append@extra(vi1).toString@extra());   [i RR ii. RR.] 
        vR0.entryLimit = ((vi1*vR0.fillPercent)/100);   
        vR2 = vR0.hashTable;    
        vR0.hashTable = new jx/bio/buffercache/BufferHead()[vi1];   
        vR0.hashTable_length = vi1;   
        vR3 = vR2;    
        vi4 = vR3.length;    
        vi5 = 0;    
  +B75:   #1
        if vi5>=vi4 goto B125;   
  +B82:   #1
        vR6 = vR3[vi5];    
        if vR6==null goto B119;   
  +B93:   #1
        vR0.putInTable@special(vR6);   [iRRiiR RR ... RR.] 
  +B99:   #1
        b0 = vR6.hashtable_nextInChain;    
        vR6 = b0;    
        if b0==null goto B119;   
  +B110:   #1
        vR0.putInTable@special(vR6);   [iRRiiR RR ... RR.] 
        goto +B99;   [iRRiiR RR ... ...]
  +B119:   #2
        vi5++;   
        goto +B75;   [iRRiiR RR ... ...]
  +B125:   #1
        return;   
  +END:   #1
 }
// Register: rd 24/24 wr 15 swaps 2 any 6 found 0 expandTable
 
 method putInTable(Ljx/bio/buffercache/BufferHead;)V {
  +START:   #1
        vi2 = (vR1.hashtable_hashkey%vR0.hashTable_length);    
        if vR0.hashTable[vi2]==null goto B54;   
  +B19:   #1
        vR3 = vR0.hashTable[vi2];    
  +B26:   #1
        if vR3.hashtable_nextInChain==null goto B41;   
  +B33:   #1
        vR3 = vR3.hashtable_nextInChain;    
        goto +B26;   [iR   ]
  +B41:   #1
        vR3.hashtable_nextInChain = vR1;   
        vR1.hashtable_nextInChain = 0;   
        goto +B61;   forward return[iR   ]
  +B54:   #1
        vR0.hashTable[vi2] = vR1;   
  +B61:   #1
        return;   
  +END:   #1
 }
// Register: rd 14/14 wr 3 swaps 0 any 1 found 0 putInTable
 
 method put(Ljx/bio/buffercache/BufferHead;)V {
  +START:   #1
        b1 = (vR0.entryCount+1);    
        b0 = b1;    
        vR0.entryCount = b1;   
        if b0<=vR0.entryLimit goto B22;   
  +B18:   #1
        vR0.expandTable@this();   [ ii  R] 
  +B22:   #1
        vR0.putInTable@special(vR1);   [ ii  RR] 
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 0 any 2 found 0 put
 
 method get(I)Ljx/bio/buffercache/BufferHead; {
  +START:   #1
        vi2 = (vi1%vR0.hashTable_length);    
        vR3 = vR0.hashTable[vi2];    
  +B14:   #1
        if vR3==null goto B36;   
  +B18:   #1
        if vi1!=vR3.hashtable_hashkey goto B28;   
  +B26:   #1
        return vR3;   
  +B28:   #1
        vR3 = vR3.hashtable_nextInChain;    
        goto +B14;   [iR   ]
  +B36:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 0 any 2 found 0 get
 
 method remove(Ljx/bio/buffercache/BufferHead;)V {
  +START:   #1
        vi2 = (vR1.hashtable_hashkey%vR0.hashTable_length);    
        vR3 = vR0.hashTable[vi2];    
        if vR3!=null goto B31;   
  -B21:   #1
        throw new java/lang/Error("not found");   
  +B31:   #1
        if vR1.hashtable_hashkey!=vR3.hashtable_hashkey goto B63;   
  +B42:   #1
        vR0.hashTable[vi2] = vR3.hashtable_nextInChain;   
        vR0.entryCount = (vR0.entryCount-1);   
        return;   
  +B63:   #2
        if vR3.hashtable_nextInChain==null goto B92;   
  +B70:   #1
        if vR1.hashtable_hashkey==vR3.hashtable_nextInChain.hashtable_hashkey goto B92;   
  +B84:   #1
        vR3 = vR3.hashtable_nextInChain;    
        goto +B63;   [iR R . ...]
  +B92:   #2
        if vR3.hashtable_nextInChain!=null goto B109;   
  -B99:   #1
        throw new java/lang/Error("not found");   
  +B109:   #1
        vR3.hashtable_nextInChain = vR3.hashtable_nextInChain.hashtable_nextInChain;   
        vR0.entryCount = (vR0.entryCount-1);   
        return;   
  +END:   #1
 }
// Register: rd 23/23 wr 5 swaps 0 any 1 found 0 remove
 
 method printStatistics()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("Hashtable statistics: table Length=").append@extra(vR0.hashTable.length).toString@extra());   [ RR iii. RR.] 
        vi1 = 0;    
        vi2 = 0;    
        vi3 = 0;    
        vi4 = 0;    
        vi5 = 0;    
  +B41:   #1
        if vi5>=vR0.hashTable.length goto B183;   
  +B51:   #1
        if vR0.hashTable[vi5]==null goto B174;   
  +B61:   #1
        vi6 = 1;    
        vR7 = vR0.hashTable[vi5];    
  +B73:   #1
        if vR7.hashtable_nextInChain==null goto B94;   
  +B81:   #1
        vR7 = vR7.hashtable_nextInChain;    
        vi6++;   
        goto +B73;   [iiiiiiR RR .... ...]
  +B94:   #1
        vi2 = (vi2+vi6);    
        vi3 = (vi3+(vi6-1));    
        if vi6<=vi4 goto B117;   
  +B113:   #1
        vi4 = vi6;    
  +B117:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .... i..][ RR .... iR.]
        b0.println(b1.append@extra("  ").append@extra(vR0.alignString@special(toString@special(vi5),11)).append@extra(vR0.alignString@special(toString@special(vi6),11)).append@extra("   ").toString@extra());   [iiiiiiR RR ii.ii.iii. RR...] 
        goto +B177;   [iiiiiiR RR ii.ii.iii. .....]
  +B174:   #1
        vi1++;   
  +B177:   #1
        vi5++;   
        goto +B41;   [iiiiiiR RR .......... .....]
  +B183:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .......... i....][ RR .......... iR...]
        b0.println(b1.append@extra("  total slots=").append@extra(vi2).toString@extra());   [iiiiiiR RR ii........ RR...] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ii........ i....][ RR ii........ iR...]
        b0.println(b1.append@extra("  unused slots: ").append@extra(vi1).toString@extra());   [iiiiiiR RR iiii...... RR...] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiii...... i....][ RR iiii...... iR...]
        b0.println(b1.append@extra("  collisions: ").append@extra(vi3).toString@extra());   [iiiiiiR RR iiiiii.... RR...] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiii.... i....][ RR iiiiii.... iR...]
        b0.println(b1.append@extra("  longest chain: ").append@extra(vi4).toString@extra());   [iiiiiiR RR iiiiiiii.. RR...] 
        return;   
  +END:   #1
 }
// Register: rd 33/33 wr 57 swaps 18 any 8 found 0 printStatistics
 
 method iterator()Ljx/collections/Iterator; {
  +START:   #1
        return new jx/bio/buffercache/BufferHashtable$1(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 iterator
 
 method alignString(Ljava/lang/String;I)Ljava/lang/String; {
  +START:   #1
        vR3 = new java/lang/String();    [ R  i][ R  iR]
        vi4 = (vi2-vR1.length@extra());    
        vi5 = 0;    
  +B19:   #1
        if vi5>=vi4 goto B52;   
  +B26:   #1
        b0 = new java/lang/StringBuilder();    [ R  i.][ R  iR]
        vR3 = b0.append@extra(vR3).append@extra(" ").toString@extra();    [Rii R i.. R..] [Rii R iR. RR.] [Rii R iRR RRR] 
        vi5++;   
        goto +B19;   [Rii R i.. ...]
  +B52:   #1
        b0 = new java/lang/StringBuilder();    [ R ... i..][ R ... iR.]
        return b0.append@extra(vR3).append@extra(vR1).toString@extra();   
  +END:   #1
 }
// Register: rd 8/8 wr 12 swaps 1 any 3 found 1 alignString
}
