class java/util/Hashtable {
 
 method rehash()V {
  +START:   #2
        if compare((float)(vR0.size*100),((float)vR0.capacity*vR0.load))<=0 goto B35;   
  +B22:   #1
        vR0.capacity = (vR0.capacity << 1);   
        goto +START;   [   .]
  +B35:   #1
        vR0.mask = (vR0.capacity-1);   
        vR1 = vR0.keys;    
        vR2 = vR0.values;    
        vR0.keys = new java/lang/Object()[vR0.capacity];   
        vR0.values = new java/lang/Object()[vR0.capacity];   
        vR0.size = 0;   
        vi3 = 0;    
  +B84:   #1
        if vi3>=vR1.length goto B113;   
  +B90:   #1
        if vR1[vi3]==null goto B107;   
  +B96:   #1
        vR0.put@this(vR1[vi3],vR2[vi3]);   [RRi  iR RRR] 
  +B107:   #1
        vi3++;   
        goto +B84;   [RRi  .. ...]
  +B113:   #1
        return;   
  +END:   #1
 }
// Register: rd 21/21 wr 6 swaps 1 any 2 found 0 rehash
 
 method toString()Ljava/lang/String; {
  +START:   #1
        vR1 = new java/lang/StringBuffer("{");    [ R  i][ R . iRR]
        vi2 = 1;    
        vi3 = 0;    
  +B14:   #1
        if vi3>=vR0.keys.length goto B89;   
  +B23:   #1
        if vR0.keys[vi3]==null goto B83;   
  +B32:   #1
        if vi2==0 goto B41;   
  +B36:   #1
        vi2 = 0;    
        goto +B48;   [Rii R . ...]
  +B41:   #1
        vR1.append(", ");   [Rii R i RR.] 
  +B48:   #1
        vR1.append(valueOf@special(vR0.keys[vi3]));   [Rii R Ri RR.] 
        vR1.append("=");   [Rii R Rii RR.] 
        vR1.append(valueOf@special(vR0.values[vi3]));   [Rii R RiiRi RR.] 
  +B83:   #1
        vi3++;   
        goto +B14;   [Rii R ..... ...]
  +B89:   #1
        vR1.append("}");   [Rii R i.... RR.] 
        return vR1.toString();   
  +END:   #1
 }
// Register: rd 17/17 wr 12 swaps 5 any 3 found 0 toString
 
 method clear()V {
  +START:   #1
        vi1 = 0;    
  +B2:   #1
        if vi1>=vR0.keys.length goto B31;   
  +B11:   #1
        b0 = vR0.keys;    
        b2 = vR0.values;    
        b2[vi1] = 0;   
        b0[vi1] = 0;   
        vi1++;   
        goto +B2;   [i R?R  ]
  +B31:   #1
        vR0.size = 0;   
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 4 swaps 0 any 2 found 0 clear
 
 method get(Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        if vR1!=null goto B12;   
  -B4:   #1
        throw new java/lang/NullPointerException();   
  +B12:   #1
        vi2 = (vR1.hashCode() & vR0.mask);    
        vi3 = 0;    
  +B24:   #1
        if vi3>=vR0.capacity goto B202;   
  +B32:   #1
        vi4 = ((vi2+vi3) & vR0.mask);    
        if vR0.keys[vi4]==null goto B74;   
  +B52:   #1
        if vR0.keys[vi4].equals(vR1)==0 goto B196;   
  +B66:   #1
        return vR0.values[vi4];   
  +B74:   #1
        vi5 = vi4;    
        vi6 = (vi5-vi3);    
        vi7 = (vi3+1);    
  +B89:   #1
        if vi7>=vR0.capacity goto B194;   
  +B98:   #1
        vi4 = ((vi2+vi7) & vR0.mask);    
        if vR0.keys[vi4]==null goto B188;   
  +B119:   #1
        if vR0.keys[vi4].equals(vR1)!=0 goto B136;   
  +B133:   #1
        goto +B188;   [iiiiii R  ..]
  +B136:   #1
        vR0.keys[vi5] = vR0.keys[vi4];   
        vR0.values[vi5] = vR0.values[vi4];   
        vR0.keys[vi4] = 0;   
        vR0.values[vi4] = 0;   
        return vR0.values[vi5];   
  +B188:   #2
        vi7++;   
        goto +B89;   [iiiiii R  ..]
  +B194:   #1
        return 0;   
  +B196:   #1
        vi3++;   
        goto +B24;   [iii R  ..]
  +B202:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 43/43 wr 9 swaps 0 any 10 found 0 get
 
 method put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        if compare((float)(vR0.size*100),((float)vR0.capacity*vR0.load))<=0 goto B26;   
  +B22:   #1
        vR0.rehash@this();   [ R  R] 
  +B26:   #1
        if vR1==null goto B34;   
  +B30:   #1
        if vR2!=null goto B42;   
  -B34:   #1
        throw new java/lang/NullPointerException();   
  +B42:   #1
        vi3 = (vR1.hashCode() & vR0.mask);    
        vi4 = 0;    
  +B55:   #1
        if vi4>=vR0.capacity goto B255;   
  +B64:   #1
        vi5 = ((vi3+vi4) & vR0.mask);    
        if vR0.keys[vi5]==null goto B127;   
  +B85:   #1
        if vR0.keys[vi5].equals(vR1)==0 goto B249;   
  +B99:   #1
        vR6 = vR0.values[vi5];    
        vR0.keys[vi5] = vR1;   
        vR0.values[vi5] = vR2;   
        return vR6;   
  +B127:   #1
        vR0.keys[vi5] = vR1;   
        vR0.values[vi5] = vR2;   
        vR0.size = (vR0.size+1);   
        vi4++;   
  +B156:   #1
        if vi4>=vR0.capacity goto B247;   
  +B165:   #1
        vi5 = ((vi3+vi4) & vR0.mask);    
        if vR0.keys[vi5]==null goto B241;   
  +B186:   #1
        if vR0.keys[vi5].equals(vR1)!=0 goto B203;   
  +B200:   #1
        goto +B241;   [iiiR R  ..]
  +B203:   #1
        vR6 = vR0.values[vi5];    
        vR0.keys[vi5] = 0;   
        vR0.values[vi5] = 0;   
        vR0.size = (vR0.size-1);   
        return vR6;   
  +B241:   #2
        vi4++;   
        goto +B156;   [iiiR R  ..]
  +B247:   #1
        return 0;   
  +B249:   #1
        vi4++;   
        goto +B55;   [iiiR R  ..]
  +B255:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 52/52 wr 9 swaps 0 any 13 found 0 put
 
 method remove(Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        vi2 = (vR1.hashCode() & vR0.mask);    
        vi3 = 0;    
  +B12:   #1
        if vi3>=vR0.capacity goto B101;   
  +B20:   #1
        vi4 = ((vi2+vi3) & vR0.mask);    
        if vR0.keys[vi4]==null goto B95;   
  +B40:   #1
        if vR0.keys[vi4].equals(vR1)!=0 goto B57;   
  +B54:   #1
        goto +B95;   [iii   ..]
  +B57:   #1
        vR5 = vR0.values[vi4];    
        vR0.keys[vi4] = 0;   
        vR0.values[vi4] = 0;   
        vR0.size = (vR0.size-1);   
        return vR5;   
  +B95:   #2
        vi3++;   
        goto +B12;   [iii   ..]
  +B101:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 21/21 wr 5 swaps 0 any 3 found 0 remove
 
 method keys()Ljava/util/Enumeration; {
  +START:   #1
        return new java/util/HashtableEnumeration(vR0.keys);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 keys
 
 method elements()Ljava/util/Enumeration; {
  +START:   #1
        return new java/util/HashtableEnumeration(vR0.values);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 elements
 
 method size()I {
  +START:   #1
        return vR0.size;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method isEmpty()Z {
  +START:   #1
        if vR0.size!=0 goto B11;   
  +B7:   #1
        b0 = 1;    
        goto +B12b0;   forward return[ i  ]
  +B11:   #1
        b0 = 0;    
  +B12b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isEmpty
 
 method containsKey(Ljava/lang/Object;)Z {
  +START:   #1
        vi2 = (vR1.hashCode() & vR0.mask);    
        if vR1!=null goto B16;   
  +B14:   #1
        return 0;   
  +B16:   #1
        vi3 = 0;    
  +B18:   #1
        if vi3>=vR0.capacity goto B68;   
  +B26:   #1
        vi4 = ((vi2+vi3) & vR0.mask);    
        if vR0.keys[vi4]==null goto B62;   
  +B46:   #1
        if vR0.keys[vi4].equals(vR1)==0 goto B62;   
  +B60:   #1
        return 1;   
  +B62:   #2
        vi3++;   
        goto +B18;   [iii   ..]
  +B68:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 13/13 wr 4 swaps 0 any 4 found 0 containsKey
 
 method contains(Ljava/lang/Object;)Z {
  +START:   #1
        if vR1!=null goto B6;   
  +B4:   #1
        return 0;   
  +B6:   #1
        vi2 = 0;    
  +B8:   #1
        if vi2>=vR0.capacity goto B46;   
  +B16:   #1
        if vR0.values[vi2]==null goto B40;   
  +B25:   #1
        if vR0.values[vi2].equals(vR1)==0 goto B40;   
  +B38:   #1
        return 1;   
  +B40:   #2
        vi2++;   
        goto +B8;   [i   ..]
  +B46:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 0 any 3 found 0 contains
 
 method <init>(IF)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.load = vl2;   
        vR0.size = 0;   
        vR0.capacity = 1;   
  +B19:   #1
        if vR0.capacity>vi1 goto B40;   
  +B27:   #1
        vR0.capacity = (vR0.capacity << 1);   
        goto +B19;   [   .]
  +B40:   #1
        vR0.keys = new java/lang/Object()[vR0.capacity];   
        vR0.values = new java/lang/Object()[vR0.capacity];   
        vR0.mask = (vR0.capacity-1);   
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special(vi1,jx.classfile.datatypes.BCFloat@42b3b079);   [   ?iR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special(32);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
}
