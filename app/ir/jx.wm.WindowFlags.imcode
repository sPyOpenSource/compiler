class jx/wm/WindowFlags {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.m_nValue = 0;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.m_nValue = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/wm/WindowFlags;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.m_nValue = vR1.m_nValue;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method getValue()I {
  +START:   #1
        return vR0.m_nValue;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getValue
 
 method setValue(I)V {
  +START:   #1
        vR0.m_nValue = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setValue
 
 method isZoomable()Z {
  +START:   #1
        if (vR0.m_nValue & 4)!=0 goto B13;   
  +B9:   #1
        b0 = 1;    
        goto +B14b0;   forward return[ i  ]
  +B13:   #1
        b0 = 0;    
  +B14b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isZoomable
 
 method isMovable()Z {
  +START:   #1
        if (vR0.m_nValue & 2)!=0 goto B13;   
  +B9:   #1
        b0 = 1;    
        goto +B14b0;   forward return[ i  ]
  +B13:   #1
        b0 = 0;    
  +B14b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isMovable
 
 method isClosable()Z {
  +START:   #1
        if (vR0.m_nValue & 8)!=0 goto B14;   
  +B10:   #1
        b0 = 1;    
        goto +B15b0;   forward return[ i  ]
  +B14:   #1
        b0 = 0;    
  +B15b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isClosable
 
 method hasBorder()Z {
  +START:   #1
        if (vR0.m_nValue & 1)!=0 goto B13;   
  +B9:   #1
        b0 = 1;    
        goto +B14b0;   forward return[ i  ]
  +B13:   #1
        b0 = 0;    
  +B14b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 hasBorder
}
