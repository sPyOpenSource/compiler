class org/jnode/driver/bus/scsi/SCSIBuffer {
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR2 = (jx/zero/MemoryManager)(getInitialNaming@special().lookup("MemoryManager"));    
        vR0.buffer = vR2.alloc(vi1);   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 4 swaps 1 any 0 found 0 <init>
 
 method <init>(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.buffer = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method setInt8(II)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setInt8
 
 method getUInt8(I)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getUInt8
 
 method setInt16(II)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setInt16
 
 method getUInt16(I)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getUInt16
 
 method setInt32(II)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setInt32
 
 method getInt32(I)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getInt32
 
 method getASCII(II)Ljava/lang/String; {
  +START:   #1
        return "";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getASCII
 
 method toByteArray()Ljx/zero/Memory; {
  +START:   #1
        return vR0.buffer;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 toByteArray
 
 method hex2(I)Ljava/lang/String; {
  +START:   #1
        return hex@special(vi0,2);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hex2
 
 method hex4(I)Ljava/lang/String; {
  +START:   #1
        return hex@special(vi0,4);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hex4
 
 method hex8(I)Ljava/lang/String; {
  +START:   #1
        return hex@special(vi0,8);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hex8
}
