class jx/scheduler/HLRRobin_all {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?RiR  R] 
        b1 = new jx/scheduler/ThreadList();    [ ?RiR  i][ ?RiR  iR]
        vR0.runnables = b1;   
        b1 = new jx/scheduler/ThreadList();    [ ?RiR  i.][ ?RiR  iR]
        vR0.blocked = b1;   
        vR0.MyCPU = 0;   
        vR0.anzSchedInterrupted = 0;   
        vR0.anzSchedPreempted = 0;   
        vR0.yielded = 0;   
        vR0.uninterruptable = 0;   
        vR0.unINTthread = 0;   
        vR0.DomainName = "";   
        vR0.debug = 0;   
        vR0.domainZero = getInitialNaming@special();   
        vR0.cpuManager = (jx/zero/CPUManager)(vR0.domainZero.lookup("CPUManager"));   
        vR0.SMPcpuManager = (jx/zero/SMPCPUManager)(vR0.domainZero.lookup("SMPCPUManager"));   
        vR0.HLschedulerSupport = (jx/zero/HLSchedulerSupport)(vR0.domainZero.lookup("HLSchedulerSupport"));   
        vR1 = (jx/zero/debug/DebugChannel)(vR0.domainZero.lookup("DebugChannel0"));    
        b1 = new jx/zero/debug/DebugPrintStream;    
        b2 = b1;    
        b3 = new jx/zero/debug/DebugOutputStream(vR1);    [ ?RRR iiii. i.][ ?RRR iiii. iRR]
        b2.<init>@special(b3);   [R ?RRR iiii. RR.] 
        vR0.out = b1;   
        out = vR0.out;   
        b1 = new java/lang/StringBuilder();    [ ?RRR iiii. i..][ ?RRR iiii. iR.]
        b1 = b1.append@extra("Inst:");    [R ?RRR iiiii RR.] 
        b2 = instNr;    
        instNr = (b2+1);   
        vR0.DomainName = b1.append@extra(b2).toString@extra();   
        return;   
  +END:   #1
 }
// Register: rd 40/40 wr 22 swaps 5 any 1 found 0 <init>
 
 method registered()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("HLRRobin registered called on CPU").append@extra(vR0.SMPcpuManager.getMyCPU()).toString@extra());   [ RR iii. RR.] 
        vR0.MyCPU = vR0.SMPcpuManager.getMyCPU();   
        vi1 = vR0.HLschedulerSupport.getTimeBaseInMicros();    [ RR iii. R..] 
        vi2 = vR0.HLschedulerSupport.getDomainTimeslice();    [i RR iii. R..] 
        vR0.HLschedulerSupport.setMyTimeslice((vi2/2));   [ii RR iiii iR.] 
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 10 swaps 4 any 0 found 0 registered
 
 method Scheduler_interrupted()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 Scheduler_interrupted
 
 method Scheduler_preempted()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 Scheduler_preempted
 
 method interrupted(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.preempted@this(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 interrupted
 
 method preempted(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.uninterruptable==0 goto B15;   
  +B7:   #1
        vR0.unINTthread = vR1;   
        goto +B24;   forward return[   ]
  +B15:   #1
        vR0.runnables.add(vR1);   [   RR] 
  +B24:   #1
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 preempted
 
 method yielded(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.yielded = 1;   
        vR0.runnables.add(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 yielded
 
 method unblocked(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::unblocked called").toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        if vR0.blocked.remove(vR1)!=0 goto B74;   
  +B46:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .... i..][ RR .... iR.]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": unblocked: Thread XXX not blocked ").toString@extra());   [ RR iii. RR.] 
  +B74:   #1
        vR0.runnables.add(vR1);   [ RR .... RR.] 
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 14 swaps 6 any 0 found 0 unblocked
 
 method created(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.runnables.add(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 created
 
 method switchedTo(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::switchedTo called").toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        if vR0.blocked.remove(vR1)!=0 goto B74;   
  +B46:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .... i..][ RR .... iR.]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": switchedTo: Thread XXX not blocked ").toString@extra());   [ RR iii. RR.] 
  -B74:   #1
        vR0.HLschedulerSupport.activateThread(vR1);   [ RR .... RR.] 
        throw new java/lang/Error("should never return!");   
  +END:   #1
 }
// Register: rd 10/10 wr 15 swaps 6 any 0 found 0 switchedTo
 
 method blockedInPortalCall(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::blockedInPortalCall").toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        vR0.blocked.add(vR1);   [ RR .... RR.] 
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 7 swaps 3 any 0 found 0 blockedInPortalCall
 
 method portalCalled(Ljx/zero/CPUState;)Z {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::portalCalled called").toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        vR0.blocked.add(vR1);   [ RR .... RR.] 
        return 1;   
  +END:   #1
 }
// Register: rd 5/5 wr 7 swaps 3 any 0 found 0 portalCalled
 
 method blocked(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::blocked called").toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        vR0.blocked.add(vR1);   [ RR .... RR.] 
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 7 swaps 3 any 0 found 0 blocked
 
 method destroyed(Ljx/zero/CPUState;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 destroyed
 
 method startGCThread(Ljx/zero/CPUState;Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.runnables.add(vR1);   [   RR] 
        vR0.uninterruptable = 1;   
        vR0.HLschedulerSupport.activateThread(vR2);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 startGCThread
 
 method unblockedGCThread(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.uninterruptable==0 goto B17;   
  -B7:   #1
        throw new java/lang/Error("should not happen!");   
  +B17:   #1
        vR0.unINTthread = vR1;   
        vR0.uninterruptable = 1;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 0 any 0 found 0 unblockedGCThread
 
 method destroyedGCThread(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.uninterruptable = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 destroyedGCThread
 
 method activated()V {
  +START:   #1
        vR1 = 0;    
        if vR0.uninterruptable==0 goto B22;   
  +B9:   #1
        vR0.HLschedulerSupport.activateThread(vR0.unINTthread);   [R R i RR] 
  +B22:   #1
        if vR0.yielded!=1 goto B65;   
  +B30:   #1
        if vR0.runnables.size()!=1 goto B65;   
  -B41:   #1
        vR0.yielded = 0;   
        vR0.HLschedulerSupport.yield();   [R R . R.] 
        throw new java/lang/Error("should never return! (B)");   
  +B65:   #2
        vR0.yielded = 0;   
        vR1 = (jx/zero/CPUState)(vR0.runnables.removeFirst());    
        if vR1!=null goto B113;   
  -B85:   #1
        vR0.HLschedulerSupport.clearMyRunnableFlag();   [R R . R..] 
        vR0.HLschedulerSupport.yield();   [R R . R..] 
        throw new java/lang/Error("should never return! (A)");   
  -B113:   #1
        vR0.HLschedulerSupport.activateThread(vR1);   [R R . RR.] 
        throw new java/lang/Error("should never return! (C)");   
  +END:   #1
 }
// Register: rd 17/17 wr 7 swaps 1 any 1 found 0 activated
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return "this is a HLRRobin_all Object";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 toString
 
 method dump()V {
  +START:   #1
        if vR0.runnables.getFirst()!=null goto B29;   
  +B10:   #1
        if vR0.blocked.getFirst()!=null goto B29;   
  +B20:   #1
        out.println("       no runnable or blocked Threads");   [  i. RR] 
        return;   
  +B29:   #2
        out.println("  runnable Threads:");   [  i. RR] 
        vR0.runnables.dump();   [  i. R.] 
        out.println("  blocked Threads:");   [  ii. RR] 
        vR0.blocked.dump();   [  ii. R.] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 6 swaps 3 any 0 found 0 dump
 
 method <clinit>()V {
  +START:   #1
        instNr = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 <clinit>
}
