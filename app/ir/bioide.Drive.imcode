class bioide/Drive {
 
 method <init>(Lbioide/IDEDeviceImpl;Lbioide/Controller;I)V {
  +START:   #1
        vR0.<init>@special();   [ RR  R] 
        vR0.select_unit = 4;   
        vR0.select_lba = 6;   
        vR0.controller = vR2;   
        vR0.idedevice = vR1;   
        b1 = new bioide/DriveIdData();    [ RR  i][ RR  iR]
        vR0.id_data = b1;   
        vR0.select = (byte)(-96 | (vi3 << 4));   
        vR0.ctl = 8;   
        vR0.present = 0;   
        vR0.name = "hd";   
        if vR2.index!=0 goto B133;   
  +B71:   #1
        if vi3!=0 goto B104;   
  +B75:   #1
        b0 = new java/lang/StringBuilder();    [ RR  i.][ RR  iR]
        vR0.name = b0.append@extra(vR0.name).append@extra("a").toString@extra();   
        goto +B192;   forward return[ RR ii.. ...]
  +B104:   #1
        b0 = new java/lang/StringBuilder();    [ RR .... i..][ RR .... iR.]
        vR0.name = b0.append@extra(vR0.name).append@extra("b").toString@extra();   
        goto +B192;   forward return[ RR ii.. ...]
  +B133:   #1
        if vi3!=0 goto B166;   
  +B137:   #1
        b0 = new java/lang/StringBuilder();    [ RR .... i..][ RR .... iR.]
        vR0.name = b0.append@extra(vR0.name).append@extra("c").toString@extra();   
        goto +B192;   forward return[ RR ii.. ...]
  +B166:   #1
        b0 = new java/lang/StringBuilder();    [ RR .... i..][ RR .... iR.]
        vR0.name = b0.append@extra(vR0.name).append@extra("d").toString@extra();   
  +B192:   #3
        return;   
  +END:   #1
 }
// Register: rd 29/29 wr 21 swaps 8 any 2 found 0 <init>
 
 method lba()Z {
  +START:   #1
        if (vR0.select & 64)<=0 goto B14;   
  +B10:   #1
        b0 = 1;    
        goto +B15b0;   forward return[ i  ]
  +B14:   #1
        b0 = 0;    
  +B15b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 lba
 
 method setLba(Z)V {
  +START:   #1
        if vi1==0 goto B19;   
  +B4:   #1
        vR0.select = (byte)(vR0.select | 64);   
        goto +B31;   forward return[   ]
  +B19:   #1
        vR0.select = (byte)(vR0.select & -65);   
  +B31:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 1 found 0 setLba
 
 method unit()I {
  +START:   #1
        if (vR0.select & 16)<=0 goto B12;   
  +B10:   #1
        return 1;   
  +B12:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 unit
 
 method setup()V {
  +START:   #1
        vR0.capacity = ((vR0.cyl*vR0.head)*vR0.sect);   
        vR0.setLba@this(0);   [ R  iR] 
        if vR0.id_data==null goto B101;   
  +B30:   #1
        if (vR0.id_data.capability() & 2)<=0 goto B101;   
  +B42:   #1
        if vR0.lbaCapacityIsOk@special()==0 goto B101;   
  +B49:   #1
        if vR0.id_data.lba_capacity()<vR0.capacity goto B101;   
  +B63:   #1
        vR0.cyl = (short)(vR0.id_data.lba_capacity()/(vR0.head*vR0.sect));   
        vR0.capacity = vR0.id_data.lba_capacity();   
        vR0.setLba@this(1);   [ R . iR] 
  +B101:   #4
        if vR0.head==0 goto B117;   
  +B108:   #1
        if vR0.head<=16 goto B130;   
  +B117:   #1
        if vR0.lba@this()!=0 goto B130;   
  +B124:   #1
        vR0.present = 0;   
        return;   
  +B130:   #2
        if vR0.lba@this()==0 goto B145;   
  +B137:   #1
        out.print("LBA, ");   [ R i. RR] 
  +B145:   #1
        vR1 = new bioide/RecalibrateOperation(vR0.controller,vR0);    [ R .. i.][ R .. iRRR]
        vR1.startOperation();   [R R .. R...] 
        if vR0.id_data==null goto B231;   
  +B169:   #1
        if (vR0.id_data.capability() & 1)<=0 goto B231;   
  +B181:   #1
        if dmaSupported==0 goto B231;   
  +B187:   #1
        vR1 = new bioide/EnableDMAOperation(vR0.controller,vR0,ultraDmaSupported);    [ R .. i...][ R .. ibRRR]
        vR1.startOperation();   [R R .. R....] 
  +B207:   #1
        goto +B248;   forward return[R R .. .....]
  +H210<caught exception>:   #1 reference
        vR2 = <caught exception>;    
        vR1 = new bioide/EnablePIOOperation(vR0.controller,vR0);    [ R .. i....][ R .. iRRR.]
        vR1.startOperation();   [RR R .. R....] 
        goto +B248;   forward return[RR R .. .....]
  +B231:   #3
        vR1 = new bioide/EnablePIOOperation(vR0.controller,vR0);    [ R .. i....][ R .. iRRR.]
        vR1.startOperation();   [R R .. R....] 
  +B248:   #2
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
187 - 207 handler 210 type 143
 }
// Register: rd 41/41 wr 12 swaps 1 any 0 found 0 setup
 
 method getPartitions()[Lbioide/PartitionEntry; {
  +START:   #1
        if vR0.entries!=null goto B26;   
  +B7:   #1
        b1 = new bioide/PartitionTable(vR0);    [ ?R  i][ ?R . iRR]
        vR0.entries = b1;   
        vR0.entries.dump();   [ ?R . R..] 
  +B26:   #1
        return vR0.entries.getPartitions();   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 getPartitions
 
 method lbaCapacityIsOk()Z {
  +START:   #1
        vi1 = vR0.id_data.lba_capacity();    [   R] 
        vi2 = ((vR0.id_data.cyls()*vR0.id_data.heads())*vR0.id_data.sectors());    
        vi3 = (vi2/10);    
        if vR0.id_data.lba_capacity()<16514064 goto B101;   
  +B49:   #1
        if vR0.id_data.cyls()!=16383 goto B101;   
  +B62:   #1
        if vR0.id_data.heads()!=16 goto B101;   
  +B74:   #1
        if vR0.id_data.sectors()!=63 goto B101;   
  +B86:   #1
        vR0.id_data.cyls((short)(vi1/1008));   [iii  i iR] 
        return 1;   
  +B101:   #4
        if (vi1-vi2)>=vi3 goto B110;   
  +B108:   #1
        return 1;   
  +B110:   #1
        vi1 = ((vi1 << 16) | (vi1 >> 16));    
        if (vi1-vi2)>=vi3 goto B137;   
  +B127:   #1
        vR0.id_data.lba_capacity(vi1);   [iii  . iR] 
        return 1;   
  +B137:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 22/22 wr 7 swaps 1 any 3 found 0 lbaCapacityIsOk
 
 method identify()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RRs  i][ RRs  iR]
        b0.println(b1.append@extra("DRIVE IDENTIFY: ").append@extra(vR0.name).toString@extra());   [ RRs iii. RR.] 
        vR1 = new bioide/IdentifyOperation(vR0.id_data,vR0.controller,vR0);    [ RRs iii. i..][ RRs iii. iRRRR]
        vR1.startOperation();   [R RRs iii. R....] 
        if vR0.present!=0 goto B109;   
  +B56:   #1
        vR0.present = 1;   
        b2 = vR0.id_data.cyls();    [R RRs .... R....] 
        b1 = b2;    
        vR0.bios_cyl = b2;   
        vR0.cyl = b1;   
        b2 = vR0.id_data.heads();    [R Rss .... R....] 
        b1 = b2;    
        vR0.bios_head = b2;   
        vR0.head = b1;   
        b2 = vR0.id_data.sectors();    [R Rss .... R....] 
        b1 = b2;    
        vR0.bios_sect = b2;   
        vR0.sect = b1;   
  +B109:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RRs .... i....][ RRs .... iR...]
        b0.println(b1.append@extra("DRIVE IDENTIFIED: ").append@extra(vR0.name).append@extra("; cyl=").append@extra(vR0.cyl).append@extra(", head=").append@extra(vR0.head).append@extra(", sect=").append@extra(vR0.sect).toString@extra());   [R RRs iiiiiii..ii..... RR.......] 
        if (vR0.id_data.field_valid() & 1)<=0 goto B260;   
  +B185:   #1
        if vR0.id_data.cur_cyls()<=0 goto B260;   
  +B195:   #1
        if vR0.id_data.cur_heads()<=0 goto B260;   
  +B205:   #1
        if vR0.id_data.cur_heads()>16 goto B260;   
  +B217:   #1
        if vR0.id_data.cur_sectors()<=0 goto B260;   
  +B227:   #1
        vR0.cyl = vR0.id_data.cur_cyls();   
        vR0.head = vR0.id_data.cur_heads();   
        vR0.sect = vR0.id_data.cur_sectors();   
  +B260:   #5
        if vR0.head==0 goto B276;   
  +B267:   #1
        if vR0.head<=16 goto B331;   
  +B276:   #1
        if vR0.id_data.heads()<=0 goto B331;   
  +B286:   #1
        if vR0.id_data.heads()>16 goto B331;   
  +B298:   #1
        vR0.cyl = vR0.id_data.cyls();   
        vR0.head = vR0.id_data.heads();   
        vR0.sect = vR0.id_data.sectors();   
  +B331:   #3
        if vR0.sect!=vR0.bios_sect goto B372;   
  +B342:   #1
        if vR0.head!=vR0.bios_head goto B372;   
  +B353:   #1
        if vR0.cyl<=vR0.bios_cyl goto B372;   
  +B364:   #1
        vR0.bios_cyl = vR0.cyl;   
  +B372:   #3
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RRs ................ i........][ RRs ................ iR.......]
        b0.println(b1.append@extra("DRIVE OK: ").append@extra(vR0.name).append@extra("; cyl=").append@extra(vR0.cyl).append@extra(", head=").append@extra(vR0.head).append@extra(", sect=").append@extra(vR0.sect).toString@extra());   [R RRs iiiiiii..ii..... RR.......] 
        b1 = new bioide/PartitionTable(vR0);    [ RRs iiiiiii..ii..... i........][ RRs iiiiiii..ii..... iRR......]
        vR0.entries = b1;   
        return;   
  +END:   #1
 }
// Register: rd 73/73 wr 55 swaps 27 any 3 found 0 identify
 
 method readSectors(IILjx/zero/Memory;Z)V {
  +START:   #1
        out.println("readSectors - start");   [ R i. RR] 
        if vR0.using_dma==0 goto B53;   
  +B15:   #1
        if vR0.controller.buildDMATable(vR3,(512*vi2))==0 goto B53;   
  +B31:   #1
        vR5 = new bioide/DMAOperation(vR3,vi2,vR0.controller,vR0,vi1,1,1);    [ R .. i..][ R .. iiiiRRiRR]
        goto +B71;   [R R .. .........]
  +B53:   #2
        vR5 = new bioide/ReadOperation(vR3,vi2,vR0.controller,vR0,vi1,1);    [ R .. i........][ R .. iiiRRiRR.]
  +B71:   #1
        vR0.controller.queueOperation(vR5,0);   [R R .. iRR......] 
        if vi4==0 goto B91;   
  +B86:   #1
        vR5.waitForCompletion();   [R R .. R........] 
  +B91:   #1
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 7 swaps 2 any 1 found 0 readSectors
 
 method writeSectors(IILjx/zero/Memory;Z)V {
  +START:   #1
        out.println("writeSectors - start");   [ R i. RR] 
        if vR0.using_dma==0 goto B53;   
  +B15:   #1
        if vR0.controller.buildDMATable(vR3,(512*vi2))==0 goto B53;   
  +B31:   #1
        vR5 = new bioide/DMAOperation(vR3,vi2,vR0.controller,vR0,vi1,1,0);    [ R .. i..][ R .. iiiiRRiRR]
        goto +B71;   [R R .. .........]
  +B53:   #2
        vR5 = new bioide/WriteOperation(vR3,vi2,vR0.controller,vR0,vi1,1);    [ R .. i........][ R .. iiiRRiRR.]
  +B71:   #1
        vR0.controller.queueOperation(vR5,0);   [R R .. iRR......] 
        if vi4==0 goto B91;   
  +B86:   #1
        vR5.waitForCompletion();   [R R .. R........] 
  +B91:   #1
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 7 swaps 2 any 1 found 0 writeSectors
 
 method getCapacity()I {
  +START:   #1
        return vR0.capacity;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCapacity
 
 method getSectorSize()I {
  +START:   #1
        return 512;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getSectorSize
}
