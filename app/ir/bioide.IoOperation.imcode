class bioide/IoOperation {
 
 method <init>(Ljx/zero/Memory;ILbioide/Controller;Lbioide/Drive;IZ)V {
  +START:   #1
        vR0.<init>@special(vR3,vR4);   [ R  RRR] 
        vR0.synchronous = vi6;   
        vR0.offset = 0;   
        vR0.sector = vi5;   
        vR0.buffer = vR1;   
        vR0.count = vi2;   
        if vi2<=(vR1.size()/512) goto B56;   
  -B48:   #1
        throw new java/lang/Error();   
  +B56:   #1
        vR0.state = cpuManager.getAtomicVariable();   
        return;   
  +END:   #1
 }
// Register: rd 15/15 wr 2 swaps 0 any 1 found 1 <init>
 
 method endOperation(Z)V {
  +START:   #1
        vR0.errors = 0;   
        if vi1!=0 goto B14;   
  +B9:   #1
        vR0.errors = 1;   
  +B14:   #1
        vR0.controller.nextOperation();   [   R] 
        vR0.state.atomicUpdateUnblock(STATE_COMPLETED,vR0.cpuState);   [  iR RRR] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 1 any 1 found 0 endOperation
 
 method waitForCompletion()V {
  +START:   #1
        vR0.cpuState = cpuManager.getCPUState();   
        vR0.state.blockIfEqual(STATE_RUNNING);   [  i RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 waitForCompletion
 
 method ioInit()V {
  +START:   #1
        vi1 = vR0.sector;    
        vR0.controller.setLDHReg(vR0.drive.select);   [i Ri i bR] 
        if vR0.controller.waitFor(64,-120,30)!=0 goto B84;   
  -B35:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR . i...][ RR . iR..]
        b0.println(b1.append@extra("").append@extra(vR0.drive.name).append@extra(": Geraet nicht bereit").toString@extra());   [i RR iiii.. RR..] 
        vR0.endOperation@this(0);   [i RR iiii.. iR..] 
        throw new java/lang/Error();   
  +B84:   #1
        vR0.controller.setCTLReg(vR0.drive.ctl);   [i RR i..... bR..] 
        if vR0.count>=256 goto B127;   
  +B108:   #1
        vR0.controller.setCountReg((byte)(vR0.count & 255));   [i RR i..... iR..] 
        goto +B135;   [i RR i..... ....]
  +B127:   #1
        vR0.controller.setCountReg(0);   [iiiii RR ...... iR..] 
  +B135:   #1
        if vR0.drive.lba()==0 goto B220;   
  +B145:   #1
        vR0.controller.setSectorReg((byte)(vi1 & 255));   [i RR i..... iR..] 
        b0 = vR0.controller;    
        b1 = (vi1 >> 8);    
        vi1 = b1;    
        b0.setLoCylReg((byte)(b1 & 255));   [i Ri ii.... iR..] 
        b0 = vR0.controller;    
        b1 = (vi1 >> 8);    
        vi1 = b1;    
        b0.setHiCylReg((byte)(b1 & 255));   [i Ri iii... iR..] 
        vR0.controller.setLDHReg((byte)(((vi1 >> 8) & 15) | vR0.drive.select));   [i Ri iiii.. iR..] 
        goto +B323;   forward return[i Ri iiii.. ....]
  +B220:   #1
        vi5 = (vi1/vR0.drive.sect);    
        vi2 = ((vi1%vR0.drive.sect)+1);    
        vR0.controller.setSectorReg((byte)(vi2 & 255));   [ii??i Ri i..... iR..] 
        vi3 = (vi5%vR0.drive.head);    
        vi4 = (vi5/vR0.drive.head);    
        vR0.controller.setLoCylReg((byte)(vi4 & 255));   [iiiii Ri ii.... iR..] 
        vR0.controller.setHiCylReg((byte)(vi4 >> 8));   [iiiii Ri iii... iR..] 
        vR0.controller.setLDHReg((byte)(vi3 | vR0.drive.select));   [iiiii Ri iiii.. iR..] 
  +B323:   #1
        return;   
  +END:   #1
 }
// Register: rd 47/47 wr 31 swaps 15 any 4 found 0 ioInit
 
 method <clinit>()V {
  +START:   #1
        b0 = new java/lang/Object();    [ R  i][ R  iR]
        STATE_UNKNOWN = b0;   
        b0 = new java/lang/Object();    [ R  i.][ R  iR]
        STATE_RUNNING = b0;   
        b0 = new java/lang/Object();    [ R  i.][ R  iR]
        STATE_COMPLETED = b0;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 3 <clinit>
}
