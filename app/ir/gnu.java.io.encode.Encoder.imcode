class gnu/java/io/encode/Encoder {
 
 method getSchemeName()Ljava/lang/String; {
  +START:   #1
        return scheme_name;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getSchemeName
 
 method getSchemeDescription()Ljava/lang/String; {
  +START:   #1
        return scheme_description;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getSchemeDescription
 
 method <init>(Ljava/io/OutputStream;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.out = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method bytesInCharArray([C)I {
  +START:   #1
        return vR0.bytesInCharArray@this(vR1,0,vR1.length);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 bytesInCharArray
 
 method convertToBytes([C)[B {
  +START:   #1
        return vR0.convertToBytes@this(vR1,0,vR1.length);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 convertToBytes
 
 method convertToBytes([CII)[B {
  +START:   #1
        vR4 = new byte[vR0.bytesInCharArray@this(vR1)];    
        return vR0.convertToBytes@this(vR1,vi2,vi3,vR4,vi2);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 convertToBytes
 
 method convertToBytes([C[BI)[B {
  +START:   #1
        return vR0.convertToBytes@this(vR1,0,vR1.length,vR2,vi3);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 convertToBytes
 
 method close()V {
  +START:   #1
        vR0.out.close();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 close
 
 method flush()V {
  +START:   #1
        vR0.out.flush();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 flush
 
 method setBadCharValue(C)V {
  +START:   #1
        vR2 = new char[1];    
        vR2[0] = vi1;   
        vR0.convertToBytes@this(vR2);   [R   RR] 
        vR0.bad_char = vi1;   
        vR0.bad_char_set = 1;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 1 swaps 0 any 1 found 0 setBadCharValue
 
 method <clinit>()V {
  +START:   #1
        scheme_name = "undefined";   
        scheme_description = "undefined";   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 0 any 0 found 0 <clinit>
}
