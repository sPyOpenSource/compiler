class jx/net/protocol/ether/Ether$PacketContainer {
 
 method <init>(Ljx/net/protocol/ether/Ether;Ljx/zero/Memory;)V {
  +START:   #1
        vR0.this$0 = vR1;   
        vR0.<init>@special();   [   R] 
        vR0.offs = 0;   
        vR0.size = 0;   
        vR0.setMem@this(vR2);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 0 swaps 0 any 0 found 0 <init>
 
 method getOffset()I {
  +START:   #1
        if access$300@special(vR0.this$0)!=0 goto B20;   
  -B10:   #1
        throw new java/lang/Error("when splitting the Memory, an extra offset info is not needed");   
  +B20:   #1
        return vR0.offs;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 getOffset
 
 method getSize()I {
  +START:   #1
        if access$300@special(vR0.this$0)!=0 goto B20;   
  -B10:   #1
        throw new java/lang/Error("when splitting the Memory, an extra size info is not needed");   
  +B20:   #1
        return vR0.size;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 getSize
 
 method getMem()Ljx/zero/Memory; {
  +START:   #1
        return vR0.mem;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMem
 
 method setMem(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.mem = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setMem
 
 method setData(Ljx/zero/Memory;II)V {
  +START:   #1
        vR0.setMem@this(vR1);   [   RR] 
        vR0.offs = vi2;   
        vR0.size = vi3;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 setData
}
