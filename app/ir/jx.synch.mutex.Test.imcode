class jx/synch/mutex/Test {
 
 method init(Ljx/zero/Naming;)V {
  +START:   #1
        b0 = new jx/zero/debug/DebugPrintStream;    
        b1 = b0;    
        b2 = new jx/zero/debug/DebugOutputStream((jx/zero/debug/DebugChannel)(vR0.lookup("DebugChannel0")));    [ RRR  i][ RRR .i. iRR]
        b1.<init>@special(b2);   [ RRR .i. RR.] 
        out = b0;   
        b0 = new jx/synch/mutex/Test();    [ RRR .i. i..][ RRR .i. iR.]
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 7 swaps 1 any 1 found 1 init
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ RR  R] 
        b1 = new jx/synch/mutex/BlockingLockImpl();    [ RR  i][ RR  iR]
        vR0.mutex = b1;   
        vi1 = 0;    
  +B17:   #1
        if vi1>=10 goto B40;   
  +B23:   #1
        b0 = new java/lang/Thread(vR0);    [ RR  i.][ RR . iRR]
        b0.start();   [i RR . R..] 
        vi1++;   
        goto +B17;   [i RR . ...]
  +B40:   #1
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 5 swaps 0 any 2 found 0 <init>
 
 method run()V {
  +START:   #1
        vR0.mutex.lock();   [ RR  R] 
        vi1 = 0;    
  +B11:   #1
        if vi1>=1000000 goto B33;   
  +B17:   #1
        vR0.a = (vR0.a+1);   
        vi1++;   
        goto +B11;   [i RR  .]
  +B33:   #1
        vR0.mutex.unlock();   [i RR  R] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("a=").append@extra(vR0.a).toString@extra());   [i RR iii. RR.] 
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 9 swaps 3 any 2 found 0 run
}
