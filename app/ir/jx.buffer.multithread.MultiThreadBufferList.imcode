class jx/buffer/multithread/MultiThreadBufferList {
 
 method getLast()Ljx/buffer/multithread/Buffer; {
  +START:   #1
        return vR0.last;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getLast
 
 method <init>()V {
  +START:   #1
        b1 = new jx/buffer/multithread/Buffer(0);    [ ?R  i][ ?R . iRR]
        vR0.<init>@special(b1,0);   [ ?R . RRR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 <init>
 
 method <init>([Ljx/zero/Memory;)V {
  +START:   #1
        b1 = new jx/buffer/multithread/Buffer(vR1[0]);    [ RR  i][ RR . iRR]
        vR0.<init>@special(b1,0);   [ RR . RRR] 
        if vR0.verbose==0 goto B22;   
  +B22:   #1
        vi2 = 1;    
  +B24:   #1
        if vi2>=vR1.length goto B82;   
  +B30:   #1
        if vR0.verbose==0 goto B62;   
  +B37:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR . i..][ RR . iR.]
        b0.println(b1.append@extra("       loop:").append@extra(vi2).toString@extra());   [i RR ii. RR.] 
  +B62:   #1
        b1 = new jx/buffer/multithread/Buffer(vR1[vi2]);    [ RR ... i..][ RR ... iRR]
        vR0.appendElement@this(b1);   [i RR ... RR.] 
        vi2++;   
        goto +B24;   [i RR ... ...]
  +B82:   #1
        if vR0.verbose==0 goto B93;   
  +B89:   #1
        vR0.dump@this();   [i RR ... R..] 
  +B93:   #1
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 11 swaps 2 any 2 found 0 <init>
 
 method <init>(Ljx/buffer/multithread/Buffer;Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.verbose = 0;   
        vR0.requireMoreData = 0;   
        vR0.recording = 0;   
        if vR0.verbose==0 goto B34;   
  +B26:   #1
        out.println("MultiThreadBufferList(Buffer,CPUState)");   [  i. RR] 
  +B34:   #1
        vR0.first = vR1;   
        vR0.last = vR1;   
        vR0.consumer = vR2;   
        vR0.cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        if vR0.verbose==0 goto B85;   
  +B73:   #1
        vR0.cpuManager.dump("MultiThreadBufferList",vR0);   [  i. RRR] 
  +B85:   #1
        vR0.size = 1;   
        return;   
  +END:   #1
 }
// Register: rd 16/16 wr 6 swaps 3 any 0 found 0 <init>
 
 method setListName(Ljava/lang/String;)V {
  +START:   #1
        vR0.name = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setListName
 
 method enableRecording(Ljava/lang/String;)V {
  +START:   #1
        vR0.event_list = vR0.cpuManager.createNewEvent(vR1);   
        vR0.recording = 1;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 enableRecording
 
 method <init>(Ljx/buffer/multithread/Buffer;)V {
  +START:   #1
        vR0.<init>@special(vR1,0);   [   RRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method setConsumer(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.consumer = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setConsumer
 
 method getConsumer()Ljx/zero/CPUState; {
  +START:   #1
        return vR0.consumer;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getConsumer
 
 method appendElement(Ljx/buffer/multithread/Buffer;)V {
  +START:   #1
        if vR0.verbose==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("LIST::appendElement data=").append@extra(vR1.data).toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        if vR0.requireMoreData==0 goto B59;   
  +B42:   #1
        if vR1.moreData!=null goto B59;   
  -B49:   #1
        throw new java/lang/Error("Buffer contains no moreData");   
  +B59:   #2
        vR1.next.set(0);   [ RR .... RR.] 
        vR0.last.next.atomicUpdateUnblock(vR1,vR0.consumer);   [ RR i... RRR] 
        vR0.last = vR1;   
        vR0.size = (vR0.size+1);   
        if vR0.recording==0 goto B122;   
  +B108:   #1
        vR0.cpuManager.recordEventWithInfo(vR0.event_list,0);   [ RR i... iiR] 
  +B122:   #1
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 10 swaps 5 any 0 found 0 appendElement
 
 method undockFirstElement()Ljx/buffer/multithread/Buffer; {
  +START:   #1
        if vR0.verbose==0 goto B19;   
  +B7:   #1
        vR0.cpuManager.dump("MultiThreadBufferList::UNDOCK",vR0);   [  i RRR] 
  +B19:   #1
        if vR0.consumer!=null goto B39;   
  +B26:   #1
        vR0.consumer = vR0.cpuManager.getCPUState();   
  +B39:   #1
        vR0.first.next.blockIfEqual(0);   [  . RR.] 
        vR0.consumer = 0;   
        if vR0.first.next.get()!=null goto B98;   
  +B72:   #1
        out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");   [  i. RR.] 
        out.println("unblocked, but no element in list!!. This  may be an error!");   [  ii. RR.] 
        out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");   [  iii. RR.] 
        return 0;   
  +B98:   #1
        vR1 = vR0.first;    
        vR0.first = (jx/buffer/multithread/Buffer)(vR0.first.next.get());   
        vR1.copyDataFrom(vR0.first);   [R  i... RR.] 
        vR0.size = (vR0.size-1);   
        vR0.cpuManager.recordEventWithInfo(vR0.event_list,1);   [R  ii.. iiR] 
        return vR1;   
  +END:   #1
 }
// Register: rd 19/19 wr 11 swaps 6 any 0 found 0 undockFirstElement
 
 method nonblockingUndockFirstElement()Ljx/buffer/multithread/Buffer; {
  +START:   #1
        if vR0.verbose==0 goto B23;   
  +B7:   #1
        vR0.cpuManager.dump("MultiThreadBufferList::NONBLOCKINGUNDOCK",vR0);   [  i RRR] 
        vR0.dump@this();   [  i R..] 
  +B23:   #1
        if vR0.first.next.get()!=null goto B40;   
  +B38:   #1
        return 0;   
  +B40:   #1
        vR1 = vR0.first;    
        vR0.first = (jx/buffer/multithread/Buffer)(vR0.first.next.get());   
        vR1.copyDataFrom(vR0.first);   [R  i RR.] 
        vR0.size = (vR0.size-1);   
        if vR0.recording==0 goto B103;   
  +B89:   #1
        vR0.cpuManager.recordEventWithInfo(vR0.event_list,1);   [R  i iiR] 
  +B103:   #1
        return vR1;   
  +END:   #1
 }
// Register: rd 16/16 wr 5 swaps 3 any 0 found 0 nonblockingUndockFirstElement
 
 method dump()V {
  +START:   #1
        vR1 = vR0.first;    
        vR0.cpuManager.dump("Dump of list: ",vR0);   [R  i RRR] 
  +B17:   #1
        if vR1==null goto B49;   
  +B21:   #1
        vR0.cpuManager.dump(" Node: ",vR1);   [R  i RRR] 
        vR1 = (jx/buffer/multithread/Buffer)(vR1.next.get());    
        goto +B17;   [R  i. ...]
  +B49:   #1
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 5 swaps 2 any 1 found 0 dump
 
 method checkConsistency()V {
  +START:   #1
        if vR0.last.next.get()==null goto B23;   
  +B15:   #1
        out.println("last.next != null");   [ RR i. RR] 
  +B23:   #1
        vR1 = vR0.first;    
        vi2 = 0;    
  +B30:   #1
        if vR1==null goto B53;   
  +B34:   #1
        vR1 = (jx/buffer/multithread/Buffer)(vR1.next.get());    
        vi2++;   
        goto +B30;   [Ri RR .. ..]
  +B53:   #1
        if vi2==vR0.size goto B119;   
  +B61:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .. i.][ RR .. iR]
        b0.println(b1.append@extra("size info is not valid [").append@extra(vR0.name).append@extra("] (is: ").append@extra(vi2).append@extra(" should:").append@extra(vR0.size).append@extra(")").toString@extra());   [Ri RR iiiii.ii..... RR......] 
        vR0.dump@this();   [Ri RR iiiii.ii..... R.......] 
  +B119:   #1
        vR3 = vR0.first;    
        vR4 = vR0.first;    
        vR3 = vR0.first;    
  +B135:   #1
        if vR3==null goto B257;   
  +B139:   #1
        vR4 = (jx/buffer/multithread/Buffer)(vR3.next.get());    
  +B153:   #1
        if vR4==null goto B241;   
  +B158:   #1
        if vR3!=vR4 goto B223;   
  -B164:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ............. i.......][ RR ............. iR......]
        b0.print(b1.append@extra("duplicate Node found!!! [").append@extra(vR0.name).append@extra("] ").toString@extra());   [RiRR RR iiii......... RR......] 
        vR0.cpuManager.dump(" duplicate: ",vR3);   [RiRR RR iiiii........ RRR.....] 
        vR0.dump@this();   [RiRR RR iiiii........ R.......] 
        throw new java/lang/Error("duplicates found!!!");   
  +B223:   #1
        vR4 = (jx/buffer/multithread/Buffer)(vR4.next.get());    
        goto +B153;   [RiRR RR ............. ........]
  +B241:   #1
        vR3 = (jx/buffer/multithread/Buffer)(vR3.next.get());    
        goto +B135;   [RiRR RR ............. ........]
  +B257:   #1
        return;   
  +END:   #1
 }
// Register: rd 32/32 wr 43 swaps 15 any 6 found 0 checkConsistency
 
 method size()I {
  +START:   #1
        return vR0.size;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method setVerbose(Z)V {
  +START:   #1
        vR0.verbose = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setVerbose
 
 method requireMoredata(Z)V {
  +START:   #1
        vR0.requireMoreData = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 requireMoredata
}
