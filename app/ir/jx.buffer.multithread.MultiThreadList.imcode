class jx/buffer/multithread/MultiThreadList {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.verbose = 0;   
        vR0.consumer = 0;   
        vR0.name = 0;   
        if vR0.verbose==0 goto B34;   
  +B26:   #1
        out.println("MultiThreadList()");   [ ?R i. RR] 
  +B34:   #1
        vR0.cpuManager = (jx/zero/CPUManager)(waitUntilPortalAvailable@special(getInitialNaming@special(),"CPUManager"));   
        b1 = new jx/buffer/multithread/MultiThreadList$MultiThreadListElement(vR0,0,vR0.cpuManager);    [ ?R RR. i.][ ?R RR. iRRRR]
        vR0.first = b1;   
        vR0.last = vR0.first;   
        vR0.cas_first = vR0.cpuManager.getCAS(vR0.getClass@this().getName@extra(),"first");   
        vR0.cas_last = vR0.cpuManager.getCAS(vR0.getClass@this().getName@extra(),"last");   
        vR0.size = 1;   
        return;   
  +END:   #1
 }
// Register: rd 21/21 wr 13 swaps 3 any 0 found 0 <init>
 
 method setListName(Ljava/lang/String;)V {
  +START:   #1
        vR0.name = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setListName
 
 method appendElement(Ljava/lang/Object;)V {
  +START:   #1
        if vR0.verbose==0 goto B61;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("appendElement [").append@extra(vR0.name).append@extra("] data=").append@extra(vR1).append@extra(" (size=").append@extra(vR0.size).append@extra(")").toString@extra());   [ RR iiiii.ii..... RR......] 
  +B61:   #1
        vR2 = new jx/buffer/multithread/MultiThreadList$MultiThreadListElement(vR0,vR1,vR0.cpuManager);    [ RR ............. i.......][ RR ............. iRRRR...]
        vR2.next.set(0);   [R RR ............. RR......] 
  +B85:   #1
        vR3 = vR0.last;    
        if vR0.cas_last.casObject(vR0,vR3,vR2)==0 goto B85;   
  +B105:   #1
        vR3.next.atomicUpdateUnblock(vR2,vR0.consumer);   [RR RR i............ RRR.....] 
        vR0.size = (vR0.size+1);   
        return;   
  +END:   #1
 }
// Register: rd 16/16 wr 20 swaps 10 any 0 found 0 appendElement
 
 method undockFirstElement()Ljava/lang/Object; {
  +START:   #1
        if vR0.verbose==0 goto B52;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("undockFirstElement [").append@extra(vR0.name).append@extra("] (size=").append@extra(vR0.size).append@extra(")").toString@extra());   [ RR iiiiii.... RR....] 
  +B52:   #1
        vR0.consumer = vR0.cpuManager.getCPUState();   
        vR0.first.next.blockIfEqual(0);   [ RR .......... RR....] 
        vR0.consumer = 0;   
  +B83:   #1
        vR1 = vR0.first;    
        vR2 = (jx/buffer/multithread/MultiThreadList$MultiThreadListElement)(vR1.next.get());    
        if vR2!=null goto B107;   
  +B105:   #1
        return 0;   
  +B107:   #1
        if vR0.cas_first.casObject(vR0,vR1,vR2)==0 goto B83;   
  +B122:   #1
        vR0.size = (vR0.size-1);   
        return vR2.data;   
  +END:   #1
 }
// Register: rd 17/17 wr 16 swaps 6 any 1 found 0 undockFirstElement
 
 method nonblockingUndockFirstElement()Ljava/lang/Object; {
  +START:   #1
        if vR0.verbose==0 goto B52;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("nonblockingUndockFirstElement [").append@extra(vR0.name).append@extra("] (size=").append@extra(vR0.size).append@extra(")").toString@extra());   [ RR iiiiii.... RR....] 
  +B52:   #2
        vR1 = vR0.first;    
        vR2 = (jx/buffer/multithread/MultiThreadList$MultiThreadListElement)(vR1.next.get());    
        if vR2!=null goto B76;   
  +B74:   #1
        return 0;   
  +B76:   #1
        if vR0.cas_first.casObject(vR0,vR1,vR2)==0 goto B52;   
  +B91:   #1
        vR0.size = (vR0.size-1);   
        return vR2.data;   
  +END:   #1
 }
// Register: rd 13/13 wr 16 swaps 6 any 1 found 0 nonblockingUndockFirstElement
 
 method peekFirstElement()Ljava/lang/Object; {
  +START:   #1
        if vR0.verbose==0 goto B40;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("peekFirstElement [").append@extra(vR0.name).append@extra("]").toString@extra());   [ RR iiii.. RR..] 
  +B40:   #1
        vR0.first.next.blockIfEqual(0);   [ RR ...... RR..] 
        if vR0.first.next.get()!=null goto B94;   
  +B68:   #1
        out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");   [ RR i..... RR..] 
        out.println("unblocked, but no element in list!!. This  may be an error!");   [ RR ii.... RR..] 
        out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");   [ RR iii... RR..] 
        return 0;   
  +B94:   #1
        return vR0.first.data;   
  +END:   #1
 }
// Register: rd 7/7 wr 15 swaps 7 any 0 found 0 peekFirstElement
 
 method dump()V {
  +START:   #1
        vR1 = vR0.first;    
        vR0.cpuManager.dump("Dump of list: ",vR0);   [R  i RRR] 
  +B17:   #1
        if vR1==null goto B64;   
  +B21:   #1
        vR0.cpuManager.dump(" Node: ",vR1);   [R  i RRR] 
        vR0.cpuManager.dump(" Data: ",vR1.data);   [R  iiR RRR] 
        vR1 = (jx/buffer/multithread/MultiThreadList$MultiThreadListElement)(vR1.next.get());    
        goto +B17;   [R  iiR. ...]
  +B64:   #1
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 7 swaps 3 any 1 found 0 dump
 
 method size()I {
  +START:   #1
        return vR0.size;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method setVerbose(Z)V {
  +START:   #1
        vR0.verbose = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setVerbose
}
