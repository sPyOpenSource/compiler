class jx/net/protocol/ip/IP$2 {
 
 method <init>(Ljx/net/protocol/ip/IP;Ljx/net/IPAddress;ILjx/net/PacketsConsumer;)V {
  +START:   #1
        vR0.this$0 = vR1;   
        vR0.val$dst = vR2;   
        vR0.val$id = vi3;   
        vR0.val$lowerConsumer = vR4;   
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 0 swaps 0 any 0 found 0 <init>
 
 method processMemory(Ljx/zero/Memory;)Ljx/zero/Memory; {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("SEND2 IP to ").append@extra(vR0.val$dst).toString@extra());   [ RR iii. RR.] 
        vR0.this$0.cpuManager.recordEvent(access$000@special(vR0.this$0));    
        vR2 = vR1;    
        vR3 = new jx/net/protocol/ip/IPFormat(vR2);    [ RR iii. i..][ RR iii. iRR]
        vR3.insertHeaderLength();   [RR RR iii. R..] 
        vR3.insertTypeOfService(0);   [RR RR iii. iR.] 
        vR3.insertTotalLength((vR2.size()-14));   [RR RR iiii iR.] 
        out.println(vR2.size());   [RR RR iiiii. iR.] 
        vR3.insertIdentification(access$108@special(vR0.this$0));   [RR RR iiiiiRi iR.] 
        vR3.insertFragmentOffset(0);   [RR RR iiiiiRi iR.] 
        vR3.insertTimeToLive(64);   [RR RR iiiiiRi iR.] 
        vR3.insertProtocol(vR0.val$id);   [RR RR iiiiiRii iR.] 
        if access$200@special(vR0.this$0)==null goto B143;   
  +B132:   #1
        vR3.insertSourceAddress(access$200@special(vR0.this$0));   [RR RR Ri....... RR.] 
  +B143:   #1
        vR3.insertDestAddress(vR0.val$dst);   [RR RR i........ RR.] 
        if access$300@special(vR0.this$0)==0 goto B165;   
  +B161:   #1
        vR3.insertChecksum();   [RR RR ......... R..] 
  +B165:   #1
        out.println("IP send");   [RR RR i........ RR.] 
        vR3.dump();   [RR RR i........ R..] 
        vR4 = vR0.val$lowerConsumer.processMemory(vR2);    [RR RR i........ RR.] 
        return vR4;   
  +END:   #1
 }
// Register: rd 27/27 wr 24 swaps 10 any 1 found 0 processMemory
 
 method requiresSpace()I {
  +START:   #1
        return requiresSpace@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 requiresSpace
 
 method getMTU()I {
  +START:   #1
        return 1000;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getMTU
}
