class java/lang/invoke/BoundMethodHandle {
 
 method <init>(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;)V {
  +START:   #1
        vR0.<init>@special(vR1,vR2);   [ R  RRR] 
        if $assertionsDisabled!=0 goto B31;   
  +B12:   #1
        if vR0.speciesData@this()==speciesData@special(vR2) goto B31;   
  -B23:   #1
        throw new java/lang/AssertionError();   
  +B31:   #2
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 <init>
 
 method bindSingle(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/invoke/LambdaForm$BasicType;Ljava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 bindSingle
 
 method editor()Ljava/lang/invoke/LambdaFormEditor; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 editor
 
 method bindSingle(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;Ljava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle; {
  +START:   #1
        return access$000@special(vR0,vR1,vR2);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 bindSingle
 
 method bindArgumentL(ILjava/lang/Object;)Ljava/lang/invoke/BoundMethodHandle; {
  +START:   #1
        return vR0.editor@this().bindArgumentL(vR0,vi1,vR2);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 bindArgumentL
 
 method bindArgumentI(II)Ljava/lang/invoke/BoundMethodHandle; {
  +START:   #1
        return vR0.editor@this().bindArgumentI(vR0,vi1,vi2);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 bindArgumentI
 
 method bindArgumentJ(IJ)Ljava/lang/invoke/BoundMethodHandle; {
  +START:   #1
        return vR0.editor@this().bindArgumentJ(vR0,vi1,vl2);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 bindArgumentJ
 
 method bindArgumentF(IF)Ljava/lang/invoke/BoundMethodHandle; {
  +START:   #1
        return vR0.editor@this().bindArgumentF(vR0,vi1,vl2);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 bindArgumentF
 
 method bindArgumentD(ID)Ljava/lang/invoke/BoundMethodHandle; {
  +START:   #1
        return vR0.editor@this().bindArgumentD(vR0,vi1,vd2);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 bindArgumentD
 
 method rebind()Ljava/lang/invoke/BoundMethodHandle; {
  +START:   #1
        if vR0.tooComplex@special()!=0 goto B9;   
  +B7:   #1
        return vR0;   
  +B9:   #1
        return makeReinvoker@special(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 rebind
 
 method tooComplex()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 tooComplex
 
 method makeReinvoker(Ljava/lang/invoke/MethodHandle;)Ljava/lang/invoke/BoundMethodHandle; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 makeReinvoker
 
 method speciesData(Ljava/lang/invoke/LambdaForm;)Ljava/lang/invoke/BoundMethodHandle$SpeciesData; {
  +START:   #1
        return EMPTY;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 speciesData
 
 method internalProperties()Ljava/lang/Object; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra("
& BMH=").append@extra(vR0.internalValues@extra()).toString@extra();   
  +END:   #1
 }
// Register: rd 2/2 wr 5 swaps 2 any 0 found 0 internalProperties
 
 method internalValues()Ljava/lang/Object; {
  +START:   #1
        vR1 = new java/lang/Object()[access$100@special(vR0.speciesData@this())];    
        vi2 = 0;    
  +B13:   #1
        if vi2>=vR1.length goto B33;   
  +B19:   #1
        vR1[vi2] = vR0.arg@extra(vi2);   
        vi2++;   
        goto +B13;   [Ri  . ..]
  +B33:   #1
        return asList@special(vR1);   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 0 any 2 found 0 internalValues
 
 method arg(I)Ljava/lang/Object; {
  -START:   #1
        b0 = new java/lang/InternalError;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra("unexpected type: ").append@extra(access$200@special(vR0.speciesData@this())).append@extra(".").append@extra(vi1).toString@extra());   [ RRR ii..Rii. RR...] 
        throw b0;   
  +END:   #1
 }
// Register: rd 5/5 wr 12 swaps 4 any 1 found 0 arg
 
 method checkCache(ILjava/lang/String;)Ljava/lang/invoke/BoundMethodHandle$SpeciesData; {
  +START:   #1
        vi2 = (vi0-1);    
        vR3 = SPECIES_DATA_CACHE[vi2];    
        if vR3==null goto B16;   
  +B14:   #1
        return vR3;   
  +B16:   #1
        b0 = SPECIES_DATA_CACHE;    
        vR3 = 0;    
        b0[vi2] = 0;   
        return vR3;   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 0 any 2 found 0 checkCache
 
 method speciesData_L()Ljava/lang/invoke/BoundMethodHandle$SpeciesData; {
  +START:   #1
        return checkCache@special(1,"L");   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 speciesData_L
 
 method speciesData_LL()Ljava/lang/invoke/BoundMethodHandle$SpeciesData; {
  +START:   #1
        return checkCache@special(2,"LL");   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 speciesData_LL
 
 method speciesData_LLL()Ljava/lang/invoke/BoundMethodHandle$SpeciesData; {
  +START:   #1
        return checkCache@special(3,"LLL");   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 speciesData_LLL
 
 method speciesData_LLLL()Ljava/lang/invoke/BoundMethodHandle$SpeciesData; {
  +START:   #1
        return checkCache@special(4,"LLLL");   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 speciesData_LLLL
 
 method speciesData_LLLLL()Ljava/lang/invoke/BoundMethodHandle$SpeciesData; {
  +START:   #1
        return checkCache@special(5,"LLLLL");   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 speciesData_LLLLL
 
 method <clinit>()V {
  +START:   #1
        if java/lang/invoke/BoundMethodHandle.desiredAssertionStatus@extra()!=0 goto B12;   
  +B8:   #1
        b0 = 1;    
        goto +B13b0;   [ i  .]
  +B12:   #1
        b0 = 0;    
  +B13b0:   #1 int
        $assertionsDisabled = b0;   
        LOOKUP = IMPL_LOOKUP;   
        SPECIES_DATA = EMPTY;   
        SPECIES_DATA_CACHE = new java/lang/invoke/BoundMethodHandle$SpeciesData()[5];   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 4 swaps 0 any 0 found 1 <clinit>
}
