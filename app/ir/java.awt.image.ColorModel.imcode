class java/awt/image/ColorModel {
 
 method nArray(II)[I {
  +START:   #1
        vR2 = new int[vi1];    
        fill@special(vR2,vi0);   [R   iR]
        return vR2;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 nArray
 
 method nArray(BI)[B {
  +START:   #1
        vR2 = new byte[vi1];    
        fill@special(vR2,vi0);   [R   iR]
        return vR2;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 nArray
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special((vi1*4),nArray@special(vi1,4),0,1,0,3,smallestAppropriateTransferType@special((vi1*4)));   [  iiiR iiiiRRiR] 
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 6 swaps 2 any 0 found 0 <init>
 
 method <init>(I[ILjava/awt/color/ColorSpace;ZZII)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.pixel_bits = vi1;   
        vR0.bits = vR2;   
        vR0.cspace = vR3;   
        vR0.hasAlpha = vi4;   
        vR0.isAlphaPremultiplied = vi5;   
        vR0.transparency = vi6;   
        vR0.transferType = vi7;   
        return;   
  +END:   #1
 }
// Register: rd 15/15 wr 0 swaps 0 any 0 found 0 <init>
 
 method getRGBdefault()Ljava/awt/image/ColorModel; {
  +START:   #1
        return new java/awt/image/DirectColorModel(8,16711680,65280,255,-16777216);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getRGBdefault
 
 method hasAlpha()Z {
  +START:   #1
        return vR0.hasAlpha;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 hasAlpha
 
 method isAlphaPremultiplied()Z {
  +START:   #1
        return vR0.isAlphaPremultiplied;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isAlphaPremultiplied
 
 method getPixelSize()I {
  +START:   #1
        return vR0.pixel_bits;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getPixelSize
 
 method getComponentSize(I)I {
  +START:   #1
        return vR0.bits[vi1];   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 getComponentSize
 
 method getComponentSize()[I {
  +START:   #1
        return vR0.bits;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getComponentSize
 
 method getTransparency()I {
  +START:   #1
        return vR0.transparency;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getTransparency
 
 method getNumComponents()I {
  +START:   #1
        b0 = vR0.getNumColorComponents@this();    [ ii  R] 
        if vR0.hasAlpha==0 goto B15;   
  +B11b0:   #1 int
        b1 = 1;    
        goto +B16b0b1;   forward return[ ii  .]
  +B15b0:   #1 int
        b1 = 0;    
  +B16b0b1:   #1 int int
        return (b0+b1);   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 getNumComponents
 
 method getNumColorComponents()I {
  +START:   #1
        return vR0.cspace.getNumComponents();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getNumColorComponents
 
 method getRGB(I)I {
  +START:   #1
        return (((((vR0.getAlpha@this(vi1) & 255) << 24) | ((vR0.getRed@this(vi1) & 255) << 16)) | ((vR0.getGreen@this(vi1) & 255) << 8)) | ((vR0.getBlue@this(vi1) & 255) << 0));   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 0 found 0 getRGB
 
 method getPixelFromArray(Ljava/lang/Object;)I {
  +START:   #1
        vR2 = createBufferFromData@special(vR0.transferType,vR1,1);    [  i iRi]
        vR3 = getData@special(vR2);    [R  i R..]
        return vR2.getElem(0);   
  +END:   #1
 }
// Register: rd 2/2 wr 3 swaps 0 any 0 found 0 getPixelFromArray
 
 method getRed(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getRed@this(vR0.getPixelFromArray@extra(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getRed
 
 method getGreen(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getGreen@this(vR0.getPixelFromArray@extra(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getGreen
 
 method getBlue(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getBlue@this(vR0.getPixelFromArray@extra(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getBlue
 
 method getAlpha(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getAlpha@this(vR0.getPixelFromArray@extra(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getAlpha
 
 method getRGB(Ljava/lang/Object;)I {
  +START:   #1
        return (((((vR0.getAlpha@this(vR1) & 255) << 24) | ((vR0.getRed@this(vR1) & 255) << 16)) | ((vR0.getGreen@this(vR1) & 255) << 8)) | ((vR0.getBlue@this(vR1) & 255) << 0));   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 0 found 0 getRGB
 
 method getDataElements(ILjava/lang/Object;)Ljava/lang/Object; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getDataElements
 
 method getComponents(I[II)[I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getComponents
 
 method getComponents(Ljava/lang/Object;[II)[I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getComponents
 
 method getUnnormalizedComponents([FI[II)[I {
  +START:   #1
        vi5 = vR0.getNumComponents@this();    [ ?i  R] 
        if vR3!=null goto B18;   
  +B10:   #1
        vR3 = new int[(vi4+vi5)];    
  +B18:   #1
        vi6 = 0;    
  +B21:   #1
        if vi6>=vi5 goto B68;   
  +B28:   #1
        b1 = vi2;    
        vi2++;   
        vl7 = vR1[b1];    
        vi8 = (int)(vl7*(float)((2 << vR0.getComponentSize@this(vi6))-1));    
        b1 = vi4;    
        vi4++;   
        vR3[b1] = vi8;   
        vi6++;   
        goto +B21;   [iili ?i . ..]
  +B68:   #1
        return vR3;   
  +END:   #1
 }
// Register: rd 17/17 wr 10 swaps 0 any 8 found 1 getUnnormalizedComponents
 
 method getNormalizedComponents([II[FI)[F {
  +START:   #1
        vi5 = vR0.getNumComponents@this();    [ ?i  R] 
        if vR3!=null goto B18;   
  +B10:   #1
        vR3 = new float[(vi4+vi5)];    
  +B18:   #1
        vi6 = 0;    
  +B21:   #1
        if vi6>=vi5 goto B68;   
  +B28:   #1
        b1 = vi2;    
        vi2++;   
        vl7 = (float)vR1[b1];    
        vl8 = (vl7/(float)((2 << vR0.getComponentSize@this(vi6))-1));    
        b1 = vi4;    
        vi4++;   
        vR3[b1] = vl8;   
        vi6++;   
        goto +B21;   [iill ?i  ..]
  +B68:   #1
        return vR3;   
  +END:   #1
 }
// Register: rd 12/12 wr 8 swaps 0 any 7 found 0 getNormalizedComponents
 
 method getDataElement([II)I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getDataElement
 
 method getDataElements([IILjava/lang/Object;)Ljava/lang/Object; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getDataElements
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        if (vR1 instanceof java/awt/image/ColorModel)!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR2 = (java/awt/image/ColorModel)(vR1);    
        if vR0.pixel_bits!=vR2.pixel_bits goto B101;   
  +B25:   #1
        if vR0.transferType!=vR2.transferType goto B101;   
  +B36:   #1
        if vR0.transparency!=vR2.transparency goto B101;   
  +B47:   #1
        if vR0.hasAlpha!=vR2.hasAlpha goto B101;   
  +B58:   #1
        if vR0.isAlphaPremultiplied!=vR0.isAlphaPremultiplied goto B101;   
  +B69:   #1
        if vR0.bits.equals(vR2.bits)==0 goto B101;   
  +B83:   #1
        if vR0.cspace.equals(vR2.cspace)==0 goto B101;   
  +B97:   #1
        b0 = 1;    
        goto +B102b0;   forward return[R i . ..]
  +B101:   #7
        b0 = 0;    
  +B102b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 18/18 wr 4 swaps 2 any 1 found 1 equals
 
 method getColorSpace()Ljava/awt/color/ColorSpace; {
  +START:   #1
        return vR0.cspace;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getColorSpace
 
 method coerceData(Ljava/awt/image/WritableRaster;Z)Ljava/awt/image/ColorModel; {
  +START:   #1
        if vR0.isAlphaPremultiplied!=vi2 goto B10;   
  +B8:   #1
        return vR0;   
  +B10:   #1
        vi3 = vR1.getWidth();    [   R] 
        vi4 = vR1.getHeight();    [i   R] 
        vi5 = vR1.getMinX();    [ii   R] 
        vi6 = vR1.getMinY();    [iii   R] 
        vi7 = (vi3*vi4);    
        vi8 = vR0.getNumColorComponents@this();    [iiiii   R] 
        vi9 = vR0.getNumComponents@this();    [iiiiii   R] 
        vi10 = ((1 << vR0.getComponentSize@this(vi8))-1);    
        vR11 = vR1.getPixels(vi5,vi6,vi3,vi4,([D)(0));    [iiiiiiii  i RiiiiR] 
        vi12 = 0;    
  +B83:   #1
        if vi12>=vi7 goto B172;   
  +B90:   #1
        vd13 = (vR11[((vi12*vi9)+vi8)]*(double)vi10);    
        vi15 = 0;    
  +B110:   #1
        if vi15>=vi8 goto B166;   
  +B117:   #1
        vi16 = ((vi12*vi9)+vi15);    
        if vi2==0 goto B147;   
  +B131:   #1
        vR11[vi16] = (vR11[vi16]/vd13);   
        goto +B160;   [iiiiiiiiRid?ii  . ......]
  +B147:   #1
        vR11[vi16] = (vR11[vi16]*vd13);   
  +B160:   #1
        vi15++;   
        goto +B110;   [iiiiiiiiRid?ii  . ......]
  +B166:   #1
        vi12++;   
        goto +B83;   [iiiiiiiiRid?ii  . ......]
  +B172:   #1
        vR1.setPixels(0,0,vi3,vi4,vR11);   [iiiiiiiiRid?ii  . RiiiiR] 
        return 0;   
  +END:   #1
 }
// Register: rd 26/26 wr 17 swaps 1 any 7 found 0 coerceData
 
 method isCompatibleRaster(Ljava/awt/image/Raster;)Z {
  +START:   #1
        vR2 = vR1.getSampleModel();    [   R] 
        return vR0.isCompatibleSampleModel@this(vR2);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isCompatibleRaster
 
 method createCompatibleWritableRaster(II)Ljava/awt/image/WritableRaster; {
  +START:   #1
        b0 = new java/awt/image/WritableRaster;    
        b1 = b0;    
        b2 = vR0.createCompatibleSampleModel@this(vi1,vi2);    [ RRRR  iiR] 
        b3 = new java/awt/Point(0,0);    [ RRRR  i..][ RRRR . iiiR]
        b1.<init>@special(b2,b3);   [ RRRR . RRR.] 
        return b0;   
  +END:   #1
 }
// Register: rd 7/7 wr 5 swaps 0 any 1 found 0 createCompatibleWritableRaster
 
 method createCompatibleSampleModel(II)Ljava/awt/image/SampleModel; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 createCompatibleSampleModel
 
 method isCompatibleSampleModel(Ljava/awt/image/SampleModel;)Z {
  +START:   #1
        if vR1.getTransferType()!=vR0.transferType goto B15;   
  +B11:   #1
        b0 = 1;    
        goto +B16b0;   forward return[ i  .]
  +B15:   #1
        b0 = 0;    
  +B16b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 isCompatibleSampleModel
 
 method finalize()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 finalize
 
 method getAlphaRaster(Ljava/awt/image/WritableRaster;)Ljava/awt/image/WritableRaster; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getAlphaRaster
 
 method stringParam()Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra("pixel_bits=").append@extra(vR0.pixel_bits).append@extra(", cspace=").append@extra(vR0.cspace).append@extra(", transferType=").append@extra(vR0.transferType).append@extra(", transparency=").append@extra(vR0.transparency).append@extra(", hasAlpha=").append@extra(vR0.hasAlpha).append@extra(", isAlphaPremultiplied=").append@extra(vR0.isAlphaPremultiplied).toString@extra();   
  +END:   #1
 }
// Register: rd 7/7 wr 25 swaps 19 any 0 found 0 stringParam
 
 method toString()Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra(vR0.getClass@this().getName@extra()).append@extra("[").append@extra(vR0.stringParam@this()).append@extra("]").toString@extra();   
  +END:   #1
 }
// Register: rd 3/3 wr 10 swaps 4 any 0 found 0 toString
}
