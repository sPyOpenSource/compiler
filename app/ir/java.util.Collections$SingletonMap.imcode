class java/util/Collections$SingletonMap {
 
 method <init>(Ljava/lang/Object;Ljava/lang/Object;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.k = vR1;   
        vR0.v = vR2;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method size()I {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 size
 
 method isEmpty()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isEmpty
 
 method containsKey(Ljava/lang/Object;)Z {
  +START:   #1
        return eq@special(vR1,vR0.k);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 containsKey
 
 method containsValue(Ljava/lang/Object;)Z {
  +START:   #1
        return eq@special(vR1,vR0.v);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 containsValue
 
 method get(Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        if eq@special(vR1,vR0.k)==0 goto B18;   
  +B11:   #1
        b0 = vR0.v;    
        goto +B19b0;   forward return[ R . ..]
  +B18:   #1
        b0 = 0;    
  +B19b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 3/3 wr 3 swaps 0 any 0 found 0 get
 
 method keySet()Ljava/util/Set; {
  +START:   #1
        if vR0.keySet!=null goto B18;   
  +B7:   #1
        vR0.keySet = singleton@special(vR0.k);   
  +B18:   #1
        return vR0.keySet;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 keySet
 
 method entrySet()Ljava/util/Set; {
  +START:   #1
        if vR0.entrySet!=null goto B29;   
  +B7:   #1
        b1 = new java/util/AbstractMap$SimpleImmutableEntry(vR0.k,vR0.v);    [ ?R  i][ ?R . iRRR]
        vR0.entrySet = singleton@special(b1);   
  +B29:   #1
        return vR0.entrySet;   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 entrySet
 
 method values()Ljava/util/Collection; {
  +START:   #1
        if vR0.values!=null goto B18;   
  +B7:   #1
        vR0.values = singleton@special(vR0.v);   
  +B18:   #1
        return vR0.values;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 values
 
 method getOrDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        if eq@special(vR1,vR0.k)==0 goto B18;   
  +B11:   #1
        b0 = vR0.v;    
        goto +B19b0;   forward return[ R . ..]
  +B18:   #1
        b0 = vR2;    
  +B19b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 4/4 wr 3 swaps 0 any 1 found 0 getOrDefault
 
 method forEach(Ljava/util/function/BiConsumer;)V {
  +START:   #1
        vR1.accept(vR0.k,vR0.v);   [  iR RRR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 1 any 0 found 0 forEach
 
 method replaceAll(Ljava/util/function/BiFunction;)V {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 replaceAll
 
 method putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 putIfAbsent
 
 method remove(Ljava/lang/Object;Ljava/lang/Object;)Z {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 remove
 
 method replace(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 replace
 
 method replace(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 replace
 
 method computeIfAbsent(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object; {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 computeIfAbsent
 
 method computeIfPresent(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object; {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 computeIfPresent
 
 method compute(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object; {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 compute
 
 method merge(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object; {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 merge
}
