class bioide/DMAOperation {
 
 method <init>(Ljx/zero/Memory;ILbioide/Controller;Lbioide/Drive;IZZ)V {
  +START:   #1
        vR0.<init>@special(vR1,vi2,vR3,vR4,vi5,vi6);   [   iiRRiRR] 
        vR0.read = vi7;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method startOperation()V {
  +START:   #1
        vR0.state.set(STATE_RUNNING);   [ R i RR] 
        vR0.ioInit@this();   [ R i R.] 
        if vR0.controller.dmatable!=null goto B36;   
  -B26:   #1
        throw new bioide/IDEException("non-existent DMA table");   
  +B36:   #1
        ports.outl((vR0.controller.dma_base+4),vR0.controller.dmatable.getStartAddress());   [ R ii. iiR] 
        if vR0.read==0 goto B92;   
  +B72:   #1
        ports.outb(vR0.controller.dma_base,8);   [ R i.. iiR] 
        goto +B108;   [ R i.. ...]
  +B92:   #1
        ports.outb(vR0.controller.dma_base,0);   [ R i.. iiR] 
  +B108:   #1
        ports.outb((vR0.controller.dma_base+2),(byte)(ports.inb((vR0.controller.dma_base+2)) | 6));   [ R iii. iiR] 
        vR0.controller.setTimeout(10,0);   [ R iii. iiR] 
        if vR0.read==0 goto B175;   
  +B163:   #1
        vR0.controller.setCommandReg(-56);   [ R .... iR.] 
        goto +B184;   [ R .... ...]
  +B175:   #1
        vR0.controller.setCommandReg(-54);   [ R .... iR.] 
  +B184:   #1
        ports.outb(vR0.controller.dma_base,(byte)(ports.inb(vR0.controller.dma_base) | 1));   [ R iii. iiR] 
        return;   
  +END:   #1
 }
// Register: rd 20/20 wr 22 swaps 8 any 0 found 0 startOperation
 
 method stopOperation()V {
  +START:   #1
        ports.outb(vR0.controller.dma_base,(byte)(ports.inb(vR0.controller.dma_base) & -2));   [  iii. iiR] 
        vR0.endOperation@this(0);   [  iii. iR.] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 6 swaps 2 any 0 found 0 stopOperation
 
 method handler()V {
  +START:   #1
        vi3 = vR0.controller.dma_base;    
        vi2 = ports.inb((vi3+2));    [??i RR i. iR] 
        ports.outb(vi3,(byte)(ports.inb(vi3) & -2));   [?ii RR ii. iiR] 
        vi1 = vR0.controller.getStatus();    [?ii RR ii. R..] 
        if (vi1 & -7)!=80 goto B113;   
  +B59:   #1
        if (vi2 & 7)!=4 goto B73;   
  +B67:   #1
        vR0.endOperation@this(1);   [iii RR ... iR.] 
        return;   
  +B73:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ... i..][ RR ... iR.]
        b0.println(b1.append@extra("").append@extra(vR0.drive.name).append@extra(": fehlerhafter DMA-Status: ").append@extra(vi2).toString@extra());   [iii RR iiii... RR...] 
  -B113:   #1
        vR0.controller.ideError(vR0.drive,"dma interrupt",vi1);   [iii RR iR..... iRRR.] 
        throw new java/lang/Error();   
  +END:   #1
 }
// Register: rd 11/11 wr 20 swaps 7 any 2 found 0 handler
}
