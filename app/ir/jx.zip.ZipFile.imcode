class jx/zip/ZipFile {
 
 method seek(I)V {
  +START:   #1
        if vi1>=0 goto B26;   
  +B4:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        throwError@special(b0.append@extra("Seeking to negative position ").append@extra(vi1).toString@extra());   [ R iR. R..]
  +B26:   #1
        vR0.mempos = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 5 swaps 1 any 1 found 0 seek
 
 method read([B)V {
  +START:   #1
        vR0.zip.copyToByteArray(vR1,0,vR0.mempos,vR1.length);   [  ii iiiRR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 1 any 0 found 0 read
 
 method <init>(Ljx/zero/ReadOnlyMemory;)V {
  +START:   #1
        vR0.<init>@special();   [ RR  R] 
        vR0.zip = vR1;   
        vR2 = new byte[22];    
        vi3 = vR1.size();    [R RR  R.] 
        vR0.seek@special((vi3-22));   [Ri RR i iR] 
        vR0.read@special(vR2);   [Ri RR i RR] 
        vi4 = makelong@special(vR2,0);    [Ri RR i iR]
        if vi4==101010256 goto B78;   
  +B48:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR . i.][ RR . iR]
        b0.println(b1.append@extra("Wrong signature=0x").append@extra(toHexString@special(vi4)).toString@extra());   [Rii RR iii. RR.] 
        return;   
  +B78:   #1
        vR0.count = makeword@special(vR2,10);   
        vi5 = makelong@special(vR2,12);    [Rii RR .... iR.]
        vR0.seek@special((vi3-(vi5+22)));   [Riii RR i... iR.] 
        vR0.dirbuf = new byte[vi5];   
        vR0.read@special(vR0.dirbuf);   [Riii RR ii.. RR.] 
        vR0.dirofs = 0;   
        vR0.current = 0;   
        return;   
  +END:   #1
 }
// Register: rd 20/20 wr 14 swaps 6 any 1 found 0 <init>
 
 method getNextEntry()Ljx/zip/ZipEntry; {
  +START:   #1
        if vR0.current!=vR0.count goto B13;   
  +B11:   #1
        return 0;   
  +B13:   #1
        vR1 = new jx/zip/ZipEntry();    [ RR  i][ RR  iR]
        vR0.current = (vR0.current+1);   
        vi2 = makelong@special(vR0.dirbuf,(vR0.dirofs+0));    [R RR Ri iR]
        if vi2==33639248 goto B94;   
  +B51:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .. i.][ RR .. iR]
        b0.println(b1.append@extra("wrong central header signature 0x").append@extra(toHexString@special(vi2)).toString@extra());   [Ri RR iii. RR.] 
        xdump@special(vR0.dirbuf,vR0.dirofs,64);   [Ri RR iiiRi iiR]
        return 0;   
  +B94:   #1
        vR1.uncompressed_size = makelong@special(vR0.dirbuf,(vR0.dirofs+24));   
        vR1.compression_method = makeword@special(vR0.dirbuf,(vR0.dirofs+10));   
        if vR1.compression_method==0 goto B145;   
  +B137:   #1
        out.println("Compression not supported.");   [Ri RR i.... RR.] 
  +B145:   #1
        vi3 = makeword@special(vR0.dirbuf,(vR0.dirofs+28));    [Ri RR Ri... iR.]
        vi4 = makeword@special(vR0.dirbuf,(vR0.dirofs+30));    [Rii RR RiRi. iR.]
        vi5 = makeword@special(vR0.dirbuf,(vR0.dirofs+32));    [Riii RR RiRiRi iR.]
        vi6 = makelong@special(vR0.dirbuf,(vR0.dirofs+42));    [Riiii RR RiRiRiRi iR.]
        vR0.seek@special(vi6);   [Riiiii RR RiRiRiRi iR.] 
        vR7 = new byte[30];    
        vR0.read@special(vR7);   [RiiiiiR RR RiRiRiRi RR.] 
        if makelong@special(vR7,0)==67324752 goto B255;   
  +B237:   #1
        out.println("wrong local header signature");   [RiiiiiR RR i....... RR.] 
        xdump@special(vR7,0,30);   [RiiiiiR RR i....... iiR]
        return 0;   
  +B255:   #1
        vi8 = (((vi6+30)+makeword@special(vR7,26))+makeword@special(vR7,28));    
        vR1.filename = makestring@special(vR0.dirbuf,(vR0.dirofs+46),vi3);   
        if vR1.compression_method==0 goto B353;   
  -B304:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ........ i..][ RR ........ iR.]
        b0.println(b1.append@extra("File ").append@extra(vR1.filename).append@extra(" is compressed.").toString@extra());   [RiiiiiRi RR iiii.... RR..] 
        out.println("Compression not supported.");   [RiiiiiRi RR iiiii... RR..] 
        throw new java/lang/Error();   
  +B353:   #1
        vR1.data = vR0.zip.getReadOnlySubRange(vi8,vR1.uncompressed_size);   
        vR0.dirofs = (vR0.dirofs+(((vi3+46)+vi4)+vi5));   
        return vR1;   
  +END:   #1
 }
// Register: rd 47/47 wr 51 swaps 11 any 2 found 0 getNextEntry
 
 method makeword([BI)I {
  +START:   #1
        return ((vR0[(vi1+1)] << 8) | (vR0[vi1] & 255));   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 makeword
 
 method makelong([BI)I {
  +START:   #1
        return (((((vR0[(vi1+3)] << 24) & -16777216) | ((vR0[(vi1+2)] << 16) & 16711680)) | ((vR0[(vi1+1)] << 8) & 65280)) | (vR0[(vi1+0)] & 255));   
  +END:   #1
 }
// Register: rd 8/8 wr 0 swaps 0 any 0 found 0 makelong
 
 method makestring([BII)Ljava/lang/String; {
  +START:   #1
        return new java/lang/String(vR0,vi1,vi2);   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 makestring
}
