class java/text/DefaultBreakIterator {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.broke_before_next = -1;   
        vR0.broke_before_previous = -1;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>([Ljava/lang/String;Z)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.breaks = vR1;   
        vR0.before_and_after = vi2;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method current()I {
  +START:   #1
        return vR0.ci.getIndex();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 current
 
 method first()I {
  +START:   #1
        vR0.broke_before_next = -1;   
        vR0.broke_before_previous = -1;   
        if vR0.ci.first()!=65535 goto B26;   
  +B24:   #1
        return -1;   
  +B26:   #1
        return vR0.ci.getIndex();   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 first
 
 method last()I {
  +START:   #1
        vR0.broke_before_next = -1;   
        vR0.broke_before_previous = -1;   
        if vR0.ci.last()!=65535 goto B26;   
  +B24:   #1
        return -1;   
  +B26:   #1
        return vR0.ci.getIndex();   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 last
 
 method next()I {
  +START:   #1
        vR0.broke_before_previous = -1;   
        if vR0.breaks!=null goto B38;   
  +B12:   #1
        if vR0.ci.next()!=65535 goto B28;   
  +B26:   #1
        return -1;   
  +B28:   #1
        return vR0.ci.getIndex();   
  +B38:   #1
        if vR0.broke_before_next==-1 goto B93;   
  +B46:   #1
        vR0.ci.setIndex((vR0.ci.getIndex()+vR0.breaks[vR0.broke_before_next].length@extra()));   [ R i iR] 
        vR0.broke_before_next = -1;   
        return vR0.ci.getIndex();   
  +B93:   #1
        vR1 = new java/lang/StringBuffer("");    [ R . i.][ R . iRR]
        vi2 = vR0.ci.getIndex();    [R R . R..] 
  +B113:   #1
        vi3 = vR0.ci.next();    [Ri R . R..] 
        if vi3!=65535 goto B131;   
  +B129:   #1
        return -1;   
  +B131:   #1
        vR1.append(vi3);   [Rii R . iR.] 
        vi4 = 0;    
  +B140:   #1
        if vi4>=vR0.breaks.length goto B268;   
  +B150:   #1
        if vR0.breaks[vi4].equals@extra(vR1.toString())==0 goto B242;   
  +B167:   #1
        if vR0.before_and_after==0 goto B222;   
  +B174:   #1
        vR0.broke_before_next = vi4;   
        vR0.ci.setIndex(((vR0.ci.getIndex()-vR0.breaks[vi4].length@extra())+1));   [Riii R i iR.] 
        return vR0.ci.getIndex();   
  +B222:   #1
        vR0.ci.next();   [Riii R . R..] 
        return vR0.ci.getIndex();   
  +B242:   #1
        if vR0.breaks[vi4].startsWith@extra(vR1.toString())==0 goto B262;   
  +B259:   #1
        goto +B268;   [Riii R . ...]
  +B262:   #1
        vi4++;   
        goto +B140;   [Riii R . ...]
  +B268:   #2
        if vi4!=vR0.breaks.length goto B288;   
  +B278:   #1
        vR1 = new java/lang/StringBuffer("");    [ R . i..][ R . iRR]
  +B288:   #1
        goto +B113;   [Riii R . ...]
  +END:   #1
 }
// Register: rd 40/40 wr 14 swaps 4 any 4 found 0 next
 
 method next(I)I {
  +START:   #1
        vi2 = 0;    
  +B2:   #1
        if vi2>=vi1 goto B23;   
  +B7:   #1
        if vR0.next@this()!=-1 goto B17;   
  +B15:   #1
        return -1;   
  +B17:   #1
        vi2++;   
        goto +B2;   [i   .]
  +B23:   #1
        return vR0.current@this();   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 2 found 0 next
 
 method previous()I {
  +START:   #1
        vR0.broke_before_next = -1;   
        if vR0.breaks!=null goto B38;   
  +B12:   #1
        if vR0.ci.previous()!=65535 goto B28;   
  +B26:   #1
        return -1;   
  +B28:   #1
        return vR0.ci.getIndex();   
  +B38:   #1
        if vR0.broke_before_previous==-1 goto B93;   
  +B46:   #1
        vR0.ci.setIndex((vR0.ci.getIndex()-vR0.breaks[vR0.broke_before_previous].length@extra()));   [ R i iR] 
        vR0.broke_before_previous = -1;   
        return vR0.ci.getIndex();   
  +B93:   #1
        vR1 = new java/lang/StringBuffer("");    [ R . i.][ R . iRR]
        vi2 = vR0.ci.getIndex();    [R R . R..] 
  +B113:   #1
        vi3 = vR0.ci.previous();    [Ri R . R..] 
        if vi3!=65535 goto B131;   
  +B129:   #1
        return -1;   
  +B131:   #1
        vR1.insert(0,vi3);   [Rii R . iiR] 
        vi4 = 0;    
  +B141:   #1
        if vi4>=vR0.breaks.length goto B268;   
  +B151:   #1
        if vR0.breaks[vi4].equals@extra(vR1.toString())==0 goto B242;   
  +B168:   #1
        if vR0.before_and_after==0 goto B221;   
  +B175:   #1
        vR0.broke_before_previous = vi4;   
        vR0.ci.setIndex((vR0.ci.getIndex()+vR0.breaks[vi4].length@extra()));   [Riii R i iR.] 
        return vR0.ci.getIndex();   
  +B221:   #1
        return (vR0.ci.getIndex()+vR0.breaks[vi4].length@extra());   
  +B242:   #1
        if vR0.breaks[vi4].startsWith@extra(vR1.toString())==0 goto B262;   
  +B259:   #1
        goto +B268;   [Riii R . ...]
  +B262:   #1
        vi4++;   
        goto +B141;   [Riii R . ...]
  +B268:   #2
        if vi4!=vR0.breaks.length goto B288;   
  +B278:   #1
        vR1 = new java/lang/StringBuffer("");    [ R . i..][ R . iRR]
  +B288:   #1
        goto +B113;   [Riii R . ...]
  +END:   #1
 }
// Register: rd 42/42 wr 15 swaps 4 any 4 found 0 previous
 
 method previous(I)I {
  +START:   #1
        vi2 = 0;    
  +B2:   #1
        if vi2>=vi1 goto B23;   
  +B7:   #1
        if vR0.previous@this()!=-1 goto B17;   
  +B15:   #1
        return -1;   
  +B17:   #1
        vi2++;   
        goto +B2;   [i   .]
  +B23:   #1
        return vR0.current@this();   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 2 found 0 previous
 
 method following(I)I {
  +START:   #1
        vR0.broke_before_next = -1;   
        vR0.broke_before_previous = -1;   
        vR0.ci.setIndex(vi1);   [   iR] 
        return vR0.next@this();   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 following
 
 method preceding(I)I {
  +START:   #1
        vR0.broke_before_next = -1;   
        vR0.broke_before_previous = -1;   
        vR0.ci.setIndex(vi1);   [   iR] 
        return vR0.previous@this();   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 preceding
 
 method getText()Ljava/text/CharacterIterator; {
  +START:   #1
        return vR0.ci;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getText
 
 method setText(Ljava/text/CharacterIterator;)V {
  +START:   #1
        vR0.ci = vR1;   
        vR0.broke_before_next = -1;   
        vR0.broke_before_previous = -1;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 setText
 
 method isBoundary(I)Z {
  +START:   #1
        if vR0.breaks!=null goto B9;   
  +B7:   #1
        return 1;   
  +B9:   #1
        vi2 = vR0.ci.getIndex();    [ R  R] 
        vR0.ci.setIndex(vi1);   [i R  iR] 
        vR3 = new java/lang/StringBuffer("");    [ R  i.][ R . iRR]
  +B40:   #1
        vi4 = vR0.ci.next();    [iR R . R..] 
        if vi4!=65535 goto B60;   
  +B58:   #1
        return 0;   
  +B60:   #1
        vR3.append(vi4);   [iRi R . iR.] 
        vi5 = 0;    
  +B70:   #1
        if vi5>=vR0.breaks.length goto B136;   
  +B80:   #1
        if vR0.breaks[vi5].equals@extra(vR3.toString())==0 goto B110;   
  +B97:   #1
        vR0.ci.setIndex(vi2);   [iRii R . iR.] 
        return 1;   
  +B110:   #1
        if vR0.breaks[vi5].startsWith@extra(vR3.toString())==0 goto B130;   
  +B127:   #1
        goto +B136;   [iRii R . ...]
  +B130:   #1
        vi5++;   
        goto +B70;   [iRii R . ...]
  +B136:   #2
        if vi5!=vR0.breaks.length goto B159;   
  +B146:   #1
        vR0.ci.setIndex(vi2);   [iRii R . iR.] 
        return 0;   
  +B159:   #1
        goto +B40;   [iRii R . ...]
  +END:   #1
 }
// Register: rd 20/20 wr 8 swaps 2 any 4 found 0 isBoundary
}
