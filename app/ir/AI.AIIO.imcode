class AI/AIIO {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        b1 = new AI/AIMemory();    [ ?R  i][ ?R  iR]
        vR0.mem = b1;   
        vR0.mem.setLogPath("/AI/");   [ ?R i RR] 
        b1 = new AI/AIInput(vR0.mem);    [ ?R i i.][ ?R i. iRR]
        vR0.inp = b1;   
        b1 = new AI/AIOutput(vR0.mem);    [ ?R i. i..][ ?R i. iRR]
        vR0.out = b1;   
        b1 = new java/lang/Thread(vR0.inp,"input");    [ ?R i. i..][ ?R i. iRRR]
        vR0.inpThread = b1;   
        b1 = new java/lang/Thread(vR0.out,"output");    [ ?R i. i...][ ?R i. iRRR]
        vR0.outThread = b1;   
        return;   
  +END:   #1
 }
// Register: rd 20/20 wr 10 swaps 1 any 0 found 0 <init>
 
 method start()V {
  +START:   #1
        vR0.inpThread.start();   [   R] 
        vR0.outThread.start();   [   R] 
        vR0.mem.ImportBackup("/ai");   [  i RR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 start
 
 method getMemory()LAI/AIMemory; {
  +START:   #1
        return vR0.mem;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMemory
}
