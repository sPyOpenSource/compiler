class java/util/Spliterator$OfInt {
 
 method forEachRemaining(Ljava/util/function/IntConsumer;)V {
  +START:   #2
        if vR0.tryAdvance(vR1)!=0 goto START;   
  +B10:   #1
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 forEachRemaining
 
 method tryAdvance(Ljava/util/function/Consumer;)Z {
  +START:   #1
        if (vR1 instanceof java/util/function/IntConsumer)==0 goto B18;   
  +B7:   #1
        return vR0.tryAdvance((java/util/function/IntConsumer)(vR1));   
  +B18:   #1
        b0 = vR0;    
        requireNonNull@special(vR1);   [ R  R.]
        <operant>;   
        <operant>;   
        <operant>;   
        return vR1.tryAdvance(2);   
  +END:   #1
 }
// Register: rd 6/6 wr 1 swaps 0 any 1 found 1 tryAdvance
 
 method forEachRemaining(Ljava/util/function/Consumer;)V {
  +START:   #1
        if (vR1 instanceof java/util/function/IntConsumer)==0 goto B20;   
  +B7:   #1
        vR0.forEachRemaining((java/util/function/IntConsumer)(vR1));   [ R  RR] 
        goto +B37b0;   forward return[ R  ..]
  +B20:   #1
        b0 = vR0;    
        requireNonNull@special(vR1);   [ R  R.]
        <operant>;   
        <operant>;   
        <operant>;   
        vR1.forEachRemaining(2);   [ R  iR] 
  +B37b0:   #1 reference
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 1 swaps 0 any 1 found 1 forEachRemaining
 
 method forEachRemaining(Ljava/lang/Object;)V {
  +START:   #1
        vR0.forEachRemaining((java/util/function/IntConsumer)(vR1));   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 1 forEachRemaining
 
 method tryAdvance(Ljava/lang/Object;)Z {
  +START:   #1
        return vR0.tryAdvance((java/util/function/IntConsumer)(vR1));   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 1 tryAdvance
 
 method trySplit()Ljava/util/Spliterator$OfPrimitive; {
  +START:   #1
        return vR0.trySplit();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 trySplit
 
 method trySplit()Ljava/util/Spliterator; {
  +START:   #1
        return vR0.trySplit();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 trySplit
}
