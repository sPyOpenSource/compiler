class org/jnode/driver/block/usb/storage/scsi/USBStorageSCSIDriver {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method startDevice(Ljx/devices/Device;)V {
  +START:   #1
        vR0.locked = 0;   
        vR0.changed = 1;   
        vR0.capacity = 0;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 startDevice
 
 method stopDevice()V {
  +START:   #2
        vR0.unlock@this();   [ R  R] 
  +B4:   #1
        goto +B20;   forward return[ R  .]
  -H7<caught exception>:   #2 reference
        vR1 = <caught exception>;    
        throw new java/lang/Exception(vR1);   
  +H17<caught exception>:   #1 reference
        vR2 = <caught exception>;    
  -B18:   #1
        throw vR2;   
  +B20:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 4 handler 7 type 23
0 - 4 handler 17 type 0
7 - 18 handler 17 type 0
 }
// Register: rd 4/4 wr 3 swaps 0 any 0 found 0 stopDevice
 
 method getSectorSize()I {
  +START:   #1
        vR0.processChanged@special();   [   R] 
        return vR0.capacity.getBlockLength@extra();   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 getSectorSize
 
 method getPartitionTableEntry()Lbioide/PartitionEntry; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getPartitionTableEntry
 
 method getLength()J {
  +START:   #1
        vR0.processChanged@special();   [   R] 
        return (long)(vR0.capacity.getBlockLength@extra() & vR0.capacity.getLogicalBlockAddress@extra());   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getLength
 
 method read(JLjava/nio/ByteBuffer;)V {
  +START:   #1
        vR0.processChanged@special();   [ R  R] 
        if vR0.capacity!=null goto B21;   
  -B11:   #1
        throw new java/io/IOException("No medium");   
  +B21:   #1
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 read
 
 method write(JLjava/nio/ByteBuffer;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 write
 
 method flush()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 flush
 
 method requestCompleted(Lorg/jnode/driver/bus/usb/USBRequest;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 requestCompleted
 
 method requestFailed(Lorg/jnode/driver/bus/usb/USBRequest;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 requestFailed
 
 method unlock()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 unlock
 
 method processChanged()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 processChanged
 
 method canLock()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 canLock
 
 method canEject()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 canEject
 
 method lock()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 lock
 
 method isLocked()Z {
  +START:   #1
        return vR0.locked;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isLocked
 
 method eject()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 eject
 
 method load()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 load
}
