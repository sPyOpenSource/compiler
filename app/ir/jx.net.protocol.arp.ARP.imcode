class jx/net/protocol/arp/ARP {
 
 method <init>(Ljx/net/protocol/ether/Ether;Ljx/net/protocol/ip/IP;Ljx/timer/TimerManager;Z)V {
  +START:   #1
        vR0.<init>@special();   [ ?RRR  R] 
        vR0.ipLayer = 0;   
        vR0.ethernet = vR1;   
        vR0.ipLayer = vR2;   
        vR0.sendARPs = vi4;   
        vR0.memoryManager = (jx/zero/MemoryManager)(getInitialNaming@special().lookup("MemoryManager"));   
        vR0.cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        vR0.event_rcv = vR0.cpuManager.createNewEvent("ARPRcv");   
        vR0.ownHardwareAddress = vR1.getMacAddress();   
        if vR0.ipLayer==null goto B100;   
  +B89:   #1
        vR0.ownProtocolAddress = vR0.ipLayer.getOwnAddress();   
  +B100:   #1
        b1 = new jx/net/protocol/arp/ARPCache(vR0,vR3);    [ ?RRR ... i.][ ?RRR ... iRRR]
        vR0.arpCache = b1;   
        if vi4==0 goto B143;   
  +B118:   #1
        b2 = new jx/net/protocol/arp/ARPTimer(vR3);    [ ?RRR ... i...][ ?RRR ... iRR.]
        b3 = new jx/net/protocol/arp/ARPTimerArg(vR0);    [ ?RRR ... i...][ ?RRR ... iRR.]
        vR3.addMillisTimer(900000,b2,b3);   [ ?RRR ... RRiR] 
  +B143:   #1
        return;   
  +END:   #1
 }
// Register: rd 32/32 wr 13 swaps 3 any 1 found 0 <init>
 
 method register(Ljava/lang/Object;)Z {
  +START:   #1
        if vR0.ipLayer==null goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR0.ipLayer = (jx/net/protocol/ip/IP)(vR1);   
        vR0.ownProtocolAddress = vR0.ipLayer.getOwnAddress();   
        return 1;   
  +END:   #1
 }
// Register: rd 6/6 wr 0 swaps 0 any 0 found 1 register
 
 method notifyAddressChange(Ljava/lang/Object;)V {
  +START:   #1
        if vR0.ipLayer==null goto B18;   
  +B7:   #1
        vR0.ownProtocolAddress = vR0.ipLayer.getOwnAddress();   
  +B18:   #1
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 notifyAddressChange
 
 method requiresSpace()I {
  +START:   #1
        return (requiresSpace@special()+requiresSpace@special());   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 requiresSpace
 
 method add([B[B)V {
  +START:   #1
        vR0.arpCache.add(vR1,vR2);   [   RRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 add
 
 method lookup([B)[B {
  +START:   #1
        return vR0.arpCache.lookup(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 lookup
 
 method lookup(Ljx/net/IPAddress;)[B {
  +START:   #1
        return vR0.arpCache.lookup(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 lookup
 
 method clearCache()V {
  +START:   #1
        vR0.arpCache.clearAll();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 clearCache
 
 method byteCompare([B[B)Z {
  +START:   #1
        if vR1.length==vR2.length goto B17;   
  +B7:   #1
        out.println("ARP.byteCompare: the arrays have different size");   [  i. RR] 
        return 0;   
  +B17:   #1
        vi3 = 0;    
  +B19:   #1
        if vi3>=vR1.length goto B42;   
  +B25:   #1
        if vR1[vi3]==vR2[vi3] goto B36;   
  +B34:   #1
        return 0;   
  +B36:   #1
        vi3++;   
        goto +B19;   [i  .. ..]
  +B42:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 9/9 wr 4 swaps 1 any 2 found 0 byteCompare
 
 method sendQuery([B)V {
  +START:   #1
        out.println("   send arp query...");   [ R i. RR] 
        vR2 = vR0.memoryManager.alloc(1514);    [ R i. iR] 
        vR3 = new jx/zero/Memory()[3];    
        vR4 = new jx/net/protocol/arp/ARPFormat(vR2,14);    [ R i. i.][ R i. iiRR]
        vR4.insertHardwareAddressSpace(1);   [RRR R i. iR..] 
        vR4.insertProtocolAddressSpace(2048);   [RRR R i. iR..] 
        vR4.insertHardwareAddressLen(6);   [RRR R i. iR..] 
        vR4.insertProtocolAddressLen(4);   [RRR R i. iR..] 
        vR4.insertCommand(1);   [RRR R i. iR..] 
        vR4.insertSenderHardwareAddress(vR0.ownHardwareAddress);   [RRR R ii RR..] 
        if vR0.ownProtocolAddress==null goto B96;   
  +B87:   #1
        vR4.insertSenderProtocolAddress(vR0.ownProtocolAddress);   [RRR R i. RR..] 
  +B96:   #1
        vR4.insertTargetProtocolAddress(vR1);   [RRR R .. RR..] 
        vR0.ethernet.transmitARPBroadcast(vR2);   [RRR R .. RR..] 
        return;   
  +END:   #1
 }
// Register: rd 15/15 wr 8 swaps 3 any 0 found 0 sendQuery
 
 method processEther(Ljx/net/EtherData;)Ljx/zero/Memory; {
  +START:   #1
        vR2 = new jx/net/protocol/arp/ARPFormat(vR1.getMemory(),vR1.getOffset());    [ RR  i][ RR . iiRR]
        vR0.cpuManager.recordEvent(vR0.event_rcv);    
        if vR0.ownProtocolAddress!=null goto B55;   
  +B40:   #1
        out.println("ARP: I don't know who I am");   [R RR i. RR..] 
        return vR1.getMemory();   
  +B55:   #1
        if vR2.getCommand()!=1 goto B220;   
  +B63:   #1
        if vR2.getHardwareAddressSpace()!=1 goto B220;   
  +B71:   #1
        if vR2.getProtocolAddressSpace()!=2048 goto B220;   
  +B81:   #1
        vR3 = vR2.getTargetProtocolAddress();    [R RR .. R...] 
        if vR3.equals(vR0.ownProtocolAddress)==0 goto B217;   
  +B97:   #1
        vR4 = vR2.getSenderHardwareAddress();    [RR RR .. R...] 
        vR5 = vR2.getSenderProtocolAddress();    [RRR RR .. R...] 
        vR2 = 0;    
        vR6 = vR1.getMemory();    [RRRR RR .. R...] 
        vR7 = new jx/net/protocol/arp/ARPFormat(vR6,requiresSpace@special());    [ RR .. i...][ RR .. iiRR]
        vR7.insertHardwareAddressSpace(1);   [RRRRRR RR .. iR..] 
        vR7.insertProtocolAddressSpace(2048);   [RRRRRR RR .. iR..] 
        vR7.insertHardwareAddressLen(6);   [RRRRRR RR .. iR..] 
        vR7.insertProtocolAddressLen(4);   [RRRRRR RR .. iR..] 
        vR7.insertCommand(2);   [RRRRRR RR .. iR..] 
        vR7.insertSenderHardwareAddress(vR0.ownHardwareAddress);   [RRRRRR RR i. RR..] 
        vR7.insertSenderProtocolAddress(vR0.ownProtocolAddress);   [RRRRRR RR ii RR..] 
        vR7.insertTargetHardwareAddress(vR4);   [RRRRRR RR ii RR..] 
        vR7.insertTargetProtocolAddress(vR5);   [RRRRRR RR ii RR..] 
        return vR0.ethernet.transmitSpecial(vR0.ownHardwareAddress,vR4,2054,vR6);   
  +B217:   #1
        goto +B292;   forward return[RRRRRR RR ... .....]
  +B220:   #3
        if vR2.getCommand()!=2 goto B264;   
  +B228:   #1
        if vR2.getHardwareAddressSpace()!=1 goto B264;   
  +B236:   #1
        if vR2.getProtocolAddressSpace()!=2048 goto B264;   
  +B246:   #1
        vR0.arpCache.add(vR2.getSenderHardwareAddress(),vR2.getSenderProtocolAddress());   [RRRRRR RR iR. RRR..] 
        goto +B292;   forward return[RRRRRR RR iR. .....]
  +B264:   #3
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ... i....][ RR ... iR...]
        b0.println(b1.append@extra("Unknown ARP command:").append@extra(vR2.getCommand()).toString@extra());   [RRRRRR RR iii. RR...] 
  +B292:   #2
        return vR1.getMemory();   
  +END:   #1
 }
// Register: rd 40/40 wr 25 swaps 9 any 0 found 0 processEther
 
 method processMemory(Ljx/zero/Memory;)Ljx/zero/Memory; {
  +START:   #1
        vR1 = vR1.revoke();    [ R  R] 
        vR2 = new jx/net/protocol/arp/ARPFormat(vR1,0);    [ R  i][ R . iiRR]
        vR0.cpuManager.recordEvent(vR0.event_rcv);    
        if vR0.ownProtocolAddress!=null goto B47;   
  +B37:   #1
        out.println("ARP: I don't know who I am");   [R R i. RR..] 
        return vR1;   
  +B47:   #1
        if vR2.getCommand()!=1 goto B212;   
  +B55:   #1
        if vR2.getHardwareAddressSpace()!=1 goto B212;   
  +B63:   #1
        if vR2.getProtocolAddressSpace()!=2048 goto B212;   
  +B73:   #1
        vR3 = vR2.getTargetProtocolAddress();    [R R .. R...] 
        if vR3.equals(vR0.ownProtocolAddress)==0 goto B209;   
  +B89:   #1
        vR4 = vR2.getSenderHardwareAddress();    [RR R .. R...] 
        vR5 = vR2.getSenderProtocolAddress();    [RRR R .. R...] 
        vR2 = 0;    
        vR6 = vR1.joinPrevious();    [RRRR R .. R...] 
        vR7 = new jx/net/protocol/arp/ARPFormat(vR6,requiresSpace@special());    [ R .. i...][ R .. iiRR]
        vR7.insertHardwareAddressSpace(1);   [RRRRRR R .. iR..] 
        vR7.insertProtocolAddressSpace(2048);   [RRRRRR R .. iR..] 
        vR7.insertHardwareAddressLen(6);   [RRRRRR R .. iR..] 
        vR7.insertProtocolAddressLen(4);   [RRRRRR R .. iR..] 
        vR7.insertCommand(2);   [RRRRRR R .. iR..] 
        vR7.insertSenderHardwareAddress(vR0.ownHardwareAddress);   [RRRRRR R i. RR..] 
        vR7.insertSenderProtocolAddress(vR0.ownProtocolAddress);   [RRRRRR R ii RR..] 
        vR7.insertTargetHardwareAddress(vR4);   [RRRRRR R ii RR..] 
        vR7.insertTargetProtocolAddress(vR5);   [RRRRRR R ii RR..] 
        return vR0.ethernet.transmitSpecial(vR0.ownHardwareAddress,vR4,2054,vR6);   
  +B209:   #1
        goto +B264;   forward return[RRRRRR R ... .....]
  +B212:   #3
        if vR2.getCommand()!=2 goto B256;   
  +B220:   #1
        if vR2.getHardwareAddressSpace()!=1 goto B256;   
  +B228:   #1
        if vR2.getProtocolAddressSpace()!=2048 goto B256;   
  +B238:   #1
        vR0.arpCache.add(vR2.getSenderHardwareAddress(),vR2.getSenderProtocolAddress());   [RRRRRR R iR. RRR..] 
        goto +B264;   forward return[RRRRRR R iR. .....]
  +B256:   #3
        out.println("Unknown ARP command!");   [RRRRRR R i.. RR...] 
  +B264:   #2
        return vR1;   
  +END:   #1
 }
// Register: rd 37/37 wr 21 swaps 7 any 0 found 0 processMemory
}
