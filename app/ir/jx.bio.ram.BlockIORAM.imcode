class jx/bio/ram/BlockIORAM {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special(5000);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        b1 = new jx/timerpc/SleepManagerImpl();    [ ?R  i][ ?R  iR]
        vR0.sleepManager = b1;   
        vR0.capacity = vi1;   
        vR2 = (jx/zero/MemoryManager)(getInitialNaming@special().lookup("MemoryManager"));    
        vR0.buffer = vR2.alloc((1024*vR0.capacity));   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 6 swaps 1 any 0 found 0 <init>
 
 method <init>(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        b1 = new jx/timerpc/SleepManagerImpl();    [ ?R  i][ ?R  iR]
        vR0.sleepManager = b1;   
        vR0.capacity = (vR1.size() >> 10);   
        vR0.buffer = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 1 swaps 0 any 0 found 0 <init>
 
 method init(Ljx/zero/Naming;[Ljava/lang/String;)V {
  +START:   #1
        vR2 = (jx/zero/debug/DebugChannel)(vR0.lookup("DebugChannel0"));    
        b0 = new jx/zero/debug/DebugPrintStream;    
        b1 = b0;    
        b2 = new jx/zero/debug/DebugOutputStream(vR2);    [ RRR i. i.][ RRR i. iRR]
        b1.<init>@special(b2);   [R RRR i. RR.] 
        out = b0;   
        main@special(vR1);   [R RRR i. R..]
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 7 swaps 1 any 1 found 1 init
 
 method main([Ljava/lang/String;)V {
  +START:   #1
        vR1 = getInitialNaming@special();    
        vR2 = (jx/zero/CPUManager)(vR1.lookup("CPUManager"));    
        vR3 = vR0[0];    
        vR4 = new jx/bio/ram/BlockIORAM(20480);    [ RR i. i.][ RR i. iiR]
        vR1.registerPortal(vR4,vR3);   [RRRR RR i. RRR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR i. i..][ RR i. iR.]
        b0.println(b1.append@extra("Block I/O device registered as ").append@extra(vR3).toString@extra());   [RRRR RR iii. RR.] 
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 13 swaps 3 any 0 found 0 main
 
 method getCapacity()I {
  +START:   #1
        return vR0.capacity;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCapacity
 
 method getSectorSize()I {
  +START:   #1
        return 512;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getSectorSize
 
 method readSectors(IILjx/zero/Memory;Z)V {
  +START:   #1
        if (vi1+vi2)<=vR0.capacity goto B78;   
  -B10:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("read attempted out of storage range: startSector=").append@extra(vi1).append@extra(", numberOfSectors=").append@extra(vi2).append@extra(", buf.size()=").append@extra(vR3.size()).append@extra(", capacity=").append@extra(vR0.capacity).toString@extra());   [ RR iii..iiii..... RR.......] 
        throw new java/lang/Error();   
  +B78:   #1
        vR3.copyFromMemory(vR0.buffer,(vi1*512),0,(vi2*512));   [ RR iii........... iiiRR....] 
        vR0.sleepManager.mdelay(3);   [ RR iii........... iR.......] 
        return;   
  +END:   #1
 }
// Register: rd 12/12 wr 20 swaps 8 any 1 found 0 readSectors
 
 method writeSectors(IILjx/zero/Memory;Z)V {
  +START:   #1
        if (vi1+vi2)<=vR0.capacity goto B26;   
  -B10:   #1
        out.println("write attempted out of storage range");   [ R i. RR] 
        throw new java/lang/Error();   
  +B26:   #1
        vR3.copyToMemory(vR0.buffer,0,(vi1*512),(vi2*512));   [ R iii iiiRR] 
        vR0.sleepManager.mdelay(3);   [ R iii iR...] 
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 5 swaps 2 any 1 found 0 writeSectors
}
