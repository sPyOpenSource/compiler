class java/lang/invoke/AbstractValidatingLambdaMetafactory {
 
 method <init>(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/invoke/MethodType;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;Z[Ljava/lang/Class;[Ljava/lang/invoke/MethodType;)V {
  +START:   #1
        vR0.<init>@special();   [ RiRR  R] 
        vR0.targetClass = 0;   
        vR0.invokedType = vR2;   
        vR0.samBase = vR2.returnType@extra();   
        vR0.samMethodName = vR3;   
        vR0.samMethodType = vR4;   
        vR0.implMethod = vR5;   
        vR0.implInfo = 0;   
        vR0.implKind = vR0.implInfo.getReferenceKind();   
        b0 = vR0;    
        if vR0.implKind==0 goto B79;   
  +B65b0:   #1 reference
        if vR0.implKind==0 goto B79;   
  +B72b0:   #1 reference
        if vR0.implKind!=0 goto B83;   
  +B79b0:   #2 reference
        b1 = 1;    
        goto +B84b0b1;   [ RiRR  .]
  +B83b0:   #1 reference
        b1 = 0;    
  +B84b0b1:   #1 reference int
        b0.implIsInstanceMethod = b1;   
        vR0.implDefiningClass = vR0.implInfo.getDeclaringClass();   
        vR0.implMethodType = vR0.implInfo.getMethodType();   
        vR0.instantiatedMethodType = vR6;   
        vR0.isSerializable = vi7;   
        vR0.markerInterfaces = vR8;   
        vR0.additionalBridges = vR9;   
        if vR0.samBase.isInterface@extra()!=0 goto B174;   
  -B147:   #1
        b0 = new java/lang/invoke/LambdaConversionException;    
        b1 = b0;    
        b2 = "Functional interface %s is not an interface";    
        b3 = new java/lang/Object()[1];    
        b3[0] = vR0.samBase.getName@extra();   
        b1.<init>@special(format@special(b2,b3));   [ RRRR i RR] 
        throw b0;   
  +B174:   #1
        vR10 = vR8;    
        vi11 = vR10.length;    
        vi12 = 0;    
  +B186:   #1
        if vi12>=vi11 goto B239;   
  +B193:   #1
        vR13 = vR10[vi12];    
        if vR13.isInterface@extra()!=0 goto B233;   
  -B208:   #1
        b0 = new java/lang/invoke/LambdaConversionException;    
        b1 = b0;    
        b2 = "Marker interface %s is not an interface";    
        b3 = new java/lang/Object()[1];    
        b3[0] = vR13.getName@extra();   
        b1.<init>@special(format@special(b2,b3));   [RiiR RRRR i RR] 
        throw b0;   
  +B233:   #1
        vi12++;   
        goto +B186;   [RiiR RRRR . ..]
  +B239:   #1
        return;   
  +END:   #1
 }
// Register: rd 56/56 wr 17 swaps 2 any 6 found 0 <init>
 
 method validateMetafactoryArgs()V {
  +START:   #1
        vi1 = vR0.implMethodType.parameterCount@extra();    [ iRRR  R] 
        if vR0.implIsInstanceMethod==0 goto B19;   
  +B15:   #1
        b0 = 1;    
        goto +B20b0;   [i iRRR  .]
  +B19:   #1
        b0 = 0;    
  +B20b0:   #1 int
        vi2 = b0;    
        vi3 = vR0.invokedType.parameterCount@extra();    [ii iRRR  R] 
        vi4 = vR0.samMethodType.parameterCount@extra();    [iii iRRR  R] 
        vi5 = vR0.instantiatedMethodType.parameterCount@extra();    [iiii iRRR  R] 
        if vR0.implIsInstanceMethod==0 goto B196;   
  +B54:   #1
        if vi3!=0 goto B77;   
  +B58:   #1
        vi6 = 0;    
        vi7 = 1;    
        vR8 = vR0.instantiatedMethodType.parameterType@extra(0);    [iiiiiii iRRR  iR] 
        goto +B93;   [iiiiiiiR iRRR  ..]
  +B77:   #1
        vi6 = 1;    
        vi7 = 0;    
        vR8 = vR0.invokedType.parameterType@extra(0);    [iiiiiiiiiRRRRiiR iRRR  iR] 
  +B93:   #1
        if vR0.implDefiningClass.isAssignableFrom@extra(vR8)!=0 goto B134;   
  -B105:   #1
        b0 = new java/lang/invoke/LambdaConversionException;    
        b1 = b0;    
        b2 = "Invalid receiver type %s; not a subtype of implementation type %s";    
        b3 = new java/lang/Object()[2];    
        b3[0] = vR8;   
        b3[1] = vR0.implDefiningClass;   
        b1.<init>@special(format@special(b2,b3));   [iiiiiiiR RRRR i RR] 
        throw b0;   
  +B134:   #1
        vR9 = vR0.implMethod.type().parameterType@extra(0);    [iiiiiiiR RRRR . iR] [iiiiiiiR RRRR R iR] 
        if vR9==vR0.implDefiningClass goto B193;   
  +B156:   #1
        if vR9.isAssignableFrom@extra(vR8)!=0 goto B193;   
  -B166:   #1
        b0 = new java/lang/invoke/LambdaConversionException;    
        b1 = b0;    
        b2 = "Invalid receiver type %s; not a subtype of implementation receiver type %s";    
        b3 = new java/lang/Object()[2];    
        b3[0] = vR8;   
        b3[1] = vR9;   
        b1.<init>@special(format@special(b2,b3));   [iiiiiiiRR RRRR i RR] 
        throw b0;   
  +B193:   #2
        goto +B202;   [iiiiiiiRR RRRR . ..]
  +B196:   #1
        vi6 = 0;    
        vi7 = 0;    
  +B202:   #1
        vi8 = (vi3-vi6);    
        vi9 = 0;    
  +B211:   #1
        if vi9>=vi8 goto B249;   
  +B218:   #1
        vR10 = vR0.implMethodType.parameterType@extra(vi9);    [iiiiiiiii RRRR . iR] 
        vR11 = vR0.invokedType.parameterType@extra((vi9+vi6));    [iiiiiiiiiR RRRR i iR] 
        vi9++;   
        goto +B211;   [iiiiiiiiiRR RRRR i ..]
  +B249:   #1
        vi9 = (vi7-vi8);    
        vi10 = vi8;    
  +B260:   #1
        if vi10>=vi1 goto B297;   
  +B266:   #1
        vR11 = vR0.implMethodType.parameterType@extra(vi10);    [iiiiiiiiiiR RRRR . iR] 
        vR12 = vR0.instantiatedMethodType.parameterType@extra((vi10+vi9));    [iiiiiiiiiiR RRRR i iR] 
        vi10++;   
        goto +B260;   [iiiiiiiiiiRR RRRR i ..]
  +B297:   #1
        vR10 = vR0.instantiatedMethodType.returnType@extra();    [iiiiiiiiiiRR RRRR . R.] 
        if vR0.implKind!=0 goto B320;   
  +B313:   #1
        b0 = vR0.implDefiningClass;    
        goto +B327b0;   [iiiiiiiiiRRR RRRR . ..]
  +B320:   #1
        b0 = vR0.implMethodType.returnType@extra();    [iiiiiiiiiRRRRiiR RRRR . R.] 
  +B327b0:   #1 reference
        vR11 = b0;    
        vR12 = vR0.samMethodType.returnType@extra();    [iiiiiiiiiRRR RRRR . R.] 
        if vR0.isAdaptableToAsReturn@special(vR11,vR10)!=0 goto B376;   
  -B349:   #1
        b0 = new java/lang/invoke/LambdaConversionException;    
        b1 = b0;    
        b2 = "Type mismatch for lambda return: %s is not convertible to %s";    
        b3 = new java/lang/Object()[2];    
        b3[0] = vR11;   
        b3[1] = vR10;   
        b1.<init>@special(format@special(b2,b3));   [iiiiiiiiiRRR RRRR i RR.] 
        throw b0;   
  +B376:   #1
        if vR0.isAdaptableToAsReturnStrict@special(vR10,vR12)!=0 goto B414;   
  -B387:   #1
        b0 = new java/lang/invoke/LambdaConversionException;    
        b1 = b0;    
        b2 = "Type mismatch for lambda expected return: %s is not convertible to %s";    
        b3 = new java/lang/Object()[2];    
        b3[0] = vR10;   
        b3[1] = vR12;   
        b1.<init>@special(format@special(b2,b3));   [iiiiiiiiiRRR RRRR i RR.] 
        throw b0;   
  +B414:   #1
        vR13 = vR0.additionalBridges;    
        vi14 = vR13.length;    
        vi15 = 0;    
  +B428:   #1
        if vi15>=vi14 goto B492;   
  +B435:   #1
        vR16 = vR13[vi15];    
        if vR0.isAdaptableToAsReturnStrict@special(vR10,vR16.returnType@extra())!=0 goto B486;   
  -B456:   #1
        b0 = new java/lang/invoke/LambdaConversionException;    
        b1 = b0;    
        b2 = "Type mismatch for lambda expected return: %s is not convertible to %s";    
        b3 = new java/lang/Object()[2];    
        b3[0] = vR10;   
        b3[1] = vR16.returnType@extra();   
        b1.<init>@special(format@special(b2,b3));   [iiiiiiiiiRRRRiiR RRRR i RR.] 
        throw b0;   
  +B486:   #1
        vi15++;   
        goto +B428;   [iiiiiiiiiRRRRiiR RRRR . ...]
  +B492:   #1
        return;   
  +END:   #1
 }
// Register: rd 96/96 wr 62 swaps 8 any 26 found 0 validateMetafactoryArgs
 
 method isAdaptableTo(Ljava/lang/Class;Ljava/lang/Class;Z)Z {
  +START:   #1
        if vR1.equals(vR2)==0 goto B10;   
  +B8:   #1
        return 1;   
  -B10:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isAdaptableTo
 
 method isAdaptableToAsReturn(Ljava/lang/Class;Ljava/lang/Class;)Z {
  +START:   #1
        if vR2.equals(TYPE)!=0 goto B30;   
  +B10:   #1
        if vR1.equals(TYPE)!=0 goto B34;   
  +B20:   #1
        if vR0.isAdaptableTo@special(vR1,vR2,0)==0 goto B34;   
  +B30:   #1
        b0 = 1;    
        goto +B35b0;   forward return[ i . ....]
  +B34:   #2
        b0 = 0;    
  +B35b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 4/4 wr 3 swaps 2 any 0 found 0 isAdaptableToAsReturn
 
 method isAdaptableToAsReturnStrict(Ljava/lang/Class;Ljava/lang/Class;)Z {
  +START:   #1
        if vR1.equals(TYPE)==0 goto B18;   
  +B10:   #1
        return vR2.equals(TYPE);   
  +B18:   #1
        return vR0.isAdaptableTo@special(vR1,vR2,1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 2 any 0 found 0 isAdaptableToAsReturnStrict
}
