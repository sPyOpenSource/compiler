class java/util/Collections$SetFromMap {
 
 method <init>(Ljava/util/Map;)V {
  +START:   #1
        vR0.<init>@special();   [ R  R] 
        if vR1.isEmpty()!=0 goto B23;   
  -B13:   #1
        throw new java/lang/IllegalArgumentException("Map is non-empty");   
  +B23:   #1
        vR0.m = vR1;   
        vR0.s = vR1.keySet();   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 1 swaps 0 any 0 found 0 <init>
 
 method clear()V {
  +START:   #1
        vR0.m.clear();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 clear
 
 method size()I {
  +START:   #1
        return vR0.m.size();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method isEmpty()Z {
  +START:   #1
        return vR0.m.isEmpty();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isEmpty
 
 method contains(Ljava/lang/Object;)Z {
  +START:   #1
        return vR0.m.containsKey(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 contains
 
 method remove(Ljava/lang/Object;)Z {
  +START:   #1
        if vR0.m.remove(vR1)==null goto B17;   
  +B13:   #1
        b0 = 1;    
        goto +B18b0;   forward return[ i  ..]
  +B17:   #1
        b0 = 0;    
  +B18b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 remove
 
 method add(Ljava/lang/Object;)Z {
  +START:   #1
        if vR0.m.put(vR1,TRUE)!=null goto B20;   
  +B16:   #1
        b0 = 1;    
        goto +B21b0;   forward return[ i . ...]
  +B20:   #1
        b0 = 0;    
  +B21b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 add
 
 method iterator()Ljava/util/Iterator; {
  +START:   #1
        return vR0.s.iterator();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 iterator
 
 method toArray()[Ljava/lang/Object; {
  +START:   #1
        return vR0.s.toArray();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 toArray
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return vR0.s.toString();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 toString
 
 method hashCode()I {
  +START:   #1
        return vR0.s.hashCode();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 hashCode
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        if vR1==vR0 goto B18;   
  +B5:   #1
        if vR0.s.equals(vR1)==0 goto B22;   
  +B18:   #1
        b0 = 1;    
        goto +B23b0;   forward return[ i  ..]
  +B22:   #1
        b0 = 0;    
  +B23b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 1 found 0 equals
 
 method containsAll(Ljava/util/Collection;)Z {
  +START:   #1
        return vR0.s.containsAll(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 containsAll
 
 method removeAll(Ljava/util/Collection;)Z {
  +START:   #1
        return vR0.s.removeAll(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 removeAll
 
 method retainAll(Ljava/util/Collection;)Z {
  +START:   #1
        return vR0.s.retainAll(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 retainAll
 
 method forEach(Ljava/util/function/Consumer;)V {
  +START:   #1
        vR0.s.forEach(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 forEach
 
 method spliterator()Ljava/util/Spliterator; {
  +START:   #1
        return vR0.s.spliterator();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 spliterator
 
 method readObject(Ljava/io/ObjectInputStream;)V {
  +START:   #1
        vR1.defaultReadObject();   [   R] 
        vR0.s = vR0.m.keySet();   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 readObject
 
 method toArray([Ljava/lang/Object;)[Ljava/lang/Object; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 toArray
}
