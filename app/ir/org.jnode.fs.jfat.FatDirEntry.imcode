class org/jnode/fs/jfat/FatDirEntry {
 
 method <init>(Lorg/jnode/fs/jfat/FatFileSystem;Lorg/jnode/fs/jfat/FatMarshal;I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.lastDirEntry = 0;   
        vR0.freeDirEntry = 0;   
        vR0.fs = vR1;   
        vR0.entry = vR2;   
        vR0.index = vi3;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Lorg/jnode/fs/jfat/FatFileSystem;Lorg/jnode/fs/jfat/FatMarshal;II)V {
  +START:   #1
        vR0.<init>@special(vR1,vR2,vi3);   [   iRRR] 
        if vi4!=229 goto B23;   
  +B15:   #1
        vR0.freeDirEntry = 1;   
        goto +B28;   forward return[   ....]
  +B23:   #1
        vR0.lastDirEntry = 1;   
  +B28:   #1
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 1 found 0 <init>
 
 method delete()V {
  +START:   #1
        vR0.entry.setUInt8(0,229);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 delete
 
 method getFatFileSystem()Lorg/jnode/fs/jfat/FatFileSystem; {
  +START:   #1
        return vR0.fs;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getFatFileSystem
 
 method getIndex()I {
  +START:   #1
        return vR0.index;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getIndex
 
 method setIndex(I)V {
  +START:   #1
        if vi1>=0 goto B14;   
  -B4:   #1
        throw new java/lang/IllegalArgumentException("value<0");   
  +B14:   #1
        vR0.index = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 1 found 0 setIndex
 
 method length()I {
  +START:   #1
        return vR0.entry.length();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 length
 
 method isLastDirEntry()Z {
  +START:   #1
        return vR0.lastDirEntry;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isLastDirEntry
 
 method isFreeDirEntry()Z {
  +START:   #1
        return vR0.freeDirEntry;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isFreeDirEntry
 
 method isLongDirEntry()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isLongDirEntry
 
 method isShortDirEntry()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isShortDirEntry
 
 method isDirty()Z {
  +START:   #1
        return vR0.entry.isDirty();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isDirty
 
 method flush()V {
  +START:   #1
        vR0.entry.flush();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 flush
 
 method setFreeDirEntry(Z)V {
  +START:   #1
        vR0.freeDirEntry = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setFreeDirEntry
 
 method toString()Ljava/lang/String; {
  +START:   #1
        b0 = "FatDirEntry [%s] index:%d";    
        b1 = new java/lang/Object()[2];    
        b1[0] = vR0.entry;   
        b1[1] = valueOf@special(vR0.index);   
        return format@special(b0,b1);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 0 toString
 
 method getParent()Ljx/fs/Node; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getParent
 
 method setParent(Ljx/fs/Node;)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 setParent
 
 method setDirty(Z)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 setDirty
 
 method incUseCount()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 incUseCount
 
 method decUseCount()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 decUseCount
 
 method i_nlinks()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 i_nlinks
 
 method deleteNode()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 deleteNode
 
 method writeNode()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 writeNode
 
 method putNode()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 putNode
 
 method overlay(Ljx/fs/Node;Ljava/lang/String;)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 overlay
 
 method removeOverlay(Ljx/fs/Node;)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 removeOverlay
 
 method removeAllOverlays()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 removeAllOverlays
 
 method isOverlayed(Ljava/lang/String;)Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isOverlayed
 
 method lookup(Ljava/lang/String;)Ljx/fs/Node; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 lookup
 
 method isSymlink()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isSymlink
 
 method isFile()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isFile
 
 method isDirectory()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isDirectory
 
 method isWritable()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isWritable
 
 method isReadable()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isReadable
 
 method isExecutable()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isExecutable
 
 method lastModified()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 lastModified
 
 method lastAccessed()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 lastAccessed
 
 method lastChanged()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 lastChanged
 
 method setLastModified(I)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 setLastModified
 
 method setLastAccessed(I)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 setLastAccessed
 
 method readdirNames()[Ljava/lang/String; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 readdirNames
 
 method getNode(Ljava/lang/String;)Ljx/fs/Node; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getNode
 
 method mkdir(Ljava/lang/String;I)Ljx/fs/Node; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 mkdir
 
 method rmdir(Ljava/lang/String;)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 rmdir
 
 method create(Ljava/lang/String;I)Ljx/fs/Node; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 create
 
 method unlink(Ljava/lang/String;)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 unlink
 
 method symlink(Ljava/lang/String;Ljava/lang/String;)Ljx/fs/Node; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 symlink
 
 method getSymlink()Ljava/lang/String; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getSymlink
 
 method rename(Ljava/lang/String;Ljx/fs/Node;Ljava/lang/String;)V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 rename
 
 method read(Ljx/zero/Memory;II)I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 read
 
 method read(ILjx/zero/Memory;II)I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 read
 
 method readWeak(II)Ljx/zero/ReadOnlyMemory; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 readWeak
 
 method write(Ljx/zero/Memory;II)I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 write
 
 method write(ILjx/zero/Memory;II)I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 write
 
 method available()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 available
 
 method getLength()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getLength
 
 method getIdentifier()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getIdentifier
 
 method getVersion()I {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getVersion
 
 method getFileSystem()Ljx/fs/FileSystem; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getFileSystem
 
 method getStatFS()Ljx/fs/StatFS; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getStatFS
}
