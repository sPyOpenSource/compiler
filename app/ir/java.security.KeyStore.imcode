class java/security/KeyStore {
 
 method <init>(Ljava/security/KeyStoreSpi;Ljava/security/Provider;Ljava/lang/String;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.keyStoreSpi = vR1;   
        vR0.provider = vR2;   
        vR0.type = vR3;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 0 swaps 0 any 0 found 0 <init>
 
 method getInstance(Ljava/lang/String;)Ljava/security/KeyStore; {
  +START:   #1
        vR1 = getProviders@special();    [ RR  ]
        vi2 = 0;    
  +B6:   #1
        if vi2>=vR1.length goto B57;   
  +B12:   #1
        b0 = vR1[vi2];    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        vR3 = b0.getProperty(b1.append@extra("KeyStore.").append@extra(vR0).toString@extra());    [Ri RR ii. RR.] 
        if vR3==null goto B51;   
  +B42:   #1
        return getInstance@special(vR3,vR0,vR1[vi2]);   
  +B51:   #1
        vi2++;   
        goto +B6;   [RiR RR ... ...]
  -B57:   #1
        throw new java/security/KeyStoreException(vR0);   
  +END:   #1
 }
// Register: rd 12/12 wr 12 swaps 2 any 3 found 0 getInstance
 
 method getInstance(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyStore; {
  +START:   #1
        vR2 = getProvider@special(vR1);    [ RR  R]
        if vR2!=null goto B17;   
  -B9:   #1
        throw new java/security/NoSuchProviderException();   
  +B17:   #1
        b1 = new java/lang/StringBuilder();    [ RR  i.][ RR  iR]
        return getInstance@special(vR2.getProperty(b1.append@extra("KeyStore.").append@extra(vR0).toString@extra()),vR0,vR2);   
  +END:   #1
 }
// Register: rd 3/3 wr 7 swaps 2 any 1 found 0 getInstance
 
 method getInstance(Ljava/lang/String;Ljava/lang/String;Ljava/security/Provider;)Ljava/security/KeyStore; {
  +START:   #4
        b0 = new java/security/KeyStore((java/security/KeyStoreSpi)(forName@special(vR0).newInstance@extra()),vR2,vR1);    [ R  i][ R .. iRRRR]
  +B19b0:   #3 reference
        return b0;   
  -H20<caught exception>:   #1 reference
        vR3 = <caught exception>;    
        throw new java/security/KeyStoreException("Class not found");   
  -H31<caught exception>:   #1 reference
        vR3 = <caught exception>;    
        throw new java/security/KeyStoreException("Class instantiation failed");   
  -H42<caught exception>:   #1 reference
        vR3 = <caught exception>;    
        throw new java/security/KeyStoreException("Illegal Access");   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 19 handler 20 type 23
0 - 19 handler 31 type 25
0 - 19 handler 42 type 27
 }
// Register: rd 8/8 wr 10 swaps 0 any 0 found 0 getInstance
 
 method getProvider()Ljava/security/Provider; {
  +START:   #1
        return vR0.provider;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getProvider
 
 method getType()Ljava/lang/String; {
  +START:   #1
        return vR0.type;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getType
 
 method getKey(Ljava/lang/String;[C)Ljava/security/Key; {
  +START:   #1
        return vR0.keyStoreSpi.engineGetKey(vR1,vR2);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getKey
 
 method getCertificateChain(Ljava/lang/String;)[Ljava/security/cert/Certificate; {
  +START:   #1
        return vR0.keyStoreSpi.engineGetCertificateChain(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCertificateChain
 
 method getCertificate(Ljava/lang/String;)Ljava/security/cert/Certificate; {
  +START:   #1
        return vR0.keyStoreSpi.engineGetCertificate(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCertificate
 
 method getCreationDate(Ljava/lang/String;)Ljava/util/Date; {
  +START:   #1
        return vR0.keyStoreSpi.engineGetCreationDate(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCreationDate
 
 method setKeyEntry(Ljava/lang/String;Ljava/security/Key;[C[Ljava/security/cert/Certificate;)V {
  +START:   #1
        vR0.keyStoreSpi.engineSetKeyEntry(vR1,vR2,vR3,vR4);   [   RRRRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 setKeyEntry
 
 method setKeyEntry(Ljava/lang/String;[B[Ljava/security/cert/Certificate;)V {
  +START:   #1
        vR0.keyStoreSpi.engineSetKeyEntry(vR1,vR2,vR3);   [   RRRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 setKeyEntry
 
 method setCertificateEntry(Ljava/lang/String;Ljava/security/cert/Certificate;)V {
  +START:   #1
        vR0.keyStoreSpi.engineSetCertificateEntry(vR1,vR2);   [   RRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 setCertificateEntry
 
 method deleteEntry(Ljava/lang/String;)V {
  +START:   #1
        vR0.keyStoreSpi.engineDeleteEntry(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 deleteEntry
 
 method aliases()Ljava/util/Enumeration; {
  +START:   #1
        return vR0.keyStoreSpi.engineAliases();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 aliases
 
 method containsAlias(Ljava/lang/String;)Z {
  +START:   #1
        return vR0.keyStoreSpi.engineContainsAlias(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 containsAlias
 
 method size()I {
  +START:   #1
        return vR0.keyStoreSpi.engineSize();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method isKeyEntry(Ljava/lang/String;)Z {
  +START:   #1
        return vR0.keyStoreSpi.engineIsKeyEntry(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isKeyEntry
 
 method isCertificateEntry(Ljava/lang/String;)Z {
  +START:   #1
        return vR0.keyStoreSpi.engineIsCertificateEntry(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isCertificateEntry
 
 method getCertificateAlias(Ljava/security/cert/Certificate;)Ljava/lang/String; {
  +START:   #1
        return vR0.keyStoreSpi.engineGetCertificateAlias(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCertificateAlias
 
 method store(Ljava/io/OutputStream;[C)V {
  +START:   #1
        vR0.keyStoreSpi.engineStore(vR1,vR2);   [   RRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 store
 
 method load(Ljava/io/InputStream;[C)V {
  +START:   #1
        vR0.keyStoreSpi.engineLoad(vR1,vR2);   [   RRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 load
 
 method getDefaultType()Ljava/lang/String; {
  +START:   #1
        vR0 = getProperty@special("keystore.type");    [  R R]
        if vR0!=null goto B13;   
  +B10:   #1
        vR0 = "jks";    
  +B13:   #1
        return vR0;   
  +END:   #1
 }
// Register: rd 2/2 wr 3 swaps 0 any 1 found 0 getDefaultType
}
