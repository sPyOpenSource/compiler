class java/awt/image/DirectColorModel {
 
 method <init>(IIII)V {
  +START:   #1
        vR0.<init>@special(getInstance@special(1000),vi1,vi2,vi3,vi4,0,0,smallestAppropriateTransferType@special(vi1));   [  ii iiiiiiiRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 3 swaps 1 any 0 found 0 <init>
 
 method <init>(IIIII)V {
  +START:   #1
        vR0.<init>@special(getInstance@special(1000),vi1,vi2,vi3,vi4,vi5,0,smallestAppropriateTransferType@special(vi1));   [  ii iiiiiiiRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 3 swaps 1 any 0 found 0 <init>
 
 method <init>(Ljava/awt/color/ColorSpace;IIIIIZI)V {
  +START:   #1
        b0 = vR0;    
        b1 = vR1;    
        b2 = vi2;    
        b3 = vi3;    
        b4 = vi4;    
        b5 = vi5;    
        b6 = vi6;    
        b7 = vi7;    
        if vi6!=0 goto B21;   
  +B17b0b1b2b3b4b5b6b7:   #1 reference reference int int int int int int
        b8 = 1;    
        goto +B22b0b1b2b3b4b5b6b7b8;   [ RRiiiiiii  ]
  +B21b0b1b2b3b4b5b6b7:   #1 reference reference int int int int int int
        b8 = 3;    
  +B22b0b1b2b3b4b5b6b7b8:   #1 reference reference int int int int int int int
        b0.<init>@special(b1,b2,b3,b4,b5,b6,b7,b8,vi8);   [ RRiiiiiii  iiiiiiiiRR] 
        return;   
  +END:   #1
 }
// Register: rd 20/20 wr 8 swaps 0 any 9 found 0 <init>
 
 method getRedMask()I {
  +START:   #1
        return vR0.getMask@this(0);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getRedMask
 
 method getGreenMask()I {
  +START:   #1
        return vR0.getMask@this(1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getGreenMask
 
 method getBlueMask()I {
  +START:   #1
        return vR0.getMask@this(2);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getBlueMask
 
 method getAlphaMask()I {
  +START:   #1
        if vR0.hasAlpha@this()==0 goto B15;   
  +B7:   #1
        b0 = vR0.getMask@this(3);    [ i  iR] 
        goto +B16b0;   forward return[ i  ..]
  +B15:   #1
        b0 = 0;    
  +B16b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 getAlphaMask
 
 method getRed(I)I {
  +START:   #1
        return vR0.extractAndNormalizeSample@special(vi1,0);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getRed
 
 method getGreen(I)I {
  +START:   #1
        return vR0.extractAndNormalizeSample@special(vi1,1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getGreen
 
 method getBlue(I)I {
  +START:   #1
        return vR0.extractAndNormalizeSample@special(vi1,2);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getBlue
 
 method getAlpha(I)I {
  +START:   #1
        if vR0.hasAlpha@this()!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        return vR0.extractAndScaleSample@special(vi1,3);   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 getAlpha
 
 method extractAndNormalizeSample(II)I {
  +START:   #1
        vi3 = vR0.extractAndScaleSample@special(vi1,vi2);    [   iiR] 
        if vR0.hasAlpha@this()==0 goto B33;   
  +B14:   #1
        if vR0.isAlphaPremultiplied@this()==0 goto B33;   
  +B21:   #1
        vi3 = ((vi3*255)/vR0.getAlpha@extra(vi1));    
  +B33:   #2
        return vi3;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 0 found 0 extractAndNormalizeSample
 
 method extractAndScaleSample(II)I {
  +START:   #1
        vi3 = (vi1 & vR0.getMask@this(vi2));    
        vi4 = ((8-vR0.shifts[vi2])-vR0.getComponentSize@this(vi2));    
        if vi4<=0 goto B37;   
  +B30:   #1
        b0 = (vi3 << vi4);    
        goto +B42b0;   forward return[ii i . ..]
  +B37:   #1
        b0 = (vi3 >>> -vi4);    
  +B42b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 13/13 wr 5 swaps 0 any 2 found 1 extractAndScaleSample
 
 method getRGB(I)I {
  +START:   #1
        return vR0.getRGB@special(vi1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getRGB
 
 method getRed(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getRed@extra(vR0.getPixelFromArray@this(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getRed
 
 method getGreen(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getGreen@extra(vR0.getPixelFromArray@this(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getGreen
 
 method getBlue(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getBlue@extra(vR0.getPixelFromArray@this(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getBlue
 
 method getAlpha(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getAlpha@extra(vR0.getPixelFromArray@this(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getAlpha
 
 method getRGB(Ljava/lang/Object;)I {
  +START:   #1
        return vR0.getRGB@extra(vR0.getPixelFromArray@this(vR1));   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getRGB
 
 method getDataElements(ILjava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        vi3 = 0;    
        vi4 = 0;    
        if vR0.hasAlpha@this()==0 goto B32;   
  +B12:   #1
        vi4 = ((vi1 >>> 24) & 255);    
        vi3 = vR0.valueToField@special(vi4,3,8);    [ii   iiiR] 
  +B32:   #1
        if vR0.hasAlpha@this()==0 goto B128;   
  +B39:   #1
        if vR0.isAlphaPremultiplied@this()==0 goto B128;   
  +B46:   #1
        vi5 = ((((vi1 >>> 8) & 65280)*vi4)/255);    
        vi6 = ((((vi1 >>> 0) & 65280)*vi4)/255);    
        vi7 = ((((vi1 << 8) & 65280)*vi4)/255);    
        vi3 = (vi3 | ((vR0.valueToField@special(vi5,0,16) | vR0.valueToField@special(vi6,1,16)) | vR0.valueToField@special(vi7,2,16)));    
        goto +B189;   [iiiii  . ....]
  +B128:   #2
        vi5 = ((vi1 >>> 16) & 255);    
        vi6 = ((vi1 >>> 8) & 255);    
        vi7 = ((vi1 >>> 0) & 255);    
        vi3 = (vi3 | ((vR0.valueToField@special(vi5,0,8) | vR0.valueToField@special(vi6,1,8)) | vR0.valueToField@special(vi7,2,8)));    
  +B189:   #1
        vR5 = createBuffer@special(vR0.transferType,vR2,1);    [iiiii  i iRi.]
        vR5.setElem(0,vi3);   [iiRii  i iiR.] 
        return getData@special(vR5);   
  +END:   #1
 }
// Register: rd 30/30 wr 18 swaps 0 any 6 found 2 getDataElements
 
 method valueToField(III)I {
  +START:   #1
        vi4 = ((vR0.getComponentSize@this(vi2)+vR0.shifts[vi2])-vi3);    
        if vi4<=0 goto B28;   
  +B21:   #1
        b0 = (vi1 << vi4);    
        goto +B33b0;   [i i  ..]
  +B28:   #1
        b0 = (vi1 >>> -vi4);    
  +B33b0:   #1 int
        vi5 = b0;    
        return (vi5 & vR0.getMask@this(vi2));   
  +END:   #1
 }
// Register: rd 13/13 wr 4 swaps 0 any 2 found 1 valueToField
 
 method value16ToField(II)I {
  +START:   #1
        vi3 = ((vR0.getComponentSize@this(vi2)+vR0.shifts[vi2])-16);    
        if vi3<=0 goto B26;   
  +B20:   #1
        b0 = (vi1 << vi3);    
        goto +B30b0;   forward return[i i  ..]
  +B26:   #1
        b0 = (vi1 >>> -vi3);    
  +B30b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 0 any 1 found 0 value16ToField
 
 method getComponents(I[II)[I {
  +START:   #1
        vi4 = vR0.getNumComponents@this();    [ ?i  R] 
        if vR2!=null goto B17;   
  +B10:   #1
        vR2 = new int[(vi3+vi4)];    
  +B17:   #1
        vi5 = 0;    
  +B20:   #1
        if vi5>=vi4 goto B55;   
  +B27:   #1
        b1 = vi3;    
        vi3++;   
        vR2[b1] = ((vi1 & vR0.getMask@this(vi5)) >>> vR0.shifts[vi5]);   
        vi5++;   
        goto +B20;   [ii ?i  ..]
  +B55:   #1
        return vR2;   
  +END:   #1
 }
// Register: rd 17/17 wr 6 swaps 0 any 5 found 1 getComponents
 
 method getComponents(Ljava/lang/Object;[II)[I {
  +START:   #1
        return vR0.getComponents@extra(vR0.getPixelFromArray@this(vR1),vR2,vi3);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 getComponents
 
 method createCompatibleWritableRaster(II)Ljava/awt/image/WritableRaster; {
  +START:   #1
        vR3 = vR0.createCompatibleSampleModel@this(vi1,vi2);    [ R  iiR] 
        vR4 = new java/awt/Point(0,0);    [ R  i..][ R . iiiR]
        return createWritableRaster@special(vR3,vR4);   
  +END:   #1
 }
// Register: rd 2/2 wr 3 swaps 0 any 0 found 0 createCompatibleWritableRaster
 
 method getDataElement([II)I {
  +START:   #1
        vi3 = vR0.getNumComponents@this();    [ ??i  R] 
        vi4 = 0;    
        vi5 = 0;    
  +B11:   #1
        if vi5>=vi3 goto B49;   
  +B17:   #1
        b2 = vi2;    
        vi2++;   
        vi4 = (vi4 | ((vR1[b2] << vR0.shifts[vi5]) & vR0.getMask@this(vi5)));    
        vi5++;   
        goto +B11;   [iii ??i . ..]
  +B49:   #1
        return vi4;   
  +END:   #1
 }
// Register: rd 15/15 wr 8 swaps 0 any 5 found 1 getDataElement
 
 method getDataElements([IILjava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        vi4 = vR0.getDataElement@this(vR1,vi2);    [   iRR] 
        vR5 = createBuffer@special(vR0.transferType,vR3,1);    [i  i iRi]
        vR5.setElem(0,vi4);   [iR  i iiR] 
        return getData@special(vR5);   
  +END:   #1
 }
// Register: rd 3/3 wr 3 swaps 0 any 0 found 0 getDataElements
 
 method coerceData(Ljava/awt/image/WritableRaster;Z)Ljava/awt/image/ColorModel; {
  +START:   #1
        if vR0.isAlphaPremultiplied!=vi2 goto B10;   
  +B8:   #1
        return vR0;   
  +B10:   #1
        vR0.coerceData@special(vR1,vi2);   [ R  iRR] 
        return new java/awt/image/ComponentColorModel(vR0.cspace,vR0.bits,vR0.hasAlpha@this(),vi2,vR0.transparency,vR0.transferType);   
  +END:   #1
 }
// Register: rd 11/11 wr 1 swaps 0 any 0 found 0 coerceData
 
 method isCompatibleRaster(Ljava/awt/image/Raster;)Z {
  +START:   #1
        return vR0.isCompatibleRaster@special(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isCompatibleRaster
 
 method stringParam()Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra(vR0.stringParam@special()).append@extra(", redMask=").append@extra(toHexString@special(vR0.getRedMask@extra())).append@extra(", greenMask=").append@extra(toHexString@special(vR0.getGreenMask@extra())).append@extra(", blueMask=").append@extra(toHexString@special(vR0.getBlueMask@extra())).append@extra(", alphaMask=").append@extra(toHexString@special(vR0.getAlphaMask@extra())).toString@extra();   
  +END:   #1
 }
// Register: rd 6/6 wr 23 swaps 9 any 0 found 0 stringParam
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return vR0.toString@special();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 toString
}
