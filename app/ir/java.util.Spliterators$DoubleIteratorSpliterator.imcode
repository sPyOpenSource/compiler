class java/util/Spliterators$DoubleIteratorSpliterator {
 
 method <init>(Ljava/util/PrimitiveIterator$OfDouble;JI)V {
  +START:   #1
        vR0.<init>@special();   [ Ri  R] 
        vR0.it = vR1;   
        vR0.est = vl2;   
        b0 = vR0;    
        if (vi4 & 4096)!=0 goto B36;   
  +B24b0:   #1 reference
        b1 = ((vi4 | 64) | 16384);    
        goto +B38b0b1;   [i Ri  .]
  +B36b0:   #1 reference
        b1 = vi4;    
  +B38b0b1:   #1 reference int
        b0.characteristics = b1;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 0 any 4 found 0 <init>
 
 method <init>(Ljava/util/PrimitiveIterator$OfDouble;I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.it = vR1;   
        vR0.est = 9223372036854775807;   
        vR0.characteristics = (vi2 & -16449);   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method trySplit()Ljava/util/Spliterator$OfDouble; {
  +START:   #1
        vR1 = vR0.it;    
        vl2 = vR0.est;    
        if compare(vl2,1)<=0 goto B143;   
  +B16:   #1
        if vR1.hasNext()==0 goto B143;   
  +B25:   #1
        vi4 = (vR0.batch+1024);    
        if compare((long)vi4,vl2)<=0 goto B47;   
  +B43:   #1
        vi4 = (int)vl2;    
  +B47:   #1
        if vi4<=33554432 goto B58;   
  +B54:   #1
        vi4 = 33554432;    
  +B58:   #1
        vR5 = new double[vi4];    
        vi6 = 0;    
  +B67:   #1
        vR5[vi6] = vR1.nextDouble();   
        vi6++;   
        if vi6>=vi4 goto B97;   
  +B88:   #1
        if vR1.hasNext()!=0 goto B67;   
  +B97:   #1
        vR0.batch = vi6;   
        if compare(vR0.est,9223372036854775807)==0 goto B126;   
  +B114:   #1
        vR0.est = (vR0.est-(long)vi6);   
  +B126:   #1
        return new java/util/Spliterators$DoubleArraySpliterator(vR5,0,vi6,vR0.characteristics);   
  +B143:   #2
        return 0;   
  +END:   #1
 }
// Register: rd 15/15 wr 8 swaps 0 any 3 found 0 trySplit
 
 method forEachRemaining(Ljava/util/function/Consumer;)V {
  +START:   #1
        if vR1!=null goto B12;   
  -B4:   #1
        throw new java/lang/NullPointerException();   
  +B12:   #1
        vR0.it.forEachRemaining(vR1);   [ R  RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 1 found 0 forEachRemaining
 
 method forEachRemaining(Ljava/util/function/DoubleConsumer;)V {
  +START:   #1
        if vR1!=null goto B12;   
  -B4:   #1
        throw new java/lang/NullPointerException();   
  +B12:   #1
        vR0.it.forEachRemaining(vR1);   [ R  RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 1 found 0 forEachRemaining
 
 method tryAdvance(Ljava/util/function/DoubleConsumer;)Z {
  +START:   #1
        if vR1!=null goto B12;   
  -B4:   #1
        throw new java/lang/NullPointerException();   
  +B12:   #1
        if vR0.it.hasNext()==0 goto B41;   
  +B24:   #1
        vR1.accept(vR0.it.nextDouble());   [ R  ??R] 
        return 1;   
  +B41:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 1 found 0 tryAdvance
 
 method tryAdvance(Ljava/util/function/Consumer;)Z {
  +START:   #1
        if vR1!=null goto B12;   
  -B4:   #1
        throw new java/lang/NullPointerException();   
  +B12:   #1
        if vR0.it.hasNext()==0 goto B26;   
  +B24:   #1
        return 1;   
  +B26:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 1 found 0 tryAdvance
 
 method estimateSize()J {
  +START:   #1
        return vR0.est;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 estimateSize
 
 method characteristics()I {
  +START:   #1
        return vR0.characteristics;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 characteristics
 
 method getComparator()Ljava/util/Comparator; {
  +START:   #1
        if vR0.hasCharacteristics@extra(4)==0 goto B10;   
  +B8:   #1
        return 0;   
  -B10:   #1
        throw new java/lang/IllegalStateException();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getComparator
 
 method getExactSizeIfKnown()J {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getExactSizeIfKnown
 
 method hasCharacteristics(I)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hasCharacteristics
 
 method forEachRemaining(Ljava/lang/Object;)V {
  +START:   #1
        vR0.forEachRemaining@extra((java/util/function/DoubleConsumer)(vR1));   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 1 forEachRemaining
 
 method tryAdvance(Ljava/lang/Object;)Z {
  +START:   #1
        return vR0.tryAdvance@extra((java/util/function/DoubleConsumer)(vR1));   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 1 tryAdvance
 
 method trySplit()Ljava/util/Spliterator$OfPrimitive; {
  +START:   #1
        return vR0.trySplit@extra();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 trySplit
 
 method trySplit()Ljava/util/Spliterator; {
  +START:   #1
        return vR0.trySplit@extra();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 trySplit
}
