class java/util/Collections {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method sort(Ljava/util/List;Ljava/util/Comparator;)V {
  +START:   #1
        vR0.sort(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 sort
 
 method binarySearch(Ljava/util/List;Ljava/lang/Object;)I {
  +START:   #1
        if (vR0 instanceof java/util/RandomAccess)!=0 goto B19;   
  +B7:   #1
        if vR0.size()>=5000 goto B25;   
  +B19:   #1
        return indexedBinarySearch@special(vR0,vR1);   
  +B25:   #1
        return iteratorBinarySearch@special(vR0,vR1);   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 binarySearch
 
 method indexedBinarySearch(Ljava/util/List;Ljava/lang/Object;)I {
  +START:   #1
        vi2 = 0;    
        vi3 = (vR0.size()-1);    
  +B11:   #1
        if vi2>vi3 goto B78;   
  +B16:   #1
        vi4 = ((vi2+vi3) >>> 1);    
        vR5 = (java/lang/Comparable)(vR0.get(vi4));    
        vi6 = vR5.compareTo(vR1);    [iiiR  . RR] 
        if vi6>=0 goto B59;   
  +B51:   #1
        vi2 = (vi4+1);    
        goto +B75;   [iiiRi  . ..]
  +B59:   #1
        if vi6<=0 goto B72;   
  +B64:   #1
        vi3 = (vi4-1);    
        goto +B75;   [iiiRi  . ..]
  +B72:   #1
        return vi4;   
  +B75:   #2
        goto +B11;   [iiiRi  . ..]
  +B78:   #1
        return -(vi2+1);   
  +END:   #1
 }
// Register: rd 14/14 wr 8 swaps 0 any 6 found 0 indexedBinarySearch
 
 method iteratorBinarySearch(Ljava/util/List;Ljava/lang/Object;)I {
  +START:   #1
        vi2 = 0;    
        vi3 = (vR0.size()-1);    
        vR4 = vR0.listIterator();    [ii   R] 
  +B19:   #1
        if vi2>vi3 goto B85;   
  +B24:   #1
        vi5 = ((vi2+vi3) >>> 1);    
        vR6 = (java/lang/Comparable)(get@special(vR4,vi5));    
        vi7 = vR6.compareTo(vR1);    [iiRiR  . RR] 
        if vi7>=0 goto B66;   
  +B58:   #1
        vi2 = (vi5+1);    
        goto +B82;   [iiRiRi  . ..]
  +B66:   #1
        if vi7<=0 goto B79;   
  +B71:   #1
        vi3 = (vi5-1);    
        goto +B82;   [iiRiRi  . ..]
  +B79:   #1
        return vi5;   
  +B82:   #2
        goto +B19;   [iiRiRi  . ..]
  +B85:   #1
        return -(vi2+1);   
  +END:   #1
 }
// Register: rd 14/14 wr 9 swaps 0 any 6 found 0 iteratorBinarySearch
 
 method get(Ljava/util/ListIterator;I)Ljava/lang/Object; {
  +START:   #1
        vR2 = 0;    
        vi3 = vR0.nextIndex();    [R i  R] 
        if vi3>vi1 goto B32;   
  +B14:   #1
        vR2 = vR0.next();    [Ri i  R] 
        b0 = vi3;    
        vi3++;   
        if b0<vi1 goto B14;   
  +B29:   #1
        goto +B47;   forward return[Ri i  .]
  +B32:   #2
        vR2 = vR0.previous();    [Ri i  R] 
        vi3--;   
        if vi3>vi1 goto B32;   
  +B47:   #1
        return vR2;   
  +END:   #1
 }
// Register: rd 13/13 wr 7 swaps 0 any 6 found 0 get
 
 method indexedBinarySearch(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I {
  +START:   #1
        vi3 = 0;    
        vi4 = (vR0.size()-1);    
  +B12:   #1
        if vi3>vi4 goto B80;   
  +B18:   #1
        vi5 = ((vi3+vi4) >>> 1);    
        vR6 = vR0.get(vi5);    [iii   iR] 
        vi7 = vR2.compare(vR6,vR1);    [iiiR   RRR] 
        if vi7>=0 goto B60;   
  +B52:   #1
        vi3 = (vi5+1);    
        goto +B77;   [iiiRi   ...]
  +B60:   #1
        if vi7<=0 goto B74;   
  +B65:   #1
        vi4 = (vi5-1);    
        goto +B77;   [iiiRi   ...]
  +B74:   #1
        return vi5;   
  +B77:   #2
        goto +B12;   [iiiRi   ...]
  +B80:   #1
        return -(vi3+1);   
  +END:   #1
 }
// Register: rd 13/13 wr 7 swaps 0 any 6 found 0 indexedBinarySearch
 
 method reverse(Ljava/util/List;)V {
  +START:   #1
        vi1 = vR0.size();    [   R] 
        if vi1<18 goto B20;   
  +B13:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B55;   
  +B20:   #1
        vi2 = 0;    
        vi3 = (vi1 >> 1);    
        vi4 = (vi1-1);    
  +B31:   #1
        if vi2>=vi3 goto B52;   
  +B36:   #1
        swap@special(vR0,vi2,vi4);   [iiii   iiR]
        vi2++;   
        vi4--;   
        goto +B31;   [iiii   ...]
  +B52:   #1
        goto +B124;   forward return[iiii   ...]
  +B55:   #1
        vR2 = vR0.listIterator();    [iiii   R..] 
        vR3 = vR0.listIterator(vi1);    [iRii   iR.] 
        vi4 = 0;    
        vi5 = (vR0.size() >> 1);    
  +B83:   #1
        if vi4>=vi5 goto B124;   
  +B90:   #1
        vR6 = vR2.next();    [iRRii   R..] 
        vR2.set(vR3.previous());   [iRRiiR  i RR.] 
        vR3.set(vR6);   [iRRiiR  i RR.] 
        vi4++;   
        goto +B83;   [iRRiiR  i ...]
  +B124:   #2
        return;   
  +END:   #1
 }
// Register: rd 19/19 wr 13 swaps 1 any 8 found 0 reverse
 
 method shuffle(Ljava/util/List;)V {
  +START:   #1
        vR1 = r;    
        if vR1!=null goto B20;   
  +B8:   #1
        vR1 = new java/util/Random();    [ R  i][ R  iR]
        r = b0;   
  +B20:   #1
        shuffle@special(vR0,vR1);   [R R  RR]
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 1 found 1 shuffle
 
 method shuffle(Ljava/util/List;Ljava/util/Random;)V {
  +START:   #1
        vi2 = vR0.size();    [   R] 
        if vi2<5 goto B19;   
  +B12:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B47;   
  +B19:   #1
        vi3 = vi2;    
  +B21:   #1
        if vi3<=1 goto B44;   
  +B26:   #1
        swap@special(vR0,(vi3-1),vR1.nextInt(vi3));   [ii  ii iiR]
        vi3--;   
        goto +B21;   [ii  ii ...]
  +B44:   #1
        goto +B126;   forward return[ii  .. ...]
  +B47:   #1
        vR3 = vR0.toArray();    [ii  .. R..] 
        vi4 = vi2;    
  +B57:   #1
        if vi4<=1 goto B83;   
  +B63:   #1
        swap@special(vR3,(vi4-1),vR1.nextInt(vi4));   [iRi  ii iiR]
        vi4--;   
        goto +B57;   [iRi  ii ...]
  +B83:   #1
        vR4 = vR0.listIterator();    [iRi  .. R..] 
        vi5 = 0;    
  +B94:   #1
        if vi5>=vR3.length goto B126;   
  +B101:   #1
        vR4.next();   [iRRi  .. R..] 
        vR4.set(vR3[vi5]);   [iRRi  i. RR.] 
        vi5++;   
        goto +B94;   [iRRi  i. ...]
  +B126:   #2
        return;   
  +END:   #1
 }
// Register: rd 24/24 wr 16 swaps 1 any 9 found 0 shuffle
 
 method swap(Ljava/util/List;II)V {
  +START:   #1
        vR3 = vR0;    
        vR3.set(vi1,vR3.set(vi2,vR3.get(vi1)));   [R  ii RiR] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 3 swaps 2 any 1 found 0 swap
 
 method swap([Ljava/lang/Object;II)V {
  +START:   #1
        vR3 = vR0[vi1];    
        vR0[vi1] = vR0[vi2];   
        vR0[vi2] = vR3;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 1 swaps 0 any 1 found 0 swap
 
 method fill(Ljava/util/List;Ljava/lang/Object;)V {
  +START:   #1
        vi2 = vR0.size();    [   R] 
        if vi2<25 goto B20;   
  +B13:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B45;   
  +B20:   #1
        vi3 = 0;    
  +B22:   #1
        if vi3>=vi2 goto B42;   
  +B27:   #1
        vR0.set(vi3,vR1);   [ii   RiR] 
        vi3++;   
        goto +B22;   [ii   ...]
  +B42:   #1
        goto +B81;   forward return[ii   ...]
  +B45:   #1
        vR3 = vR0.listIterator();    [ii   R..] 
        vi4 = 0;    
  +B55:   #1
        if vi4>=vi2 goto B81;   
  +B61:   #1
        vR3.next();   [iRi   R..] 
        vR3.set(vR1);   [iRi   RR.] 
        vi4++;   
        goto +B55;   [iRi   ...]
  +B81:   #2
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 6 swaps 0 any 5 found 0 fill
 
 method copy(Ljava/util/List;Ljava/util/List;)V {
  +START:   #1
        vi2 = vR1.size();    [ R  R] 
        if vi2<=vR0.size() goto B27;   
  -B17:   #1
        throw new java/lang/IndexOutOfBoundsException("Source does not fit in dest");   
  +B27:   #1
        if vi2<10 goto B47;   
  +B33:   #1
        if (vR1 instanceof java/util/RandomAccess)==0 goto B78;   
  +B40:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B78;   
  +B47:   #1
        vi3 = 0;    
  +B49:   #1
        if vi3>=vi2 goto B75;   
  +B54:   #1
        vR0.set(vi3,vR1.get(vi3));   [ii R i RiR] 
        vi3++;   
        goto +B49;   [ii R i ...]
  +B75:   #1
        goto +B128;   forward return[ii R . ...]
  +B78:   #2
        vR3 = vR0.listIterator();    [ii R . R..] 
        vR4 = vR1.listIterator();    [iR R . R..] 
        vi5 = 0;    
  +B96:   #1
        if vi5>=vi2 goto B128;   
  +B102:   #1
        vR3.next();   [iRRi R . R..] 
        vR3.set(vR4.next());   [iRRi R i RR.] 
        vi5++;   
        goto +B96;   [iRRi R i ...]
  +B128:   #2
        return;   
  +END:   #1
 }
// Register: rd 21/21 wr 10 swaps 2 any 6 found 1 copy
 
 method min(Ljava/util/Collection;)Ljava/lang/Object; {
  +START:   #1
        vR1 = vR0.iterator();    [   R] 
        vR2 = vR1.next();    [R   R] 
  +B14:   #1
        if vR1.hasNext()==0 goto B48;   
  +B23:   #1
        vR3 = vR1.next();    [RR   R] 
        if (java/lang/Comparable)(vR3).compareTo(vR2)>=0 goto B45;   
  +B43:   #1
        vR2 = vR3;    
  +B45:   #1
        goto +B14;   [RRR   ...]
  +B48:   #1
        return vR2;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 0 any 1 found 1 min
 
 method min(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object; {
  +START:   #1
        if vR1!=null goto B9;   
  +B4:   #1
        return min@special(vR0);   
  +B9:   #1
        vR2 = vR0.iterator();    [   R] 
        vR3 = vR2.next();    [R   R] 
  +B23:   #1
        if vR2.hasNext()==0 goto B58;   
  +B32:   #1
        vR4 = vR2.next();    [RR   R] 
        if vR1.compare(vR4,vR3)>=0 goto B55;   
  +B52:   #1
        vR3 = vR4;    
  +B55:   #1
        goto +B23;   [RRR   ...]
  +B58:   #1
        return vR3;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 0 any 2 found 0 min
 
 method max(Ljava/util/Collection;)Ljava/lang/Object; {
  +START:   #1
        vR1 = vR0.iterator();    [   R] 
        vR2 = vR1.next();    [R   R] 
  +B14:   #1
        if vR1.hasNext()==0 goto B48;   
  +B23:   #1
        vR3 = vR1.next();    [RR   R] 
        if (java/lang/Comparable)(vR3).compareTo(vR2)<=0 goto B45;   
  +B43:   #1
        vR2 = vR3;    
  +B45:   #1
        goto +B14;   [RRR   ...]
  +B48:   #1
        return vR2;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 0 any 1 found 1 max
 
 method max(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object; {
  +START:   #1
        if vR1!=null goto B9;   
  +B4:   #1
        return max@special(vR0);   
  +B9:   #1
        vR2 = vR0.iterator();    [   R] 
        vR3 = vR2.next();    [R   R] 
  +B23:   #1
        if vR2.hasNext()==0 goto B58;   
  +B32:   #1
        vR4 = vR2.next();    [RR   R] 
        if vR1.compare(vR4,vR3)<=0 goto B55;   
  +B52:   #1
        vR3 = vR4;    
  +B55:   #1
        goto +B23;   [RRR   ...]
  +B58:   #1
        return vR3;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 0 any 2 found 0 max
 
 method rotate(Ljava/util/List;I)V {
  +START:   #1
        if (vR0 instanceof java/util/RandomAccess)!=0 goto B18;   
  +B7:   #1
        if vR0.size()>=100 goto B26;   
  +B18:   #1
        rotate1@special(vR0,vi1);   [   iR]
        goto +B31;   forward return[   ..]
  +B26:   #1
        rotate2@special(vR0,vi1);   [   iR]
  +B31:   #1
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 rotate
 
 method rotate1(Ljava/util/List;I)V {
  +START:   #1
        vi2 = vR0.size();    [   R] 
        if vi2!=0 goto B12;   
  +B11:   #1
        return;   
  +B12:   #1
        vi1 = (vi1%vi2);    
        if vi1>=0 goto B24;   
  +B20:   #1
        vi1 = (vi1+vi2);    
  +B24:   #1
        if vi1!=0 goto B29;   
  +B28:   #1
        return;   
  +B29:   #1
        vi3 = 0;    
        vi4 = 0;    
  +B34:   #1
        if vi4==vi2 goto B97;   
  +B40:   #1
        vR5 = vR0.get(vi3);    [iii   iR] 
        vi6 = vi3;    
  +B52:   #1
        vi6 = (vi6+vi1);    
        if vi6<vi2 goto B70;   
  +B64:   #1
        vi6 = (vi6-vi2);    
  +B70:   #1
        vR5 = vR0.set(vi6,vR5);    [iiiRi   RiR] 
        vi4++;   
        if vi6!=vi3 goto B52;   
  +B91:   #1
        vi3++;   
        goto +B34;   [iiiRi   ...]
  +B97:   #1
        return;   
  +END:   #1
 }
// Register: rd 23/23 wr 12 swaps 0 any 12 found 0 rotate1
 
 method rotate2(Ljava/util/List;I)V {
  +START:   #1
        vi2 = vR0.size();    [   R] 
        if vi2!=0 goto B12;   
  +B11:   #1
        return;   
  +B12:   #1
        vi3 = (-vi1%vi2);    
        if vi3>=0 goto B25;   
  +B21:   #1
        vi3 = (vi3+vi2);    
  +B25:   #1
        if vi3!=0 goto B30;   
  +B29:   #1
        return;   
  +B30:   #1
        reverse@special(vR0.subList(0,vi3));   [ii  R R..]
        reverse@special(vR0.subList(vi3,vi2));   [ii  RR R..]
        reverse@special(vR0);   [ii  RR R..]
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 5 swaps 0 any 4 found 0 rotate2
 
 method replaceAll(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z {
  +START:   #1
        vi3 = 0;    
        vi4 = vR0.size();    [i   R] 
        if vi4<11 goto B24;   
  +B17:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B116;   
  +B24:   #1
        if vR1!=null goto B70;   
  +B28:   #1
        vi5 = 0;    
  +B31:   #1
        if vi5>=vi4 goto B67;   
  +B38:   #1
        if vR0.get(vi5)!=null goto B61;   
  +B49:   #1
        vR0.set(vi5,vR2);   [iii   RiR] 
        vi3 = 1;    
  +B61:   #1
        vi5++;   
        goto +B31;   [iii   ...]
  +B67:   #1
        goto +B207;   forward return[iii   ...]
  +B70:   #1
        vi5 = 0;    
  +B73:   #1
        if vi5>=vi4 goto B113;   
  +B80:   #1
        if vR1.equals(vR0.get(vi5))==0 goto B107;   
  +B95:   #1
        vR0.set(vi5,vR2);   [iii  . RiR] 
        vi3 = 1;    
  +B107:   #1
        vi5++;   
        goto +B73;   [iii  . ...]
  +B113:   #1
        goto +B207;   forward return[iii  . ...]
  +B116:   #1
        vR5 = vR0.listIterator();    [iii  . R..] 
        if vR1!=null goto B167;   
  +B128:   #1
        vi6 = 0;    
  +B131:   #1
        if vi6>=vi4 goto B164;   
  +B138:   #1
        if vR5.next()!=null goto B158;   
  +B148:   #1
        vR5.set(vR2);   [iiRi  . RR.] 
        vi3 = 1;    
  +B158:   #1
        vi6++;   
        goto +B131;   [iiRi  . ...]
  +B164:   #1
        goto +B207;   forward return[iiRi  . ...]
  +B167:   #1
        vi6 = 0;    
  +B170:   #1
        if vi6>=vi4 goto B207;   
  +B177:   #1
        if vR1.equals(vR5.next())==0 goto B201;   
  +B191:   #1
        vR5.set(vR2);   [iiRi  . RR.] 
        vi3 = 1;    
  +B201:   #1
        vi6++;   
        goto +B170;   [iiRi  . ...]
  +B207:   #4
        return vi3;   
  +END:   #1
 }
// Register: rd 29/29 wr 13 swaps 2 any 11 found 0 replaceAll
 
 method indexOfSubList(Ljava/util/List;Ljava/util/List;)I {
  +START:   #1
        vi2 = vR0.size();    [   R] 
        vi3 = vR1.size();    [i   R] 
        vi4 = (vi2-vi3);    
        if vi2<35 goto B39;   
  +B25:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B108;   
  +B32:   #1
        if (vR1 instanceof java/util/RandomAccess)==0 goto B108;   
  +B39:   #1
        vi5 = 0;    
  +B42:   #1
        if vi5>vi4 goto B105;   
  +B49:   #1
        vi6 = 0;    
        vi7 = vi5;    
  +B56:   #1
        if vi6>=vi3 goto B96;   
  +B62:   #1
        if eq@special(vR1.get(vi6),vR0.get(vi7))!=0 goto B87;   
  +B84:   #1
        goto +B99;   [iiiiii  .. ..]
  +B87:   #1
        vi6++;   
        vi7++;   
        goto +B56;   [iiiiii  .. ..]
  +B96:   #1
        return vi5;   
  +B99:   #1
        vi5++;   
        goto +B42;   [iiiiii  .. ..]
  +B105:   #1
        goto +B205;   forward return[iiiiii  .. ..]
  +B108:   #2
        vR5 = vR0.listIterator();    [iiiiii  .. R.] 
        vi6 = 0;    
  +B119:   #1
        if vi6>vi4 goto B205;   
  +B126:   #1
        vR7 = vR1.listIterator();    [iiiRii  .. R.] 
        vi8 = 0;    
  +B137:   #1
        if vi8>=vi3 goto B196;   
  +B143:   #1
        if eq@special(vR7.next(),vR5.next())!=0 goto B190;   
  +B163:   #1
        vi9 = 0;    
  +B166:   #1
        if vi9>=vi8 goto B187;   
  +B173:   #1
        vR5.previous();   [iiiRiRii  .. R.] 
        vi9++;   
        goto +B166;   [iiiRiRii  .. ..]
  +B187:   #1
        goto +B199;   [iiiRiRii  .. ..]
  +B190:   #1
        vi8++;   
        goto +B137;   [iiiRiRii  .. ..]
  +B196:   #1
        return vi6;   
  +B199:   #1
        vi6++;   
        goto +B119;   [iiiRiRii  .. ..]
  +B205:   #2
        return -1;   
  +END:   #1
 }
// Register: rd 35/35 wr 23 swaps 0 any 14 found 0 indexOfSubList
 
 method lastIndexOfSubList(Ljava/util/List;Ljava/util/List;)I {
  +START:   #1
        vi2 = vR0.size();    [   R] 
        vi3 = vR1.size();    [i   R] 
        vi4 = (vi2-vi3);    
        if vi2<35 goto B32;   
  +B25:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B100;   
  +B32:   #1
        vi5 = vi4;    
  +B36:   #1
        if vi5< 0 goto B97;   
  +B41:   #1
        vi6 = 0;    
        vi7 = vi5;    
  +B48:   #1
        if vi6>=vi3 goto B88;   
  +B54:   #1
        if eq@special(vR1.get(vi6),vR0.get(vi7))!=0 goto B79;   
  +B76:   #1
        goto +B91;   [iiiiii  .. ..]
  +B79:   #1
        vi6++;   
        vi7++;   
        goto +B48;   [iiiiii  .. ..]
  +B88:   #1
        return vi5;   
  +B91:   #1
        vi5--;   
        goto +B36;   [iiiiii  .. ..]
  +B97:   #1
        goto +B212;   forward return[iiiiii  .. ..]
  +B100:   #1
        if vi4>=0 goto B107;   
  +B105:   #1
        return -1;   
  +B107:   #1
        vR5 = vR0.listIterator(vi4);    [iiiiii  .. iR] 
        vi6 = vi4;    
  +B121:   #1
        if vi6< 0 goto B212;   
  +B126:   #1
        vR7 = vR1.listIterator();    [iiiRii  .. R.] 
        vi8 = 0;    
  +B137:   #1
        if vi8>=vi3 goto B203;   
  +B143:   #1
        if eq@special(vR7.next(),vR5.next())!=0 goto B197;   
  +B163:   #1
        if vi6==0 goto B206;   
  +B168:   #1
        vi9 = 0;    
  +B171:   #1
        if vi9>(vi8+1) goto B194;   
  +B180:   #1
        vR5.previous();   [iiiRiRii  .. R.] 
        vi9++;   
        goto +B171;   [iiiRiRii  .. ..]
  +B194:   #1
        goto +B206;   [iiiRiRii  .. ..]
  +B197:   #1
        vi8++;   
        goto +B137;   [iiiRiRii  .. ..]
  +B203:   #1
        return vi6;   
  +B206:   #2
        vi6--;   
        goto +B121;   [iiiRiRii  .. ..]
  +B212:   #2
        return -1;   
  +END:   #1
 }
// Register: rd 36/36 wr 23 swaps 0 any 18 found 0 lastIndexOfSubList
 
 method unmodifiableCollection(Ljava/util/Collection;)Ljava/util/Collection; {
  +START:   #1
        return new java/util/Collections$UnmodifiableCollection(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 unmodifiableCollection
 
 method unmodifiableSet(Ljava/util/Set;)Ljava/util/Set; {
  +START:   #1
        return new java/util/Collections$UnmodifiableSet(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 unmodifiableSet
 
 method unmodifiableSortedSet(Ljava/util/SortedSet;)Ljava/util/SortedSet; {
  +START:   #1
        return new java/util/Collections$UnmodifiableSortedSet(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 unmodifiableSortedSet
 
 method unmodifiableNavigableSet(Ljava/util/NavigableSet;)Ljava/util/NavigableSet; {
  +START:   #1
        return new java/util/Collections$UnmodifiableNavigableSet(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 unmodifiableNavigableSet
 
 method unmodifiableList(Ljava/util/List;)Ljava/util/List; {
  +START:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B18;   
  +B7:   #1
        b0 = new java/util/Collections$UnmodifiableRandomAccessList(vR0);    [ R  i.][ R . iRR]
        goto +B26b0;   forward return[ R . ...]
  +B18:   #1
        b0 = new java/util/Collections$UnmodifiableList(vR0);    [ R . i..][ R . iRR]
  +B26b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 0 found 0 unmodifiableList
 
 method unmodifiableMap(Ljava/util/Map;)Ljava/util/Map; {
  +START:   #1
        return new java/util/Collections$UnmodifiableMap(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 unmodifiableMap
 
 method unmodifiableSortedMap(Ljava/util/SortedMap;)Ljava/util/SortedMap; {
  +START:   #1
        return new java/util/Collections$UnmodifiableSortedMap(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 unmodifiableSortedMap
 
 method unmodifiableNavigableMap(Ljava/util/NavigableMap;)Ljava/util/NavigableMap; {
  +START:   #1
        return new java/util/Collections$UnmodifiableNavigableMap(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 unmodifiableNavigableMap
 
 method synchronizedCollection(Ljava/util/Collection;)Ljava/util/Collection; {
  +START:   #1
        return new java/util/Collections$SynchronizedCollection(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 synchronizedCollection
 
 method synchronizedCollection(Ljava/util/Collection;Ljava/lang/Object;)Ljava/util/Collection; {
  +START:   #1
        return new java/util/Collections$SynchronizedCollection(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 synchronizedCollection
 
 method synchronizedSet(Ljava/util/Set;)Ljava/util/Set; {
  +START:   #1
        return new java/util/Collections$SynchronizedSet(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 synchronizedSet
 
 method synchronizedSet(Ljava/util/Set;Ljava/lang/Object;)Ljava/util/Set; {
  +START:   #1
        return new java/util/Collections$SynchronizedSet(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 synchronizedSet
 
 method synchronizedSortedSet(Ljava/util/SortedSet;)Ljava/util/SortedSet; {
  +START:   #1
        return new java/util/Collections$SynchronizedSortedSet(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 synchronizedSortedSet
 
 method synchronizedNavigableSet(Ljava/util/NavigableSet;)Ljava/util/NavigableSet; {
  +START:   #1
        return new java/util/Collections$SynchronizedNavigableSet(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 synchronizedNavigableSet
 
 method synchronizedList(Ljava/util/List;)Ljava/util/List; {
  +START:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B18;   
  +B7:   #1
        b0 = new java/util/Collections$SynchronizedRandomAccessList(vR0);    [ R  i.][ R . iRR]
        goto +B26b0;   forward return[ R . ...]
  +B18:   #1
        b0 = new java/util/Collections$SynchronizedList(vR0);    [ R . i..][ R . iRR]
  +B26b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 0 found 0 synchronizedList
 
 method synchronizedList(Ljava/util/List;Ljava/lang/Object;)Ljava/util/List; {
  +START:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B19;   
  +B7:   #1
        b0 = new java/util/Collections$SynchronizedRandomAccessList(vR0,vR1);    [ R  i.][ R . iRRR]
        goto +B28b0;   forward return[ R . ....]
  +B19:   #1
        b0 = new java/util/Collections$SynchronizedList(vR0,vR1);    [ R . i...][ R . iRRR]
  +B28b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 0 any 0 found 0 synchronizedList
 
 method synchronizedMap(Ljava/util/Map;)Ljava/util/Map; {
  +START:   #1
        return new java/util/Collections$SynchronizedMap(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 synchronizedMap
 
 method synchronizedSortedMap(Ljava/util/SortedMap;)Ljava/util/SortedMap; {
  +START:   #1
        return new java/util/Collections$SynchronizedSortedMap(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 synchronizedSortedMap
 
 method synchronizedNavigableMap(Ljava/util/NavigableMap;)Ljava/util/NavigableMap; {
  +START:   #1
        return new java/util/Collections$SynchronizedNavigableMap(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 synchronizedNavigableMap
 
 method checkedCollection(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection; {
  +START:   #1
        return new java/util/Collections$CheckedCollection(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 checkedCollection
 
 method zeroLengthArray(Ljava/lang/Class;)[Ljava/lang/Object; {
  +START:   #1
        return ([Ljava/lang/Object;)(newInstance@special(vR0,0));   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 zeroLengthArray
 
 method checkedQueue(Ljava/util/Queue;Ljava/lang/Class;)Ljava/util/Queue; {
  +START:   #1
        return new java/util/Collections$CheckedQueue(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 checkedQueue
 
 method checkedSet(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set; {
  +START:   #1
        return new java/util/Collections$CheckedSet(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 checkedSet
 
 method checkedSortedSet(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet; {
  +START:   #1
        return new java/util/Collections$CheckedSortedSet(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 checkedSortedSet
 
 method checkedNavigableSet(Ljava/util/NavigableSet;Ljava/lang/Class;)Ljava/util/NavigableSet; {
  +START:   #1
        return new java/util/Collections$CheckedNavigableSet(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 checkedNavigableSet
 
 method checkedList(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List; {
  +START:   #1
        if (vR0 instanceof java/util/RandomAccess)==0 goto B19;   
  +B7:   #1
        b0 = new java/util/Collections$CheckedRandomAccessList(vR0,vR1);    [ R  i.][ R . iRRR]
        goto +B28b0;   forward return[ R . ....]
  +B19:   #1
        b0 = new java/util/Collections$CheckedList(vR0,vR1);    [ R . i...][ R . iRRR]
  +B28b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 0 any 0 found 0 checkedList
 
 method checkedMap(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map; {
  +START:   #1
        return new java/util/Collections$CheckedMap(vR0,vR1,vR2);   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 checkedMap
 
 method checkedSortedMap(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap; {
  +START:   #1
        return new java/util/Collections$CheckedSortedMap(vR0,vR1,vR2);   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 checkedSortedMap
 
 method checkedNavigableMap(Ljava/util/NavigableMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/NavigableMap; {
  +START:   #1
        return new java/util/Collections$CheckedNavigableMap(vR0,vR1,vR2);   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 checkedNavigableMap
 
 method emptyIterator()Ljava/util/Iterator; {
  +START:   #1
        return EMPTY_ITERATOR;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyIterator
 
 method emptyListIterator()Ljava/util/ListIterator; {
  +START:   #1
        return EMPTY_ITERATOR;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyListIterator
 
 method emptyEnumeration()Ljava/util/Enumeration; {
  +START:   #1
        return EMPTY_ENUMERATION;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyEnumeration
 
 method emptySet()Ljava/util/Set; {
  +START:   #1
        return EMPTY_SET;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptySet
 
 method emptySortedSet()Ljava/util/SortedSet; {
  +START:   #1
        return access$000@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptySortedSet
 
 method emptyNavigableSet()Ljava/util/NavigableSet; {
  +START:   #1
        return access$000@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyNavigableSet
 
 method emptyList()Ljava/util/List; {
  +START:   #1
        return EMPTY_LIST;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyList
 
 method emptyMap()Ljava/util/Map; {
  +START:   #1
        return EMPTY_MAP;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyMap
 
 method singleton(Ljava/lang/Object;)Ljava/util/Set; {
  +START:   #1
        return new java/util/Collections$SingletonSet(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 singleton
 
 method singletonIterator(Ljava/lang/Object;)Ljava/util/Iterator; {
  +START:   #1
        return new java/util/Collections$1(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 singletonIterator
 
 method singletonSpliterator(Ljava/lang/Object;)Ljava/util/Spliterator; {
  +START:   #1
        return new java/util/Collections$2(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 singletonSpliterator
 
 method singletonList(Ljava/lang/Object;)Ljava/util/List; {
  +START:   #1
        return new java/util/Collections$SingletonList(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 singletonList
 
 method singletonMap(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map; {
  +START:   #1
        return new java/util/Collections$SingletonMap(vR0,vR1);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 singletonMap
 
 method nCopies(ILjava/lang/Object;)Ljava/util/List; {
  +START:   #1
        if vi0>=0 goto B31;   
  -B4:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra("List length = ").append@extra(vi0).toString@extra());   [ RRR ii. RR.] 
        throw b0;   
  +B31:   #1
        return new java/util/Collections$CopiesList(vi0,vR1);   
  +END:   #1
 }
// Register: rd 8/8 wr 8 swaps 2 any 2 found 0 nCopies
 
 method reverseOrder()Ljava/util/Comparator; {
  +START:   #1
        return REVERSE_ORDER;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 reverseOrder
 
 method reverseOrder(Ljava/util/Comparator;)Ljava/util/Comparator; {
  +START:   #1
        if vR0!=null goto B8;   
  +B4:   #1
        return reverseOrder@special();   
  +B8:   #1
        if (vR0 instanceof java/util/Collections$ReverseComparator)==0 goto B17;   
  +B15:   #1
        return 0;   
  -B17:   #1
        throw new java/util/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 1 found 0 reverseOrder
 
 method enumeration(Ljava/util/Collection;)Ljava/util/Enumeration; {
  +START:   #1
        return new java/util/Collections$3(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 enumeration
 
 method list(Ljava/util/Enumeration;)Ljava/util/ArrayList; {
  +START:   #1
        vR1 = new java/util/ArrayList();    [ R  i][ R  iR]
  +B8:   #1
        if vR0.hasMoreElements()==0 goto B31;   
  +B17:   #1
        vR1.add(vR0.nextElement());   [R R i RR] 
        goto +B8;   [R R i ..]
  +B31:   #1
        return vR1;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 1 any 0 found 0 list
 
 method eq(Ljava/lang/Object;Ljava/lang/Object;)Z {
  +START:   #1
        if vR0!=null goto B16;   
  +B4:   #1
        if vR1!=null goto B12;   
  +B8:   #1
        b0 = 1;    
        goto +B21b0;   forward return[ i  ]
  +B12:   #1
        b0 = 0;    
        goto +B21b0;   forward return[ i  ]
  +B16:   #1
        b0 = vR0.equals@this(vR1);    [ b  RR] 
  +B21b0:   #2 boolean
        return b0;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 2 found 0 eq
 
 method frequency(Ljava/util/Collection;Ljava/lang/Object;)I {
  +START:   #1
        vi2 = 0;    
        if vR1!=null goto B44;   
  +B6:   #1
        vR3 = vR0.iterator();    [i   R] 
  +B13:   #1
        if vR3.hasNext()==0 goto B41;   
  +B22:   #1
        vR4 = vR3.next();    [iR   R] 
        if vR4!=null goto B38;   
  +B35:   #1
        vi2++;   
  +B38:   #1
        goto +B13;   [iRR   .]
  +B41:   #1
        goto +B83;   forward return[iRR   .]
  +B44:   #1
        vR3 = vR0.iterator();    [iRR   R] 
  +B51:   #1
        if vR3.hasNext()==0 goto B83;   
  +B60:   #1
        vR4 = vR3.next();    [iRR   R] 
        if vR1.equals(vR4)==0 goto B80;   
  +B77:   #1
        vi2++;   
  +B80:   #1
        goto +B51;   [iRR   ..]
  +B83:   #2
        return vi2;   
  +END:   #1
 }
// Register: rd 12/12 wr 7 swaps 0 any 4 found 0 frequency
 
 method disjoint(Ljava/util/Collection;Ljava/util/Collection;)Z {
  +START:   #1
        vR2 = vR1;    
        vR3 = vR0;    
        if (vR0 instanceof java/util/Set)==0 goto B18;   
  +B11:   #1
        vR3 = vR1;    
        vR2 = vR0;    
        goto +B64;   [RR   ..]
  +B18:   #1
        if (vR1 instanceof java/util/Set)!=0 goto B64;   
  +B25:   #1
        vi4 = vR0.size();    [RRRR   R.] 
        vi5 = vR1.size();    [RRiR   R.] 
        if vi4==0 goto B51;   
  +B46:   #1
        if vi5!=0 goto B53;   
  +B51:   #1
        return 1;   
  +B53:   #1
        if vi4<=vi5 goto B64;   
  +B60:   #1
        vR3 = vR1;    
        vR2 = vR0;    
  +B64:   #3
        vR4 = vR3.iterator();    [RR   R.] 
  +B72:   #1
        if vR4.hasNext()==0 goto B107;   
  +B82:   #1
        vR5 = vR4.next();    [RRR   R.] 
        if vR2.contains(vR5)==0 goto B104;   
  +B102:   #1
        return 0;   
  +B104:   #1
        goto +B72;   [RRRR   ..]
  +B107:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 18/18 wr 10 swaps 0 any 9 found 0 disjoint
 
 method addAll(Ljava/util/Collection;[Ljava/lang/Object;)Z {
  +START:   #1
        vi2 = 0;    
        vR3 = vR1;    
        vi4 = vR3.length;    
        vi5 = 0;    
  +B11:   #1
        if vi5>=vi4 goto B41;   
  +B18:   #1
        vR6 = vR3[vi5];    
        vi2 = (vi2 | vR0.add(vR6));    
        vi5++;   
        goto +B11;   [iRiiR   ..]
  +B41:   #1
        return vi2;   
  +END:   #1
 }
// Register: rd 11/11 wr 7 swaps 0 any 4 found 1 addAll
 
 method newSetFromMap(Ljava/util/Map;)Ljava/util/Set; {
  +START:   #1
        return new java/util/Collections$SetFromMap(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 newSetFromMap
 
 method asLifoQueue(Ljava/util/Deque;)Ljava/util/Queue; {
  +START:   #1
        return new java/util/Collections$AsLIFOQueue(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 asLifoQueue
 
 method <clinit>()V {
  +START:   #1
        b0 = new java/util/Collections$EmptySet(0);    [ R  i][ R . iRR]
        EMPTY_SET = b0;   
        b0 = new java/util/Collections$EmptyList(0);    [ R . i..][ R . iRR]
        EMPTY_LIST = b0;   
        b0 = new java/util/Collections$EmptyMap(0);    [ R . i..][ R . iRR]
        EMPTY_MAP = b0;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 6 swaps 0 any 0 found 3 <clinit>
}
