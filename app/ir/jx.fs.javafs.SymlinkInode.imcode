class jx/fs/javafs/SymlinkInode {
 
 method <init>(Ljx/fs/javafs/FileSystem;Ljx/fs/javafs/Super;ILjx/fs/javafs/InodeData;Ljx/fs/buffer/BufferCache;Ljx/fs/javafs/InodeCache;Ljx/zero/Clock;)V {
  +START:   #1
        vR0.<init>@special(vR1,vR2,vi3,vR4,vR5,vR6,vR7);   [   RRRRiRRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method isSymlink()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isSymlink
 
 method isFile()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isFile
 
 method isDirectory()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isDirectory
 
 method isWritable()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isWritable
 
 method isReadable()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isReadable
 
 method isExecutable()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isExecutable
 
 method readdirNames()[Ljava/lang/String; {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR1 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 readdirNames
 
 method getNode(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR2 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getNode
 
 method mkdir(Ljava/lang/String;I)Ljx/fs/Node; {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR3 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 mkdir
 
 method rmdir(Ljava/lang/String;)V {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR2 = <caught exception>;    
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 rmdir
 
 method create(Ljava/lang/String;I)Ljx/fs/Node; {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR3 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 create
 
 method unlink(Ljava/lang/String;)V {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR2 = <caught exception>;    
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 unlink
 
 method symlink(Ljava/lang/String;Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR3 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 symlink
 
 method rename(Ljava/lang/String;Ljx/fs/Node;Ljava/lang/String;)V {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoDirectoryInodeException();   
  +H23<caught exception>:   #2 reference
        vR4 = <caught exception>;    
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 23 handler 23 type 21
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 rename
 
 method read(ILjx/zero/Memory;II)I {
  +START:   #1
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoFileInodeException();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 read
 
 method read(Ljx/zero/Memory;II)I {
  +START:   #1
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoFileInodeException();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 read
 
 method write(ILjx/zero/Memory;II)I {
  +START:   #1
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoFileInodeException();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 write
 
 method write(Ljx/zero/Memory;II)I {
  +START:   #1
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  -B15:   #1
        throw new jx/fs/NoFileInodeException();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 write
 
 method setSymlink(Ljava/lang/String;)V {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  +B15:   #1
        if vR0.permission@this(2)!=0 goto B31;   
  -B23:   #1
        throw new jx/fs/PermissionException();   
  +B31:   #1
        vi4 = vR1.length@extra();    [ R  R.] 
        if vi4<=(vR0.i_sb.s_blocksize-1) goto B62;   
  +B51:   #1
        vi4 = (vR0.i_sb.s_blocksize-1);    
  +B62:   #1
        if vi4<60 goto B125;   
  +B69:   #1
        vR3 = vR0.bread@this(0,1);    [??i R  iiR] 
        if vR3!=null goto B97;   
  -B80:   #1
        vR0.setDirty@this(1);   [?Ri R  iR.] 
        vR0.decUseCount@this();   [?Ri R  R..] 
        throw new jx/fs/InodeIOException();   
  +B97:   #1
        vR2 = new jx/fs/javafs/SymlinkBlockData(vR3,0);    [ R  i..][ R . iiRR]
        vR2.i_symlink(vR1);   [RRi R . RR..] 
        vR0.bufferCache.bdwrite(vR3);   [RRi R . RR..] 
        goto +B133;   [RRi R . ....]
  +B125:   #1
        vR0.i_data.i_symlink@extra(vR1);   [RRi R . RR..] 
  +B133:   #1
        vR0.i_data.i_size@extra(vi4);   [RRi R . iR..] 
        vR0.i_data.i_links_count@extra((short)(vR0.i_data.i_links_count@extra()-1));   [RRi R i iR..] 
        vR0.setDirty@this(1);   [RRi R i iR..] 
  +B164:   #1
        goto +B168;   forward return[RRi R . ....]
  +H167<caught exception>:   #1 reference
        vR2 = <caught exception>;    
  +B168:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 164 handler 167 type 21
 }
// Register: rd 20/20 wr 7 swaps 1 any 3 found 0 setSymlink
 
 method getSymlink()Ljava/lang/String; {
  +START:   #2
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  +B15:   #1
        if vR0.permission@this(2)!=0 goto B31;   
  -B23:   #1
        throw new jx/fs/PermissionException();   
  +B31:   #1
        vi4 = vR0.i_data.i_size@extra();    [ RR  R.] 
        if vi4<60 goto B136;   
  +B47:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i.][ RR  iR]
        b0.println(b1.append@extra("len = ").append@extra(vi4).append@extra(", normal symlink").toString@extra());   [???i RR iii.. RR..] 
        vR2 = vR0.bread@this(0,1);    [???i RR iii.. iiR.] 
        if vR2!=null goto B106;   
  -B89:   #1
        vR0.setDirty@this(1);   [?R?i RR ..... iR..] 
        vR0.decUseCount@this();   [?R?i RR ..... R...] 
        throw new jx/fs/InodeIOException();   
  +B106:   #1
        vR1 = new jx/fs/javafs/SymlinkBlockData(vR2,0);    [ RR ..... i...][ RR ..... iiRR]
        vR3 = vR1.i_symlink(vi4);    [RR?i RR ..... iR..] 
        vR0.bufferCache.brelse(vR2);   [RRRi RR ..... RR..] 
        goto +B146;   [RRRi RR ..... ....]
  +B136:   #1
        vR3 = vR0.i_data.i_symlink@extra(vi4);    [RRRi RR ..... iR..] 
  +B146:   #1
        b0 = vR3;    
  +B147b0:   #1 reference
        return b0;   
  +H148<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 147 handler 148 type 21
 }
// Register: rd 17/17 wr 16 swaps 3 any 3 found 0 getSymlink
}
