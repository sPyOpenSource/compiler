class java/io/BufferedOutputStream {
 
 method <init>(Ljava/io/OutputStream;)V {
  +START:   #1
        vR0.<init>@special(vR1,512);   [   iRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljava/io/OutputStream;I)V {
  +START:   #1
        vR0.<init>@special(vR1);   [   RR] 
        vR0.buf = new byte[vi2];   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method flush()V {
  +START:   #1
        if vR0.count!=0 goto B8;   
  +B7:   #1
        return;   
  +B8:   #1
        vR0.out.write(vR0.buf,0,vR0.count);   [  ii iiRR] 
        vR0.count = 0;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 1 any 0 found 0 flush
 
 method write(I)V {
  +START:   #1
        vR0.buf[vR0.count] = (byte)(vi1 & 255);   
        vR0.count = (vR0.count+1);   
        if vR0.count!=vR0.buf.length goto B41;   
  +B37:   #1
        vR0.flush@this();   [   R] 
  +B41:   #1
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 0 swaps 0 any 0 found 0 write
 
 method write([BII)V {
  +START:   #1
        if vi3>=(vR0.buf.length-vR0.count) goto B41;   
  +B14:   #1
        arraycopy@special(vR1,vi2,vR0.buf,vR0.count,vi3);   [  Ri iiRiR]
        vR0.count = (vR0.count+vi3);   
        goto +B55;   forward return[  Ri .....]
  +B41:   #1
        vR0.flush@this();   [  .. R....] 
        vR0.out.write(vR1,vi2,vi3);   [  .. iiRR.] 
  +B55:   #1
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 2 swaps 0 any 1 found 0 write
}
