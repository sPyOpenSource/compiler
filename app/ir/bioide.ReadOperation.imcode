class bioide/ReadOperation {
 
 method <init>(Ljx/zero/Memory;ILbioide/Controller;Lbioide/Drive;IZ)V {
  +START:   #1
        vR0.<init>@special(vR1,vi2,vR3,vR4,vi5,vi6);   [   iiRRiRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method startOperation()V {
  +START:   #1
        vR0.state.set(STATE_RUNNING);   [ R i RR] 
        vR0.ioInit@this();   [ R i R.] 
        vR0.controller.setTimeout(10,0);   [ R i iiR] 
        vR0.controller.setCommandReg(32);   [ R i iR.] 
  +B35:   #1
        if vR0.count<=0 goto B132;   
  +B42:   #1
        vi1 = 100;    
  +B45:   #1
        if vi1> 0 goto B59;   
  -B49:   #1
        throw new bioide/IDEException("timeout");   
  +B59:   #1
        sleepManager.mdelay(50);   [i R . iR.] 
        vi1--;   
        if vR0.controller.statusBusy()!=0 goto B45;   
  +B82:   #1
        sleepManager.mdelay(50);   [i R . iR.] 
        if (vR0.controller.getStatus() & -119)==8 goto B125;   
  -B107:   #1
        vR0.controller.getStatus();   [i R . R..] 
        throw new bioide/IDEException("Controller not ready");   
  +B125:   #1
        vR0.handler@this();   [i R . R..] 
        goto +B35;   [i R . ...]
  +B132:   #1
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 6 swaps 1 any 2 found 0 startOperation
 
 method handler()V {
  +START:   #1
        vi1 = vR0.controller.getStatus();    [   R] 
        if (vi1 & -39)==88 goto B32;   
  +B17:   #1
        vR0.controller.ideError(vR0.drive,"read interrupt",vi1);   [i  iR iRRR] 
        return;   
  +B32:   #1
        vR0.controller.inputData(vR0.buffer,vR0.offset,128);   [i  ii iiRR] 
        vR0.sector = (vR0.sector+1);   
        vR0.offset = (vR0.offset+128);   
        vR0.errors = 0;   
        vR0.count = (vR0.count-1);   
        if vR0.count> 0 goto B102;   
  +B94:   #1
        vR0.endOperation@this(1);   [i  .. iR..] 
        goto +B112;   [i  .. ....]
  +B102:   #1
        vR0.controller.setTimeout(10,0);   [i  .. iiR.] 
  +B112:   #1
        vR0.state.set(STATE_COMPLETED);   [i  i. RR..] 
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 6 swaps 3 any 1 found 0 handler
}
