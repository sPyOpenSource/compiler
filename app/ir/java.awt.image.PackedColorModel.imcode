class java/awt/image/PackedColorModel {
 
 method <init>(Ljava/awt/color/ColorSpace;I[IIZII)V {
  +START:   #1
        b0 = vR0;    
        b1 = vi2;    
        b2 = calcBitsPerComponent@special(vR3,vi4);    [ RiRRi  iR]
        b3 = vR1;    
        if vi4==0 goto B18;   
  +B14b0b1b2b3:   #1 reference int reference reference
        b4 = 1;    
        goto +B19b0b1b2b3b4;   [ RiRRi  ..]
  +B18b0b1b2b3:   #1 reference int reference reference
        b4 = 0;    
  +B19b0b1b2b3b4:   #1 reference int reference reference int
        b0.<init>@special(b1,b2,b3,b4,vi5,vi6,vi7);   [ RiRRi  iiiiRRiR] 
        vR0.initMasks@special(vR3,vi4);   [ RiRRi  iRR.....] 
        if vi2<1 goto B46;   
  +B40:   #1
        if vi2<=32 goto B56;   
  -B46:   #1
        throw new java/lang/IllegalArgumentException("pixels per bits must be in the range [1, 32]");   
  +B56:   #1
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 6 swaps 0 any 6 found 0 <init>
 
 method calcBitsPerComponent([II)[I {
  +START:   #1
        vi2 = vR0.length;    
        if vi1==0 goto B10;   
  +B7:   #1
        vi2++;   
  +B10:   #1
        vR3 = new int[vi2];    
        vR4 = new gnu/java/awt/BitMaskExtent();    [ R  i.][ R  iR]
        vi5 = 0;    
  +B26:   #1
        if vi5>=vR0.length goto B58;   
  +B33:   #1
        vR4.setMask@extra((long)vR0[vi5]);   [iRRi R  ??R] 
        vR3[vi5] = vR4.bitWidth;   
        vi5++;   
        goto +B26;   [iRRi R  ...]
  +B58:   #1
        if vi1==0 goto B79;   
  +B62:   #1
        vR4.setMask@extra((long)vi1);   [iRRi R  ??R] 
        vR3[(vi2-1)] = vR4.bitWidth;   
  +B79:   #1
        return vR3;   
  +END:   #1
 }
// Register: rd 17/17 wr 6 swaps 0 any 5 found 0 calcBitsPerComponent
 
 method initMasks([II)V {
  +START:   #1
        vi3 = vR1.length;    
        if vi2!=0 goto B15;   
  +B7:   #1
        vR0.masks = vR1;   
        goto +B45;   [i Ri  ]
  +B15:   #1
        vR0.masks = new int[(vi3+1)];   
        arraycopy@special(vR1,0,vR0.masks,0,vi3);   [iRi Ri R iiRiR]
        b0 = vR0.masks;    
        b1 = vi3;    
        vi3++;   
        b0[b1] = vi2;   
  +B45:   #1
        vR0.shifts = new int[vi3];   
        vR4 = new gnu/java/awt/BitMaskExtent();    [ Ri . i....][ Ri . iR...]
        vi5 = 0;    
  +B64:   #1
        if vi5>=vi3 goto B101;   
  +B70:   #1
        vR4.setMask@extra((long)vR0.masks[vi5]);   [iRi Ri . ??R..] 
        vR0.shifts[vi5] = vR4.leastSignificantBit;   
        vi5++;   
        goto +B64;   [iRi Ri . .....]
  +B101:   #1
        return;   
  +END:   #1
 }
// Register: rd 22/22 wr 8 swaps 0 any 6 found 0 initMasks
 
 method <init>(Ljava/awt/color/ColorSpace;IIIIIZII)V {
  +START:   #1
        vR0.<init>@special(vR1,vi2,makeColorMaskArray@special(vi3,vi4,vi5),vi6,vi7,vi8,vi9);   [  i iiiiRiRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 1 any 0 found 0 <init>
 
 method makeColorMaskArray(III)[I {
  +START:   #1
        b0 = new int[3];    
        b0[0] = vi0;   
        b0[1] = vi1;   
        b0[2] = vi2;   
        vR3 = b0;    
        return vR3;   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 0 any 4 found 0 makeColorMaskArray
 
 method getMask(I)I {
  +START:   #1
        return vR0.masks[vi1];   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 getMask
 
 method getMasks()[I {
  +START:   #1
        return vR0.masks;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMasks
 
 method createCompatibleSampleModel(II)Ljava/awt/image/SampleModel; {
  +START:   #1
        return new java/awt/image/SinglePixelPackedSampleModel(vR0.transferType,vi1,vi2,vR0.masks);   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 0 any 0 found 0 createCompatibleSampleModel
 
 method isCompatibleSampleModel(Ljava/awt/image/SampleModel;)Z {
  +START:   #1
        if vR0.isCompatibleSampleModel@special(vR1)!=0 goto B10;   
  +B8:   #1
        return 0;   
  +B10:   #1
        if (vR1 instanceof java/awt/image/SinglePixelPackedSampleModel)!=0 goto B19;   
  +B17:   #1
        return 0;   
  +B19:   #1
        vR2 = (java/awt/image/SinglePixelPackedSampleModel)(vR1);    
        return equals@special(vR2.getBitMasks(),vR0.masks);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 1 found 1 isCompatibleSampleModel
 
 method getAlphaRaster(Ljava/awt/image/WritableRaster;)Ljava/awt/image/WritableRaster; {
  +START:   #1
        if vR0.hasAlpha@this()!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR2 = vR1.getSampleModel();    [ R  R] 
        b0 = new int[1];    
        b0[0] = (vR2.getNumBands@extra()-1);   
        vR3 = b0;    
        vR4 = vR2.createSubsetSampleModel(vR3);    [RR R  RR] 
        vR5 = vR1.getDataBuffer();    [RRR R  R.] 
        vR6 = new java/awt/Point(0,0);    [ R  i.][ R . iiiR]
        return createWritableRaster@special(vR4,vR5,vR6);   
  +END:   #1
 }
// Register: rd 8/8 wr 7 swaps 0 any 1 found 0 getAlphaRaster
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        if vR0.equals@special(vR1)!=0 goto B10;   
  +B8:   #1
        return 0;   
  +B10:   #1
        if (vR1 instanceof java/awt/image/PackedColorModel)!=0 goto B19;   
  +B17:   #1
        return 0;   
  +B19:   #1
        vR2 = (java/awt/image/PackedColorModel)(vR1);    
        return equals@special(vR0.masks,vR2.masks);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 1 found 1 equals
}
