class jx/fs/FilesystemImpl {
 
 method <init>(Ljx/fs/FileSystem;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        b1 = new jx/fs/EXT2Permission(7,0,0);    [ ?R  i][ ?R . iiiiR]
        vR0.defaultPermission = b1;   
        b1 = new java/util/Vector();    [ ?R . i....][ ?R . iR...]
        vR0.fsobjList = b1;   
        vR0.umounted = 1;   
        vR0.fs = vR1;   
        vR0.mount@this();   [ ?R . R....] 
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 3 swaps 0 any 0 found 0 <init>
 
 method getName()Ljava/lang/String; {
  +START:   #1
        return vR0.fs.name();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getName
 
 method openRootDirectoryRO()Ljx/fs/FSObject; {
  +START:   #1
        vR0.rInode.incUseCount();   [ ?R  R] 
        b1 = new jx/fs/ReadOnlyDirectoryImpl(vR0,vR0.fs,0,vR0.rInode);    [ ?R  i][ ?R . iRRRRR]
        return vR0.registerFSObj@this(b1);   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 openRootDirectoryRO
 
 method openRootDirectoryRW()Ljx/fs/FSObject; {
  +START:   #1
        vR0.rInode.incUseCount();   [ ?R  R] 
        b1 = new jx/fs/DirectoryImpl(vR0,vR0.fs,0,vR0.rInode);    [ ?R  i][ ?R . iRRRRR]
        return vR0.registerFSObj@this(b1);   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 openRootDirectoryRW
 
 method getDefaultPermission()Ljx/fs/Permission; {
  +START:   #1
        return vR0.defaultPermission;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getDefaultPermission
 
 method mount()V {
  +START:   #1
        if vR0.umounted!=0 goto B8;   
  +B7:   #1
        return;   
  +B8:   #1
        vR0.fs.init(1);   [   iR] 
        vR0.rInode = vR0.fs.getRootNode();   
        vR0.umounted = 0;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 mount
 
 method unmount()V {
  +START:   #1
        vR0.umounted = 1;   
  +B5:   #1
        vi1 = 0;    
  +B7:   #1
        if vi1>=vR0.fsobjList.size@extra() goto B48;   
  +B18:   #1
        vR2 = (jx/fs/FSObjectImpl)(vR0.fsobjList.elementAt(vi1));    
        vR2.close();   [iR  . R.] 
  +B34:   #1
        goto +B42;   [iR  . ..]
  +H37<caught exception>:   #1 reference
        vR2 = <caught exception>;    
        vR2.printStackTrace();   [iR  . R.] 
  +B42:   #1
        vi1++;   
        goto +B7;   [iR  . ..]
  +B48:   #1
        vR0.fsobjList.removeAllElements@extra();   [iR  . R.] 
        vR0.rInode.decUseCount();   [iR  . R.] 
  +B64:   #1
        goto +B72;   [iR  . ..]
  +H67<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [RR  . R.] 
  +B72:   #1
        vR0.rInode = 0;   
        vR0.fs.release();   [iR  . R.] 
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
18 - 34 handler 37 type 84
5 - 64 handler 67 type 84
 }
// Register: rd 14/14 wr 6 swaps 0 any 2 found 1 unmount
 
 method registerFSObj(Ljx/fs/FSObjectImpl;)Ljx/fs/FSObjectImpl; {
  +START:   #1
        if vR0.umounted==0 goto B21;   
  +B7:   #1
        vR1.close();   [   R] 
  +B11:   #1
        goto +B19;   forward return[   .]
  +H14<caught exception>:   #1 reference
        vR2 = <caught exception>;    
        vR2.printStackTrace();   [R   R] 
  +B19:   #1
        return 0;   
  +B21:   #1
        vR0.fsobjList.addElement@extra(vR1);   [   RR] 
        return vR1;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
7 - 11 handler 14 type 84
 }
// Register: rd 5/5 wr 1 swaps 0 any 0 found 0 registerFSObj
 
 method finalize()V {
  +START:   #1
        if vR0.umounted!=0 goto B11;   
  +B7:   #1
        vR0.unmount@this();   [   R] 
  +B11:   #1
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 finalize
}
