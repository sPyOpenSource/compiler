class test/portal/scale/CreateSpeed {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method main([Ljava/lang/String;)V {
  +START:   #1
        vR1 = getInitialNaming@special();    
        vR2 = (jx/zero/Clock)(getInitialNaming@special().lookup("Clock"));    
        vR3 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR4 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR5 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR6 = "mini_domain.jll";    
        vR7 = "test/portal/scale/MiniDomainSilent";    
        vR8 = 0;    
        vi9 = 100000;    
        vi10 = 2048;    
        vi11 = 40960;    
        vi12 = 9216;    
        vi13 = 100;    
        vR14 = (jx/zero/DomainManager)(vR1.lookup("DomainManager"));    
        vR15 = (jx/zero/MemoryManager)(vR1.lookup("MemoryManager"));    
        vi16 = 0;    
  +B106:   #1
        if vi16>=100 goto B122;   
  +B113:   #1
        yield@special();   [RRRRRRRRiiiiiRRi RR .... ..]
        vi16++;   
        goto +B106;   [RRRRRRRRiiiiiRRi RR .... ..]
  +B122:   #1
        if vR0.length<=2 goto B159;   
  +B128:   #1
        vi13 = parseInt@special(vR0[0]);    [RRRRRRRRiiiiiRRi RR R... R.]
        vi10 = parseInt@special(vR0[1]);    [RRRRRRRRiiiiiRRi RR RR.. R.]
        vi9 = vi10;    
        vi11 = (parseInt@special(vR0[2])*vi10);    
  +B159:   #1
        vi16 = vR15.getTotalFreeMemory();    [RRRRRRRRiiiiiRRi RR .... R.] 
        vi17 = 100;    
  +B172:   #1
        vR2.getCycles(vR3);   [RRRRRRRRiiiiiRRii RR .... RR] 
        vi17 = 0;    
  +B182:   #1
        if vi17>=vi13 goto B227;   
  +B189:   #1
        b0 = new java/lang/StringBuilder();    [ RR .... i.][ RR .... iR]
        createDomain@special(b0.append@extra("D").append@extra(vi17).toString@extra(),vR6,vR7,vi9,vi12);   [RRRRRRRRiiiiiRRii RR iR.. iiRRR]
        vi17++;   
        goto +B182;   [RRRRRRRRiiiiiRRii RR iR.. .....]
  +B227:   #2
        goto +B232;   [RRRRRRRRiiiiiRRii RR .... .....]
  +H230<caught exception>:   #1 reference
        vR18 = <caught exception>;    
  +B232:   #1
        yield@special();   [RRRRRRRRiiiiiRRii RR .... .....]
        vR2.getCycles(vR4);   [RRRRRRRRiiiiiRRii RR .... RR...] 
        vR2.subtract(vR5,vR4,vR3);   [RRRRRRRRiiiiiRRii RR .... RRRR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .... i....][ RR .... iR...]
        b0.println(b1.append@extra("time to create and activate ").append@extra(vi17).append@extra("=").append@extra(vR2.toMicroSec(vR5)).append@extra(" microseconds").toString@extra());   [RRRRRRRRiiiiiRRii RR ii.iii... RR....] 
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
172 - 227 handler 230 type 81
 }
// Register: rd 24/24 wr 47 swaps 9 any 5 found 0 main
 
 method <clinit>()V {
  +START:   #1
        verbose = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 <clinit>
}
