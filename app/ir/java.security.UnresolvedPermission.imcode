class java/security/UnresolvedPermission {
 
 method <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/security/Certificate;)V {
  +START:   #1
        vR0.<init>@special(vR2);   [   RR] 
        vR0.type = vR1;   
        vR0.actions = vR3;   
        vR0.certs = vR4;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 0 swaps 0 any 0 found 0 <init>
 
 method getActions()Ljava/lang/String; {
  +START:   #1
        return vR0.actions;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getActions
 
 method implies(Ljava/security/Permission;)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 implies
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        if (vR1 instanceof java/security/UnresolvedPermission)!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR2 = (java/security/UnresolvedPermission)(vR1);    
        if vR0.getName@this().equals@extra(vR2.getName())!=0 goto B30;   
  +B28:   #1
        return 0;   
  +B30:   #1
        if vR0.getActions@this().equals@extra(vR2.getActions())!=0 goto B46;   
  +B44:   #1
        return 0;   
  +B46:   #1
        if vR0.type.equals@extra(vR2.type)!=0 goto B62;   
  +B60:   #1
        return 0;   
  +B62:   #1
        if vR0.certs.equals(vR2.certs)!=0 goto B78;   
  +B76:   #1
        return 0;   
  +B78:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 11/11 wr 7 swaps 4 any 1 found 1 equals
 
 method hashCode()I {
  +START:   #1
        return identityHashCode@special(vR0);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hashCode
 
 method toString()Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra("(unresolved ").append@extra(vR0.type).append@extra(" ").append@extra(vR0.getName@this()).append@extra(" ").append@extra(vR0.getActions@this()).append@extra(")").toString@extra();   
  +END:   #1
 }
// Register: rd 4/4 wr 15 swaps 7 any 0 found 0 toString
 
 method newPermissionCollection()Ljava/security/PermissionCollection; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 newPermissionCollection
}
