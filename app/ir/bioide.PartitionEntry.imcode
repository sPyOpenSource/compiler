class bioide/PartitionEntry {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Lbioide/Drive;IIZI)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.drive = vR1;   
        vR0.start = vi2;   
        vR0.size = vi3;   
        vR0.accessable = vi4;   
        vR0.os = vi5;   
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 0 swaps 0 any 0 found 0 <init>
 
 method getCapacity()I {
  +START:   #1
        return vR0.size;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCapacity
 
 method getSectorSize()I {
  +START:   #1
        return 512;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getSectorSize
 
 method readSectors(IILjx/zero/Memory;Z)V {
  +START:   #1
        vR0.drive.readSectors((vR0.start+vi1),vi2,vR3,vi4);   [  i iRiiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 readSectors
 
 method writeSectors(IILjx/zero/Memory;Z)V {
  +START:   #1
        vR0.drive.writeSectors((vR0.start+vi1),vi2,vR3,vi4);   [  i iRiiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 writeSectors
 
 method swapWithPartition(Lbioide/PartitionEntry;)V {
  +START:   #1
        vR2 = new bioide/PartitionEntry();    [ R  i][ R  iR]
        if vR1.start<=vR0.start goto B91;   
  +B19:   #1
        vR2.start = vR1.start;   
        vR2.size = vR1.size;   
        vR2.accessable = vR1.accessable;   
        vR1.start = vR0.start;   
        vR1.size = vR0.size;   
        vR1.accessable = vR0.accessable;   
        vR0.start = vR2.start;   
        vR0.size = vR2.size;   
        vR0.accessable = vR2.accessable;   
  +B91:   #1
        return;   
  +END:   #1
 }
// Register: rd 20/20 wr 1 swaps 0 any 0 found 0 swapWithPartition
}
