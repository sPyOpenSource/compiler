class jx/scheduler/LLRRobin {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?ii  R] 
        vR0.MyCPU = 0;   
        vR0.GlobalTimeSlice_init = 0;   
        vR0.GlobalTimeSlice = 0;   
        vR0.debug = 0;   
        vR0.ContainerPool = 0;   
        vR0.ContainerPoolSize = 0;   
        vR1 = getInitialNaming@special();    
        vR0.irq = (jx/zero/IRQ)(waitUntilPortalAvailable@special(vR1,"IRQ"));   
        vR0.cpuManager = (jx/zero/CPUManager)(waitUntilPortalAvailable@special(vR1,"CPUManager"));   
        vR0.SMPcpuManager = (jx/zero/SMPCPUManager)(waitUntilPortalAvailable@special(vR1,"SMPCPUManager"));   
        vR0.LLschedulerSupport = (jx/zero/LLSchedulerSupport)(waitUntilPortalAvailable@special(vR1,"LLSchedulerSupport"));   
        vR0.first = 0;   
        vR0.activeDom = 0;   
        b2 = vR0.LLschedulerSupport.getDomainTimeslice();    [R ?ii RRRR. R.] 
        b1 = b2;    
        vR0.GlobalTimeSlice_init = b2;   
        vR0.GlobalTimeSlice = b1;   
        return;   
  +END:   #1
 }
// Register: rd 23/23 wr 11 swaps 0 any 1 found 0 <init>
 
 method registered(I)V {
  +START:   #1
        vR0.MyCPU = vR0.SMPcpuManager.getMyCPU();   
        vR0.irq.installFirstLevelHandler(vi1,vR0);   [   RiR] 
        vR0.irq.enableIRQ(vi1);   [   iR.] 
        vR0.LLschedulerSupport.tuneTimer(vR0.GlobalTimeSlice);   [  i iR.] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 1 swaps 1 any 0 found 0 registered
 
 method interrupt()V {
  +START:   #1
        if vR0.activeDom!=null goto B29;   
  +B7:   #1
        vR0.GlobalTimeSlice = vR0.GlobalTimeSlice_init;   
        vR0.LLschedulerSupport.tuneTimer(vR0.GlobalTimeSlice);   [ R i iR] 
        return;   
  +B29:   #1
        vR0.GlobalTimeSlice = (vR0.GlobalTimeSlice-vR0.activeDom.DomainTimeSlice);   
        if vR0.GlobalTimeSlice< 0 goto B81;   
  +B52:   #1
        vR0.LLschedulerSupport.interruptCurrentThread();   [ R . R.] 
        vR0.LLschedulerSupport.tuneTimer(vR0.activeDom.DomainTimeSlice);   [ R i iR] 
        goto -B147;   [ R i ..]
  +B81:   #1
        vR0.LLschedulerSupport.preemptCurrentThread();   [ R . R.] 
        vR1 = vR0.nextDomain@special();    [ R . R.] 
        if vR1!=null goto B110;   
  -B100:   #1
        throw new java/lang/Error("LLRRobin::interrupt: System error: no Domain found!!");   
  +B110:   #1
        vR0.activeDom = vR1;   
        vR0.GlobalTimeSlice = (vR0.GlobalTimeSlice_init-vR0.activeDom.DomainTimeSlice);   
        vR0.LLschedulerSupport.tuneTimer(vR0.activeDom.DomainTimeSlice);   [R R i iR.] 
  -B147:   #1
        vR0.LLschedulerSupport.activateDomain(vR0.activeDom.domain);   [ R i RR.] 
        throw new java/lang/Error("should never return!");   
  +END:   #1
 }
// Register: rd 26/26 wr 7 swaps 4 any 1 found 0 interrupt
 
 method registerDomain(Ljx/zero/Domain;)V {
  +START:   #1
        if vR1!=null goto B5;   
  +B4:   #1
        return;   
  +B5:   #1
        vR3 = vR0.first;    
  +B10:   #1
        if vR3==null goto B39;   
  +B14:   #1
        if vR3.domain!=vR1 goto B31;   
  +B22:   #1
        out.println("Domain XXX already registered.");   [?R  i. RR] 
        return;   
  +B31:   #1
        vR3 = vR3.next;    
        goto +B10;   [?R  .. ..]
  +B39:   #1
        vR2 = vR0.getNewContainer@special(vR1);    [?R  .. RR] 
        vR2.next = vR0.first;   
        vR0.first = vR2;   
        if vR0.activeDom!=null goto B73;   
  +B65:   #1
        vR0.activeDom = vR0.first;   
  +B73:   #1
        return;   
  +END:   #1
 }
// Register: rd 14/14 wr 5 swaps 1 any 2 found 0 registerDomain
 
 method unregisterDomain(Ljx/zero/Domain;)V {
  +START:   #1
        if vR1!=null goto B5;   
  +B4:   #1
        return;   
  +B5:   #1
        vR2 = 0;    
        vR3 = vR0.first;    
  +B12:   #1
        if vR3==null goto B122;   
  +B16:   #1
        if vR3.domain!=vR1 goto B112;   
  +B24:   #1
        if vR0.activeDom!=vR3 goto B74;   
  +B32:   #1
        vR0.activeDom = vR0.nextDomain@special();   
        if vR0.activeDom!=vR3 goto B53;   
  +B48:   #1
        vR0.activeDom = 0;   
  +B53:   #1
        vR0.GlobalTimeSlice = vR0.GlobalTimeSlice_init;   
        vR0.LLschedulerSupport.tuneTimer(vR0.GlobalTimeSlice);   [RR  i iR] 
  +B74:   #1
        if vR3!=vR0.first goto B96;   
  +B82:   #1
        vR0.first = vR0.first.next;   
        goto +B104;   [RR  . ..]
  +B96:   #1
        vR2.next = vR3.next;   
  +B104:   #1
        vR0.releaseContainer@special(vR3);   [RR  . RR] 
        goto +B122;   forward return[RR  . ..]
  +B112:   #1
        vR2 = vR3;    
        vR3 = vR3.next;    
        goto +B12;   [RR  . ..]
  +B122:   #2
        return;   
  +END:   #1
 }
// Register: rd 25/25 wr 5 swaps 1 any 4 found 0 unregisterDomain
 
 method setTimeSlice(Ljx/zero/Domain;I)V {
  +START:   #1
        if vi2!=0 goto B9;   
  +B4:   #1
        vi2 = vR0.GlobalTimeSlice_init;    
  +B9:   #1
        if vi2>=0 goto B48;   
  +B13:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("requested TimeSlice (").append@extra(vi2).append@extra(") is less than 0").toString@extra());   [ RR iii.. RR..] 
        vi2 = vR0.GlobalTimeSlice_init;    
  +B48:   #1
        if vi2<=vR0.GlobalTimeSlice_init goto B103;   
  +B56:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ..... i...][ RR ..... iR..]
        b0.println(b1.append@extra("requested TimeSlice (").append@extra(vi2).append@extra(") is bigger than global TimeSlice (").append@extra(vR0.GlobalTimeSlice).append@extra(")").toString@extra());   [ RR iiiii.... RR....] 
        vi2 = vR0.GlobalTimeSlice_init;    
  +B103:   #1
        vR3 = vR0.first;    
  +B108:   #1
        if vR3==null goto B134;   
  +B112:   #1
        if vR3.domain!=vR1 goto B126;   
  +B120:   #1
        vR3.DomainTimeSlice = vi2;   
        return;   
  +B126:   #1
        vR3 = vR3.next;    
        goto +B108;   [R RR ......... ......]
  -B134:   #1
        out.print("Domain ");   [R RR i........ RR....] 
        vR0.LLschedulerSupport.printDomainName(vR1);   [R RR i........ RR....] 
        out.println(" not registered.");   [R RR ii....... RR....] 
        throw new java/lang/Error("System Error");   
  +END:   #1
 }
// Register: rd 21/21 wr 30 swaps 10 any 4 found 0 setTimeSlice
 
 method activate_currDomain()V {
  +START:   #1
        vR0.GlobalTimeSlice = (vR0.GlobalTimeSlice+(vR0.LLschedulerSupport.readTimer()-vR0.activeDom.DomainTimeSlice));   
        if vR0.GlobalTimeSlice< 0 goto B40;   
  +B33:   #1
        vR0.__activate_currDomain@special();   [  . R] 
        goto +B44;   forward return[  . .]
  +B40:   #1
        vR0.activate_nextDomain@this();   [  . R] 
  +B44:   #1
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 1 swaps 0 any 0 found 0 activate_currDomain
 
 method __activate_currDomain()V {
  -START:   #1
        vR0.LLschedulerSupport.tuneTimer(vR0.activeDom.DomainTimeSlice);   [ R i iR] 
        vR0.LLschedulerSupport.activateDomain(vR0.activeDom.domain);   [ R ii RR] 
        throw new java/lang/Error("should never return!");   
  +END:   #1
 }
// Register: rd 5/5 wr 3 swaps 2 any 0 found 0 __activate_currDomain
 
 method activate_nextDomain()V {
  +START:   #1
        vR1 = vR0.nextDomain@special();    [ R  R] 
        if vR1!=null goto B19;   
  -B9:   #1
        throw new java/lang/Error("LLRRobin::activate_nextDomain: System error: no Domain found!!");   
  +B19:   #1
        vR0.activeDom = vR1;   
        vR0.GlobalTimeSlice = (vR0.GlobalTimeSlice_init-vR0.activeDom.DomainTimeSlice);   
        vR0.__activate_currDomain@special();   [R R . R..] 
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 2 swaps 0 any 1 found 0 activate_nextDomain
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return "this is a LowLevel RoundRobin Scheduler (LLRRobin) Object";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 toString
 
 method dump()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.print(b1.append@extra("DomainQueue for CPU").append@extra(vR0.SMPcpuManager.getMyCPU()).append@extra(":").toString@extra());   [ RR ii.ii. RR..] 
        out.println("");   [ RR iiiii. RR..] 
        if vR0.activeDom==null goto B104;   
  +B53:   #1
        out.print("Running domain: (");   [ RR i..... RR..] 
        vR0.LLschedulerSupport.printDomainName(vR0.activeDom.domain);   [ RR ii.... RR..] 
        out.println(")");   [ RR iii... RR..] 
        vR0.LLschedulerSupport.dumpHLSched(vR0.activeDom.domain);   [ RR iiii.. RR..] 
        goto +B112;   [ RR iiii.. ....]
  +B104:   #1
        out.println("no Domain active");   [R RR i..... RR..] 
  +B112:   #1
        vR1 = vR0.first;    
  +B117:   #1
        if vR1==null goto B182;   
  +B121:   #1
        if vR1!=vR0.activeDom goto B132;   
  +B129:   #1
        goto +B174;   [R RR ...... ....]
  +B132:   #1
        out.print("Threads in Domain (");   [R RR i..... RR..] 
        vR0.LLschedulerSupport.printDomainName(vR1.domain);   [R RR ii.... RR..] 
        out.println(")");   [R RR iii... RR..] 
        vR0.LLschedulerSupport.dumpHLSched(vR1.domain);   [R RR iiii.. RR..] 
  +B174:   #1
        vR1 = vR1.next;    
        goto +B117;   [R RR ...... ....]
  +B182:   #1
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 27 swaps 14 any 2 found 0 dump
 
 method nextDomain()Ljx/scheduler/LLRRobin$DomainContainer; {
  +START:   #1
        if vR0.activeDom.next==null goto B18;   
  +B10:   #1
        return vR0.activeDom.next;   
  +B18:   #1
        return vR0.first;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 nextDomain
 
 method getNewContainer(Ljx/zero/Domain;)Ljx/scheduler/LLRRobin$DomainContainer; {
  +START:   #1
        vR2 = vR0.ContainerPool;    
        if vR2!=null goto B29;   
  +B9:   #1
        vR0.ContainerPoolSize = (vR0.ContainerPoolSize+1);   
        return new jx/scheduler/LLRRobin$DomainContainer(vR0,vR1);   
  +B29:   #1
        vR0.ContainerPool = vR0.ContainerPool.next;   
        vR2.domain = vR1;   
        vR2.next = 0;   
        return vR2;   
  +END:   #1
 }
// Register: rd 13/13 wr 2 swaps 0 any 1 found 0 getNewContainer
 
 method releaseContainer(Ljx/scheduler/LLRRobin$DomainContainer;)V {
  +START:   #1
        vR1.domain = 0;   
        vR1.DomainTimeSlice = vR0.GlobalTimeSlice_init;   
        vR1.next = vR0.ContainerPool;   
        vR0.ContainerPool = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 0 swaps 0 any 0 found 0 releaseContainer
 
 method access$000(Ljx/scheduler/LLRRobin;)I {
  +START:   #1
        return vR0.GlobalTimeSlice_init;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 access$000
}
