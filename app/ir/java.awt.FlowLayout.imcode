class java/awt/FlowLayout {
 
 method addLayoutComponent(Ljava/lang/String;Ljava/awt/Component;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 addLayoutComponent
 
 method getAlignment()I {
  +START:   #1
        return vR0.align;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getAlignment
 
 method getHgap()I {
  +START:   #1
        return vR0.hgap;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getHgap
 
 method getVgap()I {
  +START:   #1
        return vR0.vgap;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getVgap
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special(1,5,5);   [   iiiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special(vi1,5,5);   [   iiiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(III)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.setVgap@this(vi3);   [   iR] 
        vR0.setHgap@this(vi2);   [   iR] 
        vR0.setAlignment@this(vi1);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 <init>
 
 method layoutContainer(Ljava/awt/Container;)V {
  +START:   #1
        vi2 = vR1.getComponentCount();    [ i  R] 
        vR3 = vR1.component;    
        vR4 = vR1.getSize();    [iR i  R] 
        vR5 = vR1.getInsets();    [iRR i  R] 
        vi6 = 1;    
        vi7 = (vR5.top+vR0.vgap);    
        vi8 = 0;    
  +B40:   #1
        if vi8>=vi2 goto B364;   
  +B46:   #1
        vi9 = ((vR5.left+vR0.hgap)+vR5.right);    
        vi10 = 0;    
        vi12 = 0;    
        vi11 = vi8;    
  +B74:   #1
        if vi11>=vi2 goto B157;   
  +B80:   #1
        if vR3[vi11].visible!=0 goto B93;   
  +B90:   #1
        goto +B151;   [iRRRiiiiiii i  .]
  +B93:   #1
        vR13 = vR3[vi11].getPreferredSize();    [iRRRiiiiiii i  R] 
        vi14 = ((vi9+vR0.hgap)+vR13.width);    
        if vi14<=vR4.width goto B132;   
  +B127:   #1
        if vi12!=0 goto B157;   
  +B132:   #1
        vi9 = vi14;    
        vi10 = max@special(vi10,vR13.height);    [iRRRiiiiiiiRi i i ii]
        vi12 = 1;    
  +B151:   #1
        vi11++;   
        goto +B74;   [iRRRiiiiiii i . ..]
  +B157:   #2
        vi14 = vR0.align;    
        if vR0.align!=3 goto B186;   
  +B171:   #1
        if vi6==0 goto B180;   
  +B176:   #1
        b0 = 0;    
        goto +B181b0;   [iRRRiiiiiiiRi i . ..]
  +B180:   #1
        b0 = 2;    
  +B181b0:   #1 int
        vi14 = b0;    
        goto +B206;   [iRRRiiiiiiiRi i . ..]
  +B186:   #1
        if vR0.align!=4 goto B206;   
  +B194:   #1
        if vi6==0 goto B203;   
  +B199:   #1
        b0 = 2;    
        goto +B204b0;   [iRRRiiiiiiiiiiR i . ..]
  +B203:   #1
        b0 = 0;    
  +B204b0:   #1 int
        vi14 = b0;    
  +B206:   #2
        if vi14!=0 goto B226;   
  +B211:   #1
        vi13 = (vR5.left+vR0.hgap);    
        goto +B276;   [iRRRiiiiiiiii i . ..]
  +B226:   #1
        if vi14!=1 goto B266;   
  +B232:   #1
        vi13 = (((((vR4.width+vR5.left)+vR5.right)+(2*vR0.hgap))-vi9)/2);    
        goto +B276;   [iRRRiiiiiiiiiiR i . ..]
  +B266:   #1
        vi13 = (vR4.width-vi9);    
  +B276:   #2
        vi15 = vi8;    
  +B280:   #1
        if vi15>=vi11 goto B345;   
  +B287:   #1
        if vR3[vi15].visible==0 goto B339;   
  +B297:   #1
        vR16 = vR3[vi15].getPreferredSize();    [iRRRiiiiiiiiii i . R.] 
        vR3[vi15].setBounds(vi13,vi7,vR16.width,vi10);   [iRRRiiiiiiiiiiR i i iiiiR] 
        vi13 = (vi13+(vR16.width+vR0.hgap));    
  +B339:   #1
        vi15++;   
        goto +B280;   [iRRRiiiiiiiiiiR i . .....]
  +B345:   #1
        vi8 = vi11;    
        vi7 = (vi7+(vi10+vR0.vgap));    
        goto +B40;   [iRRRiiiiiiiiiiR i . .....]
  +B364:   #1
        return;   
  +END:   #1
 }
// Register: rd 63/63 wr 31 swaps 1 any 20 found 0 layoutContainer
 
 method minimumLayoutSize(Ljava/awt/Container;)Ljava/awt/Dimension; {
  +START:   #1
        return vR0.getSize@special(vR1,1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 minimumLayoutSize
 
 method preferredLayoutSize(Ljava/awt/Container;)Ljava/awt/Dimension; {
  +START:   #1
        return vR0.getSize@special(vR1,0);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 preferredLayoutSize
 
 method removeLayoutComponent(Ljava/awt/Component;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 removeLayoutComponent
 
 method setAlignment(I)V {
  +START:   #1
        if vi1==0 goto B51;   
  +B4:   #1
        if vi1==2 goto B51;   
  +B9:   #1
        if vi1==1 goto B51;   
  +B14:   #1
        if vi1==3 goto B51;   
  +B19:   #1
        if vi1==4 goto B51;   
  -B24:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra("invalid alignment: ").append@extra(vi1).toString@extra());   [ RRR ii. RR.] 
        throw b0;   
  +B51:   #5
        vR0.align = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 7 swaps 2 any 6 found 0 setAlignment
 
 method setHgap(I)V {
  +START:   #1
        if vi1>=0 goto B14;   
  -B4:   #1
        throw new java/lang/IllegalArgumentException("horizontal gap must be nonnegative");   
  +B14:   #1
        vR0.hgap = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 1 found 0 setHgap
 
 method setVgap(I)V {
  +START:   #1
        if vi1>=0 goto B14;   
  -B4:   #1
        throw new java/lang/IllegalArgumentException("vertical gap must be nonnegative");   
  +B14:   #1
        vR0.vgap = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 1 found 0 setVgap
 
 method toString()Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra("[").append@extra(vR0.getClass@this().getName@extra()).append@extra(",hgap=").append@extra(vR0.hgap).append@extra(",vgap=").append@extra(vR0.vgap).append@extra(",align=").append@extra(vR0.align).append@extra("]").toString@extra();   
  +END:   #1
 }
// Register: rd 5/5 wr 20 swaps 13 any 0 found 0 toString
 
 method getSize(Ljava/awt/Container;Z)Ljava/awt/Dimension; {
  +START:   #1
        vi5 = vR1.getComponentCount();    [ R  R] 
        vR6 = vR1.component;    
        vi3 = 0;    
        vi4 = 0;    
        vi7 = 0;    
  +B20:   #1
        if vi7>=vi5 goto B94;   
  +B27:   #1
        if vR6[vi7].visible!=0 goto B41;   
  +B38:   #1
        goto +B88;   [iiiRi R  .]
  +B41:   #1
        if vi2==0 goto B58;   
  +B45:   #1
        vR8 = vR6[vi7].getMinimumSize();    [iiiRi R  R] 
        goto +B68;   [iiiRiR R  .]
  +B58:   #1
        vR8 = vR6[vi7].getPreferredSize();    [iiiRiR R  R] 
  +B68:   #1
        vi3 = (vi3+vR8.width);    
        vi4 = max@special(vR8.height,vi4);    [iiiRiR R i ii]
  +B88:   #1
        vi7++;   
        goto +B20;   [iiiRi R . ..]
  +B94:   #1
        vR7 = vR1.getInsets();    [iiiRiR R . R.] 
        vi3 = (vi3+((((vi5+1)*vR0.hgap)+vR7.left)+vR7.right));    
        vi4 = (vi4+(((2*vR0.vgap)+vR7.top)+vR7.bottom));    
        return new java/awt/Dimension(vi3,vi4);   
  +END:   #1
 }
// Register: rd 28/28 wr 15 swaps 0 any 6 found 0 getSize
}
