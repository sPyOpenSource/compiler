class org/jnode/driver/net/lance/LanceDriver {
 
 method <init>(Ljx/devices/pci/PCIDevice;Lorg/jnode/driver/net/lance/LanceFlags;Ljx/zero/IRQ;Ljx/zero/Ports;Ljx/zero/MemoryManager;Ljx/zero/CPUManager;[Ljx/zero/Memory;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.rm = vR5;   
        vR0.cpuManager = vR6;   
        vR0.abstractDeviceCore = vR0.newCore@this(vR1,vR2,vR3,vR4,vR5);   
        vR0.event_interrupt = vR6.createNewEvent("Lanceinterrupt");   
        vR0.event_snd = vR6.createNewEvent("LanceSnd");   
        vR0.event_rcv = vR6.createNewEvent("LanceRcv");   
        b1 = new jx/buffer/multithread/MultiThreadBufferList2(vR7);    [ ?R iii i.....][ ?R iii. iRR...]
        vR0.usableBufs = b1;   
        vR0.usableBufs.enableRecording("Lance-available-queue");   [ ?R iiii RR....] 
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 6 swaps 4 any 0 found 0 <init>
 
 method newCore(Ljx/devices/pci/PCIDevice;Lorg/jnode/driver/net/lance/LanceFlags;Ljx/zero/IRQ;Ljx/zero/Ports;Ljx/zero/MemoryManager;)Lorg/jnode/driver/net/lance/LanceCore; {
  +START:   #1
        return new org/jnode/driver/net/lance/LanceCore(vR0,vR1,vR2,vR3,vR4,vR5);   
  +END:   #1
 }
// Register: rd 7/7 wr 1 swaps 0 any 0 found 0 newCore
 
 method setReceiveMode(I)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setReceiveMode
 
 method transmit(Ljx/zero/Memory;)Ljx/zero/Memory; {
  +START:   #2
        vR0.abstractDeviceCore.transmit(vR1);   [   RR] 
  +B8:   #1
        goto +B12;   forward return[   ..]
  +H11<caught exception>:   #1 reference
        vR2 = <caught exception>;    
  +B12:   #1
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 8 handler 11 type 73
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 transmit
 
 method transmit1(Ljx/zero/Memory;II)Ljx/zero/Memory; {
  +START:   #1
        vR0.cpuManager.recordEvent(vR0.event_snd);    
        vR4 = (jx/buffer/multithread/Buffer2)(vR0.usableBufs.nonblockingUndockFirstElement());    
        if vR4!=null goto B32;   
  +B30:   #1
        return vR1;   
  +B32:   #1
        vR5 = vR4.getRawData();    [R R . R.] 
        if vR5.isValid()!=0 goto B57;   
  -B49:   #1
        throw new java/lang/Error();   
  +B57:   #1
        vR6 = vR0.rm.alloc((vi3+vi2));    [RR R i iR] 
        vR6.copyFromMemory(vR1,0,vi2,vi3);   [RRR R i iiiRR] 
  +B83:   #1
        vR0.abstractDeviceCore.transmit(vR6);   [RRR R . RR...] 
  +B92:   #1
        goto +B97;   forward return[RRR R . .....]
  +H95<caught exception>:   #1 reference
        vR7 = <caught exception>;    
  +B97:   #1
        return vR5;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
83 - 92 handler 95 type 73
 }
// Register: rd 12/12 wr 6 swaps 1 any 1 found 0 transmit1
 
 method getMACAddress()[B {
  +START:   #1
        return vR0.abstractDeviceCore.getHwAddress().get_Addr();   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getMACAddress
 
 method getMTU()I {
  +START:   #1
        return 1500;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getMTU
 
 method registerNonBlockingConsumer(Ljx/fs/buffer/separator/NonBlockingMemoryConsumer;)Z {
  +START:   #1
        if vR0.etherConsumer==null goto B17;   
  -B7:   #1
        throw new java/lang/Error("Consumer already registered.");   
  +B17:   #1
        vR0.etherConsumer = vR1;   
        return 1;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 registerNonBlockingConsumer
 
 method getSupportedConfigurations()[Ljx/devices/DeviceConfigurationTemplate; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getSupportedConfigurations
 
 method open(Ljx/devices/DeviceConfiguration;)V {
  +START:   #1
        vR0.abstractDeviceCore.initialize();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 open
 
 method close()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 close
 
 method onReceive(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.etherConsumer.processMemory(vR1,0,vR1.size());   [  i iiRR] 
        vR0.etherConsumer.EtherQueueConsumerThread();   [  i R...] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 onReceive
}
