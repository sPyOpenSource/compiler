class javafs/FileSystem {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.inited = 0;   
        b1 = new javafs/InodeCache();    [ ?R  i][ ?R  iR]
        vR0.inodeCache = b1;   
        vR0.deviceID = 1;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 0 any 0 found 0 <init>
 
 method init(Ljx/bio/BlockIO;Ljx/fs/buffercache/BufferCache;Ljx/zero/Clock;)V {
  +START:   #1
        if vR0.inited==0 goto B17;   
  -B7:   #1
        throw new java/lang/Error("FS already initialized");   
  +B17:   #1
        vR0.clock = vR3;   
        vR0.bufferCache = vR2;   
        b1 = new javafs/Tools(vR1,vR2,vR0.inodeCache,vR3);    [ RR . i..][ RR . iRRRRR]
        vR0.tools = b1;   
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 3 swaps 0 any 0 found 0 init
 
 method init(Z)V {
  +START:   #1
        if vR0.inited==0 goto B8;   
  +B7:   #1
        return;   
  +B8:   #1
        vR0.inited = 1;   
        out.println("INIT JavaFS");   [ ?R i. RR] 
        b1 = new javafs/Super(vR0,vi1,vR0.bufferCache,vR0.inodeCache,vR0.clock);    [ ?R i. i.][ ?R i. iRRRiRR]
        vR0.root = b1;   
        vR0.root.dump();   [ ?R i. R......] 
        vR0.rootInode = vR0.root.getRootInode();   
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 4 swaps 1 any 0 found 0 init
 
 method name()Ljava/lang/String; {
  +START:   #1
        return "JavaFS";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 name
 
 method getRootInode()Ljx/fs/Inode; {
  +START:   #1
        if vR0.inited!=0 goto B17;   
  -B7:   #1
        throw new java/lang/Error("FS not initialized");   
  +B17:   #1
        vR0.rootInode.incUseCount@extra();   [ R . R..] 
        return vR0.rootInode;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 getRootInode
 
 method release()V {
  +START:   #1
        if vR0.inited!=0 goto B17;   
  -B7:   #1
        throw new java/lang/Error("FS not initialized");   
  +B17:   #1
        out.println("releasing filesystem ");   [ R i. RR.] 
        vR0.rootInode.decUseCount@extra();   [ R i. R..] 
        vR0.root.writeSuper();   [ R i. R..] 
        vR0.root.putSuper();   [ R i. R..] 
        vR0.inodeCache.syncInodes();   [ R i. R..] 
        vR0.bufferCache.syncDevice(1);   [ R i. iR.] 
        vR0.inodeCache.invalidateInodes();   [ R i. R..] 
        vR0.bufferCache.flushCache();   [ R i. R..] 
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 1 any 0 found 0 release
 
 method build(Ljava/lang/String;I)V {
  +START:   #1
        vR0.inited = 0;   
        vR0.tools.makeFS(vR1,vi2);   [   iRR] 
        vR0.init@this(0);   [   iR.] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 build
 
 method check()V {
  +START:   #1
        if vR0.inited!=0 goto B17;   
  -B7:   #1
        throw new java/lang/Error("FS not initialized");   
  +B17:   #1
        vR0.tools.checkFS(0);   [ R . RR.] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 check
 
 method printStatistics()V {
  +START:   #1
        if vR0.inited!=0 goto B17;   
  -B7:   #1
        throw new java/lang/Error("FS not initialized");   
  +B17:   #1
        vR0.inodeCache.showInodes();   [ R . R..] 
        vR0.bufferCache.showBuffers();   [ R . R..] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 printStatistics
 
 method getInode(I)Ljx/fs/Inode; {
  +START:   #1
        vR3 = vR0.inodeCache.iget(vi1);    [ RR  iR] 
        if vR3==null goto B15;   
  +B13:   #1
        return vR3;   
  +B15:   #1
        vR4 = vR0.root.getInodeData(vi1);    [?R RR  iR] 
        if vR4!=null goto B38;   
  -B30:   #1
        throw new jx/fs/NotExistException();   
  +B38:   #1
        if vR4.i_size@extra()>=0 goto B62;   
  -B46:   #1
        out.println("getInode(): Inode zu gross (overflow)");   [?RR RR i. RR] 
        throw new jx/fs/InodeIOException();   
  +B62:   #1
        if (vR4.i_mode@extra() & 61440)!=32768 goto B103;   
  +B75:   #1
        vR3 = new javafs/FileInode(vR0,vR0.root,vi1,vR4,vR0.bufferCache,vR0.inodeCache,vR0.clock);    [ RR .. i.][ RR .. iRRRRiRRR]
  +B103:   #1
        if (vR4.i_mode@extra() & 61440)!=16384 goto B145;   
  +B117:   #1
        vR3 = new javafs/DirInode(vR0,vR0.root,vi1,vR4,vR0.bufferCache,vR0.inodeCache,vR0.clock);    [ RR .. i........][ RR .. iRRRRiRRR]
  +B145:   #1
        if (vR4.i_mode@extra() & 61440)!=40960 goto B186;   
  +B158:   #1
        vR3 = new javafs/SymlinkInode(vR0,vR0.root,vi1,vR4,vR0.bufferCache,vR0.inodeCache,vR0.clock);    [ RR .. i........][ RR .. iRRRRiRRR]
  +B186:   #1
        if vR3!=null goto B230;   
  -B190:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .. i........][ RR .. iR.......]
        b0.println(b1.append@extra("getInode(): invalid inode type: ").append@extra((vR4.i_mode@extra() & 61440)).toString@extra());   [?RR RR iii. RR.......] 
        throw new jx/fs/InodeIOException();   
  +B230:   #1
        vR0.inodeCache.addInode(vR3);   [?RR RR .... RR.......] 
        return vR3;   
  +END:   #1
 }
// Register: rd 39/39 wr 17 swaps 4 any 3 found 0 getInode
 
 method getDeviceID()I {
  +START:   #1
        return vR0.deviceID;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getDeviceID
 
 method getTools()Ljavafs/Tools; {
  +START:   #1
        return vR0.tools;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getTools
 
 method read(Ljava/lang/String;)Ljava/lang/String; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 read
}
