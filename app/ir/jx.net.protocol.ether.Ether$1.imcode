class jx/net/protocol/ether/Ether$1 {
 
 method <init>(Ljx/net/protocol/ether/Ether;[BI)V {
  +START:   #1
        vR0.this$0 = vR1;   
        vR0.val$dest = vR2;   
        vR0.val$id = vi3;   
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 0 swaps 0 any 0 found 0 <init>
 
 method processMemory(Ljx/zero/Memory;II)Ljx/zero/Memory; {
  +START:   #1
        vR4 = vR1;    
        vi2 = (vi2-requiresSpace@special());    
        vR5 = new jx/net/protocol/ether/EtherFormat(vR4,vi2);    [ R  i][ R . iiRR]
        vR5.insertDestAddress(vR0.val$dest);   [RR R i RR..] 
        vR5.insertSourceAddress(access$000@special(vR0.this$0));   [RR R iRi RR..] 
        vR5.insertType(vR0.val$id);   [RR R iRii iR..] 
        vR5.dump();   [RR R iRii R...] 
        vR6 = access$100@special(vR0.this$0).transmit1(vR4,vi2,(requiresSpace@special()+vi3));    [RR R iRiii.R iiRR] [RR R iRiiiRR iiRR]
        return vR6;   
  +END:   #1
 }
// Register: rd 16/16 wr 12 swaps 4 any 2 found 1 processMemory
 
 method requiresSpace()I {
  +START:   #1
        return requiresSpace@special();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 requiresSpace
 
 method getMTU()I {
  +START:   #1
        return 1000;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getMTU
}
