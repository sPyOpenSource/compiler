class jx/rtc/RTCImpl {
 
 method rdReg(B)B {
  +START:   #1
        vR0.ports.outb_p(112,vi1);   [   iiR] 
        return vR0.ports.inb_p(113);   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 rdReg
 
 method wrReg(BI)V {
  +START:   #1
        vR0.ports.outb_p(112,vi1);   [   iiR] 
        vR0.ports.outb_p(113,(byte)vi2);   [  i iiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 wrReg
 
 method fromBCD(I)I {
  +START:   #1
        vi2 = (vi1 & 15);    
        vi3 = ((vi1 >> 4) & 15);    
        return ((vi3*10)+vi2);   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 2 found 0 fromBCD
 
 method <init>(Ljx/zero/Naming;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.interruptCounter = 0;   
        vR0.naming = vR1;   
        vR0.ports = (jx/zero/Ports)(vR1.lookup("Ports"));   
        vR0.irq = (jx/zero/IRQ)(vR1.lookup("IRQ"));   
        vR0.out = out;   
        vR0.cpuManager = (jx/zero/CPUManager)(vR1.lookup("CPUManager"));   
        vR0.irq.installFirstLevelHandler(8,vR0);   [  Rii. RiR] 
        vR0.irq.disableIRQ(8);   [  Rii. iR.] 
        vR0.wrReg@special(11,(vR0.rdReg@special(11) & 143));   [  Riii biR] 
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 7 swaps 3 any 0 found 0 <init>
 
 method getTime()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getTime
 
 method installIntervallTimer(Ljx/zero/AtomicVariable;Ljx/zero/CPUState;I)V {
  +START:   #1
        if vR0.state==null goto B17;   
  -B7:   #1
        throw new java/lang/Error("RTC: timer already installed");   
  +B17:   #1
        vR0.state = vR2;   
        vR0.atomic = vR1;   
        vR0.wrReg@special(10,((vR0.rdReg@special(10) & 240) | vi3));   [ R i biR] 
        vR0.wrReg@special(11,(vR0.rdReg@special(11) | 64));   [ R ii biR] 
        vR0.irq.enableIRQ(8);   [ R ii iR.] 
        return;   
  +END:   #1
 }
// Register: rd 12/12 wr 3 swaps 2 any 0 found 0 installIntervallTimer
 
 method interrupt()V {
  +START:   #1
        vR0.rdReg@special(12);   [   iR] 
        if vR0.state==null goto B28;   
  +B14:   #1
        vR0.atomic.atomicUpdateUnblock(0,vR0.state);   [  i RRR] 
  +B28:   #1
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 1 any 0 found 0 interrupt
}
