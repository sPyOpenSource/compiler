class jx/net/StartNetDevice {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method init3com(Ljx/zero/Naming;)Lmetaxa/os/devices/net/D3C905; {
  +START:   #1
        out.println("lookup PCI Access Point...");   [ R i. RR] 
        vR1 = (jx/devices/pci/PCIAccess)(waitUntilPortalAvailable@special(vR0,"PCIAccess"));    
        vR2 = (jx/timer/TimerManager)(waitUntilPortalAvailable@special(vR0,"TimerManager"));    
        out.println("scanning PCIBus for 3c905 devices...");   [RR R iRRi. RR] 
        vR3 = new metaxa/os/devices/net/ComInit(vR2,0,0);    [ R iRRi. i.][ R iRRi. iRRRR]
        vR4 = vR3.findDevice(vR1);    [RRR R iRRi. RR...] 
        if vR4!=null goto B61;   
  +B59:   #1
        return 0;   
  +B61:   #1
        vR5 = vR4[0];    
        if vR5!=null goto B74;   
  +B72:   #1
        return 0;   
  +B74:   #1
        if vR5.NicOpen()!=0 goto B92;   
  -B82:   #1
        throw new java/lang/Error("Cannot initialize network card.");   
  +B92:   #1
        vR5.NICSetReceiveMode(0);   [RRRRR R ..... RR...] 
        vR5.unmaskInterrupts();   [RRRRR R ..... R....] 
        out.print("Ethernet address: ");   [RRRRR R i.... RR...] 
        xdump@special(vR5.getMACAddress(),6);   [RRRRR R iR... iR...]
        return vR5;   
  +END:   #1
 }
// Register: rd 14/14 wr 18 swaps 3 any 2 found 0 init3com
 
 method main([Ljava/lang/String;)V {
  +START:   #1
        vR1 = getInitialNaming@special();    
        vR3 = new jx/devices/net/emulation/EmulNetFinder(vR0[1],vR0[2]);    [ R  i][ R . iRRR]
        vR4 = vR3.find(new java/lang/String()[0]);    [R?R R i RR..] 
        b0 = init3com@special(vR1);    [R?RR R i R...]
        vR2 = b0;    
        if b0==null goto B48;   
  +B37:   #1
        vR1.registerPortal(vR2,vR0[0]);   [RRRR R i RRR.] 
        return;   
  -B48:   #1
        throw new java/lang/Error("No network device found");   
  +END:   #1
 }
// Register: rd 9/9 wr 9 swaps 2 any 2 found 0 main
}
