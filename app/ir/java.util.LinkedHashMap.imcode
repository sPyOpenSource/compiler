class java/util/LinkedHashMap {
 
 method linkNodeLast(Ljava/util/LinkedHashMap$Entry;)V {
  +START:   #1
        vR2 = vR0.tail;    
        vR0.tail = vR1;   
        if vR2!=null goto B22;   
  +B14:   #1
        vR0.head = vR1;   
        goto +B32;   forward return[R   ]
  +B22:   #1
        vR1.before = vR2;   
        vR2.after = vR1;   
  +B32:   #1
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 1 swaps 0 any 1 found 0 linkNodeLast
 
 method transferLinks(Ljava/util/LinkedHashMap$Entry;Ljava/util/LinkedHashMap$Entry;)V {
  +START:   #1
        b1 = vR1.before;    
        b0 = b1;    
        vR2.before = b1;   
        vR3 = b0;    
        b1 = vR1.after;    
        b0 = b1;    
        vR2.after = b1;   
        vR4 = b0;    
        if vR3!=null goto B33;   
  +B25:   #1
        vR0.head = vR2;   
        goto +B38;   [RR RR  ]
  +B33:   #1
        vR3.after = vR2;   
  +B38:   #1
        if vR4!=null goto B51;   
  +B43:   #1
        vR0.tail = vR2;   
        goto +B57;   forward return[RR RR  ]
  +B51:   #1
        vR4.before = vR2;   
  +B57:   #1
        return;   
  +END:   #1
 }
// Register: rd 20/20 wr 6 swaps 0 any 6 found 0 transferLinks
 
 method reinitialize()V {
  +START:   #1
        vR0.reinitialize@special();   [   R] 
        vR0.tail = 0;   
        vR0.head = 0;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 reinitialize
 
 method newNode(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node; {
  +START:   #1
        vR5 = new java/util/LinkedHashMap$Entry(vi1,vR2,vR3,vR4);    [ R  i][ R . iRRRiR]
        vR0.linkNodeLast@special(vR5);   [R R . RR....] 
        return vR5;   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 newNode
 
 method replacementNode(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node; {
  +START:   #1
        vR3 = (java/util/LinkedHashMap$Entry)(vR1);    
        vR4 = new java/util/LinkedHashMap$Entry(vR3.hash,vR3.key,vR3.value,vR2);    [ R  i.][ R . iRRRiR]
        vR0.transferLinks@special(vR3,vR4);   [RR R . RRR...] 
        return vR4;   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 0 any 1 found 1 replacementNode
 
 method newTreeNode(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode; {
  +START:   #1
        vR5 = new java/util/HashMap$TreeNode(vi1,vR2,vR3,vR4);    [ R  i][ R . iRRRiR]
        vR0.linkNodeLast@special(vR5);   [R R . RR....] 
        return vR5;   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 newTreeNode
 
 method replacementTreeNode(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode; {
  +START:   #1
        vR3 = (java/util/LinkedHashMap$Entry)(vR1);    
        vR4 = new java/util/HashMap$TreeNode(vR3.hash,vR3.key,vR3.value,vR2);    [ R  i.][ R . iRRRiR]
        vR0.transferLinks@special(vR3,vR4);   [RR R . RRR...] 
        return vR4;   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 0 any 1 found 1 replacementTreeNode
 
 method afterNodeRemoval(Ljava/util/HashMap$Node;)V {
  +START:   #1
        vR2 = (java/util/LinkedHashMap$Entry)(vR1);    
        vR3 = vR2.before;    
        vR4 = vR2.after;    
        vR2.after = 0;   
        vR2.before = 0;   
        if vR3!=null goto B39;   
  +B30:   #1
        vR0.head = vR4;   
        goto +B45;   [RRR   ..]
  +B39:   #1
        vR3.after = vR4;   
  +B45:   #1
        if vR4!=null goto B58;   
  +B50:   #1
        vR0.tail = vR3;   
        goto +B64;   forward return[RRR   ..]
  +B58:   #1
        vR4.before = vR3;   
  +B64:   #1
        return;   
  +END:   #1
 }
// Register: rd 16/16 wr 3 swaps 0 any 3 found 1 afterNodeRemoval
 
 method afterNodeInsertion(Z)V {
  +START:   #1
        if vi1==0 goto B39;   
  +B4:   #1
        b0 = vR0.head;    
        vR2 = b0;    
        if b0==null goto B39;   
  +B13:   #1
        if vR0.removeEldestEntry@this(vR2)==0 goto B39;   
  +B21:   #1
        vR3 = vR2.key;    
        vR0.removeNode@this(hash@special(vR3),vR3,0,0,1);   [RR R i iiRRiR] 
  +B39:   #3
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 1 any 3 found 0 afterNodeInsertion
 
 method afterNodeAccess(Ljava/util/HashMap$Node;)V {
  +START:   #1
        if vR0.accessOrder==0 goto B115;   
  +B7:   #1
        b0 = vR0.tail;    
        vR2 = b0;    
        if b0==vR1 goto B115;   
  +B17:   #1
        vR3 = (java/util/LinkedHashMap$Entry)(vR1);    
        vR4 = vR3.before;    
        vR5 = vR3.after;    
        vR3.after = 0;   
        if vR4!=null goto B53;   
  +B44:   #1
        vR0.head = vR5;   
        goto +B60;   [RRRR R  ..]
  +B53:   #1
        vR4.after = vR5;   
  +B60:   #1
        if vR5==null goto B75;   
  +B65:   #1
        vR5.before = vR4;   
        goto +B78;   [RRRR R  ..]
  +B75:   #1
        vR2 = vR4;    
  +B78:   #1
        if vR2!=null goto B90;   
  +B82:   #1
        vR0.head = vR3;   
        goto +B100;   [RRRR R  ..]
  +B90:   #1
        vR3.before = vR2;   
        vR2.after = vR3;   
  +B100:   #1
        vR0.tail = vR3;   
        vR0.modCount = (vR0.modCount+1);   
  +B115:   #2
        return;   
  +END:   #1
 }
// Register: rd 30/30 wr 6 swaps 0 any 7 found 1 afterNodeAccess
 
 method internalWriteEntries(Ljava/io/ObjectOutputStream;)V {
  +START:   #1
        vR2 = vR0.head;    
  +B5:   #1
        if vR2==null goto B33;   
  +B9:   #1
        vR1.writeObject@extra(vR2.key);   [R  i RR] 
        vR1.writeObject@extra(vR2.value);   [R  ii RR] 
        vR2 = vR2.after;    
        goto +B5;   [R  ii ..]
  +B33:   #1
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 2 any 1 found 0 internalWriteEntries
 
 method <init>(IF)V {
  +START:   #1
        vR0.<init>@special(vi1,vl2);   [   ?iR] 
        vR0.accessOrder = 0;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special(vi1);   [   iR] 
        vR0.accessOrder = 0;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.accessOrder = 0;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljava/util/Map;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.accessOrder = 0;   
        vR0.putMapEntries@this(vR1,0);   [   iRR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(IZ)V {
  +START:   #1
        vR0.<init>@special(vi1);   [   iR] 
        vR0.accessOrder = vi2;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method containsValue(Ljava/lang/Object;)Z {
  +START:   #1
        vR2 = vR0.head;    
  +B5:   #1
        if vR2==null goto B41;   
  +B9:   #1
        vR3 = vR2.value;    
        if vR3==vR1 goto B31;   
  +B19:   #1
        if vR1==null goto B33;   
  +B23:   #1
        if vR1.equals(vR3)==0 goto B33;   
  +B31:   #1
        return 1;   
  +B33:   #2
        vR2 = vR2.after;    
        goto +B5;   [RR   ..]
  +B41:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 8/8 wr 3 swaps 0 any 3 found 0 containsValue
 
 method get(Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 get
 
 method getOrDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        b0 = vR0.getNode@this(hash@special(vR1),vR1);    [ R i RiR] 
        vR3 = b0;    
        if b0!=null goto B16;   
  +B14:   #1
        return vR2;   
  +B16:   #1
        if vR0.accessOrder==0 goto B28;   
  +B23:   #1
        vR0.afterNodeAccess@this(vR3);   [R R . RR.] 
  +B28:   #1
        return vR3.value;   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 1 any 2 found 0 getOrDefault
 
 method clear()V {
  +START:   #1
        vR0.clear@special();   [   R] 
        vR0.tail = 0;   
        vR0.head = 0;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 clear
 
 method removeEldestEntry(Ljava/util/Map$Entry;)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 removeEldestEntry
 
 method keySet()Ljava/util/Set; {
  +START:   #1
        vR1 = vR0.keySet;    
        if vR1!=null goto B23;   
  +B9:   #1
        vR1 = new java/util/LinkedHashMap$LinkedKeySet(vR0);    [ R  i][ R . iRR]
        vR0.keySet = vR1;   
  +B23:   #1
        return vR1;   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 1 found 0 keySet
 
 method values()Ljava/util/Collection; {
  +START:   #1
        vR1 = vR0.values;    
        if vR1!=null goto B23;   
  +B9:   #1
        vR1 = new java/util/LinkedHashMap$LinkedValues(vR0);    [ R  i][ R . iRR]
        vR0.values = vR1;   
  +B23:   #1
        return vR1;   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 0 any 1 found 0 values
 
 method entrySet()Ljava/util/Set; {
  +START:   #1
        b0 = vR0.entrySet;    
        vR1 = b0;    
        if b0!=null goto B25;   
  +B9:   #1
        b1 = new java/util/LinkedHashMap$LinkedEntrySet(vR0);    [ RR  i][ RR . iRR]
        b0 = b1;    
        vR0.entrySet = b1;   
        goto +B26b0;   forward return[R RR . ...]
  +B25:   #1
        b0 = vR1;    
  +B26b0:   #1 reference
        return b0;   
  +END:   #1
 }
// Register: rd 10/10 wr 6 swaps 0 any 4 found 0 entrySet
 
 method forEach(Ljava/util/function/BiConsumer;)V {
  +START:   #1
        if vR1!=null goto B12;   
  -B4:   #1
        throw new java/lang/NullPointerException();   
  +B12:   #1
        vi2 = vR0.modCount;    
        vR3 = vR0.head;    
  +B22:   #1
        if vR3==null goto B48;   
  +B26:   #1
        vR1.accept(vR3.key,vR3.value);   [iR R iR RRR] 
        vR3 = vR3.after;    
        goto +B22;   [iR R iR ...]
  +B48:   #1
        if vR0.modCount==vi2 goto B64;   
  -B56:   #1
        throw new java/util/ConcurrentModificationException();   
  +B64:   #1
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 5 swaps 1 any 2 found 0 forEach
 
 method replaceAll(Ljava/util/function/BiFunction;)V {
  +START:   #1
        if vR1!=null goto B12;   
  -B4:   #1
        throw new java/lang/NullPointerException();   
  +B12:   #1
        vi2 = vR0.modCount;    
        vR3 = vR0.head;    
  +B22:   #1
        if vR3==null goto B52;   
  +B26:   #1
        vR3.value = vR1.apply(vR3.key,vR3.value);   
        vR3 = vR3.after;    
        goto +B22;   [iR R iR ...]
  +B52:   #1
        if vR0.modCount==vi2 goto B68;   
  -B60:   #1
        throw new java/util/ConcurrentModificationException();   
  +B68:   #1
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 5 swaps 1 any 2 found 0 replaceAll
}
