class jx/timerpc/TimerManagerImpl {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ RR  R] 
        vR0.naming = getInitialNaming@special();   
        vR1 = new java/lang/Object();    [ RR  i][ RR  iR]
        vR2 = (jx/zero/CPUManager)(vR0.naming.lookup("CPUManager"));    
        vR0.clock = (jx/zero/Clock)(vR0.naming.lookup("Clock"));   
        b1 = new jx/timerpc/TimerManagerImpl$1(vR0,vR2);    [ RR ii. i.][ RR ii. iRRR]
        vR0.unblockHandler = b1;   
        vR3 = vR2.getAtomicVariable();    [RR RR ii. R...] 
        vR3.set(vR1);   [RRR RR ii. RR..] 
        b1 = new jx/timerpc/TimerManagerImpl$2(vR0,vR2,vR3,vR1);    [ RR ii. i...][ RR ii. iRRRRR]
        vR4 = vR2.createCPUState(b1);    [RRR RR ii. RR....] 
        vR2.start(vR4);   [RRRR RR ii. RR....] 
        vR5 = (jx/zero/TimerEmulation)(vR0.naming.lookup("TimerEmulation"));    
        if vR5!=null goto B164;   
  +B128:   #1
        vR6 = new jx/rtc/RTCImpl(vR0.naming);    [ RR .... i.....][ RR .... iRR...]
        vR6.installIntervallTimer(vR3,vR4,14);   [RRRRRR RR .... iRRR..] 
        out.println("TimerManager: Installed RTC timer");   [RRRRRR RR i... RR....] 
        goto +B185;   forward return[RRRRRR RR i... ......]
  +B164:   #1
        vR5.installIntervallTimer(vR3,vR4,0,250000);   [RRRRRR RR .... iiRRR.] 
        out.println("TimerManager: Use emulated timer");   [RRRRRR RR i... RR....] 
  +B185:   #1
        return;   
  +END:   #1
 }
// Register: rd 29/29 wr 21 swaps 5 any 1 found 0 <init>
 
 method addMillisTimer(ILjx/timer/TimerHandler;Ljava/lang/Object;)Ljx/timer/Timer; {
  +START:   #1
        return vR0.addTimer@this(((vi1*1000)/vR0.getTimeBaseInMicros@this()),-1,vR2,vR3);   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 addMillisTimer
 
 method addMillisIntervalTimer(IILjx/timer/TimerHandler;Ljava/lang/Object;)Ljx/timer/Timer; {
  +START:   #1
        vi5 = vR0.getTimeBaseInMicros@this();    [   R] 
        return vR0.addTimer@this(((vi1*1000)/vi5),((vi2*1000)/vi5),vR3,vR4);   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 2 any 0 found 0 addMillisIntervalTimer
 
 method addTimer(IILjx/timer/TimerHandler;Ljava/lang/Object;)Ljx/timer/Timer; {
  +START:   #1
        vR5 = new jx/timerpc/TimerEntry((vi1+vR0.ticks),vi2,vR0,vR3,vR4);    [ R  i][ R . iRRRiiR]
        return vR0.addTimerEntry@this(vR5);   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 0 any 0 found 0 addTimer
 
 method addTimerEntry(Ljx/timerpc/TimerEntry;)Ljx/timer/Timer; {
  +START:   #1
        vR2 = vR0.firsttimer;    
        if vR0.firsttimer!=null goto B20;   
  +B12:   #1
        vR0.firsttimer = vR1;   
        goto +B85;   forward return[R   ]
  +B20:   #2
        if vR2==null goto B48;   
  +B24:   #1
        if vR2.get_expires@extra()>vR1.get_expires@extra() goto B48;   
  +B35:   #1
        vR0.previous = vR2;   
        vR2 = vR2.get_next@extra();    [R  . R] 
        goto +B20;   [R  . .]
  +B48:   #2
        if vR0.previous==null goto B63;   
  +B55:   #1
        vR0.previous.set_next@extra(vR1);   [R  . RR] 
  +B63:   #1
        vR1.set_next@extra(vR2);   [R  . RR] 
        if vR2==null goto B77;   
  +B72:   #1
        vR2.set_previous@extra(vR1);   [R  . RR] 
  +B77:   #1
        vR1.set_previous@extra(vR0.previous);   [R  i RR] 
  +B85:   #1
        return vR1;   
  +END:   #1
 }
// Register: rd 19/19 wr 4 swaps 1 any 2 found 0 addTimerEntry
 
 method deleteTimer(Ljx/timer/TimerHandler;)Z {
  +START:   #1
        vR2 = vR0.firsttimer;    
        vi5 = 0;    
  +B8:   #2
        if vR2==null goto B86;   
  +B12:   #1
        if vR2.compare@extra(vR1)==0 goto B78;   
  +B20:   #1
        vi5 = 1;    
        vR3 = vR2.get_next@extra();    [R??i   R.] 
        vR4 = vR2.get_previous@extra();    [RR?i   R.] 
        if vR4!=null goto B52;   
  +B39:   #1
        if vR2!=vR0.firsttimer goto B52;   
  +B47:   #1
        vR0.firsttimer = vR3;   
  +B52:   #2
        if vR4==null goto B63;   
  +B57:   #1
        vR4.set_next@extra(vR3);   [RRRi   RR] 
  +B63:   #1
        if vR3==null goto B73;   
  +B67:   #1
        vR3.set_previous@extra(vR4);   [RRRi   RR] 
  +B73:   #1
        vR2 = vR3;    
        goto +B8;   [RRRi   ..]
  +B78:   #1
        vR2 = vR2.get_next@extra();    [RRRi   R.] 
        goto +B8;   [RRRi   ..]
  +B86:   #1
        return vi5;   
  +END:   #1
 }
// Register: rd 17/17 wr 6 swaps 0 any 6 found 0 deleteTimer
 
 method dumptimers()V {
  +START:   #1
        vi1 = 0;    
        vR2 = vR0.firsttimer;    
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("DumpTimers at: ").append@extra(vR0.ticks).toString@extra());   [iR RR iii. RR.] 
        out.println("
Begin of timers...
");   [iR RR iiii. RR.] 
  +B43:   #1
        if vR2==null goto B73;   
  +B47:   #1
        out.println(vR2);   [iR RR ..... RR.] 
        out.println("
");   [iR RR i.... RR.] 
        vi1++;   
        vR2 = vR2.get_next@extra();    [iR RR i.... R..] 
        goto +B43;   [iR RR i.... ...]
  +B73:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ..... i..][ RR ..... iR.]
        b0.println(b1.append@extra("").append@extra(vi1).append@extra(" Timers in the TimerList!
").toString@extra());   [iR RR iii.. RR..] 
        out.println("...End of timers!");   [iR RR iiii. RR..] 
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 26 swaps 9 any 2 found 0 dumptimers
 
 method getTimeBaseInMicros()I {
  +START:   #1
        return 250000;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getTimeBaseInMicros
 
 method getCurrentTime()I {
  +START:   #1
        return vR0.ticks;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCurrentTime
 
 method getCurrentTimePlusMillis(I)I {
  +START:   #1
        return (vR0.ticks+(vi1/4));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 getCurrentTimePlusMillis
 
 method getTimeInMillis()I {
  +START:   #1
        return vR0.clock.getTimeInMillis();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getTimeInMillis
 
 method unblockInMillis(Ljx/zero/CPUState;I)V {
  +START:   #1
        vR0.addMillisTimer@this(vi2,vR0.unblockHandler,vR1);   [  i RRiR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 unblockInMillis
 
 method unblockInMillisInterval(Ljx/zero/CPUState;II)V {
  +START:   #1
        vR0.addMillisIntervalTimer@this(vi2,vi3,vR0.unblockHandler,vR1);   [  i RRiiR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 1 any 0 found 0 unblockInMillisInterval
}
