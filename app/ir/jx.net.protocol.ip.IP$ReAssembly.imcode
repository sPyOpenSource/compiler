class jx/net/protocol/ip/IP$ReAssembly {
 
 method <init>(Ljx/net/protocol/ip/IP;)V {
  +START:   #1
        vR0.this$0 = vR1;   
        vR0.<init>@special();   [   R] 
        vR0.expectedSize = -1;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 <init>
 
 method addFragment(IILjx/zero/Memory;)V {
  +START:   #1
        if vR0.firstFragment!=null goto B31;   
  +B7:   #1
        b1 = new jx/net/protocol/ip/IP$Fragment(vR0.this$0);    [ RR  i][ RR . iRR]
        vR0.firstFragment = b1;   
        vR4 = vR0.firstFragment;    
        goto +B172;   [R RR . ...]
  +B31:   #1
        if vR0.firstFragment.offset<=vi1 goto B73;   
  +B42:   #1
        vR4 = new jx/net/protocol/ip/IP$Fragment(vR0.this$0);    [ RR . i..][ RR . iRR]
        vR4.next = vR0.firstFragment;   
        vR0.firstFragment = vR4;   
        goto +B172;   [R RR . ...]
  +B73:   #1
        vR5 = vR0.firstFragment;    
        vR6 = vR5.next;    
        vR4 = 0;    
  +B89:   #1
        if vR6==null goto B147;   
  +B94:   #1
        if vR6.offset<=vi1 goto B133;   
  +B103:   #1
        vR4 = new jx/net/protocol/ip/IP$Fragment(vR0.this$0);    [ RR . i..][ RR . iRR]
        vR4.next = vR6;   
        vR5.next = vR4;   
        goto +B147;   [RRR RR . ...]
  +B133:   #1
        vR5 = vR6;    
        vR6 = vR6.next;    
        goto +B89;   [RRR RR . ...]
  +B147:   #2
        if vR4!=null goto B172;   
  +B152:   #1
        vR4 = new jx/net/protocol/ip/IP$Fragment(vR0.this$0);    [ RR . i..][ RR . iRR]
        vR5.next = vR4;   
  +B172:   #3
        vR4.offset = vi1;   
        vR4.size = vi2;   
        vR4.data = vR3.revoke();   
        return;   
  +END:   #1
 }
// Register: rd 38/38 wr 14 swaps 0 any 3 found 0 addFragment
}
