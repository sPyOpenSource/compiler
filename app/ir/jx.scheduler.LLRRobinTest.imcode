class jx/scheduler/LLRRobinTest {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?RRR  R] 
        vR0.MyCPU = 0;   
        vR0.ContainerPool = 0;   
        vR0.ContainerPoolSize = 0;   
        vR0.naming = getInitialNaming@special();   
        vR0.irq = (jx/zero/IRQ)(vR0.naming.lookup("IRQ"));   
        vR0.cpuManager = (jx/zero/CPUManager)(vR0.naming.lookup("CPUManager"));   
        vR0.SMPcpuManager = (jx/zero/SMPCPUManager)(vR0.naming.lookup("SMPCPUManager"));   
        vR0.LLschedulerSupport = (jx/zero/LLSchedulerSupport)(vR0.naming.lookup("LLSchedulerSupport"));   
        vR1 = (jx/zero/debug/DebugChannel)(vR0.naming.lookup("DebugChannel0"));    
        b1 = new jx/zero/debug/DebugPrintStream;    
        b2 = b1;    
        b3 = new jx/zero/debug/DebugOutputStream(vR1);    [ ?RRR iiiii. i.][ ?RRR iiiii. iRR]
        b2.<init>@special(b3);   [R ?RRR iiiii. RR.] 
        vR0.out = b1;   
        out = vR0.out;   
        vR0.first = 0;   
        vR0.activeDom = 0;   
        return;   
  +END:   #1
 }
// Register: rd 30/30 wr 16 swaps 5 any 1 found 0 <init>
 
 method registered(I)V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("LLRRobin init called (IRQ").append@extra(vi1).append@extra(")").toString@extra());   [ RR iii.. RR..] 
        vR0.MyCPU = vR0.SMPcpuManager.getMyCPU();   
        vR0.irq.installFirstLevelHandler(vi1,vR0);   [ RR iii.. RiR.] 
        vR0.irq.enableIRQ(vi1);   [ RR iii.. iR..] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 8 swaps 3 any 0 found 0 registered
 
 method interrupt()V {
  +START:   #1
        if vR0.activeDom!=null goto B8;   
  +B7:   #1
        return;   
  -B8:   #1
        vR0.LLschedulerSupport.preemptCurrentThread();   [ R  R] 
        vR0.LLschedulerSupport.activateDomain(vR0.activeDom.domain);   [ R i RR] 
        throw new java/lang/Error("should never return!");   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 1 any 0 found 0 interrupt
 
 method registerDomain(Ljx/zero/Domain;)V {
  +START:   #1
        out.println("LLRRobin registerDomain called");   [  i. RR] 
        if vR1!=null goto B13;   
  +B12:   #1
        return;   
  +B13:   #1
        vR3 = vR0.first;    
  +B18:   #1
        if vR3==null goto B47;   
  +B22:   #1
        if vR3.domain!=vR1 goto B39;   
  +B30:   #1
        out.println("Domain XXX already registered.");   [?R  i. RR] 
        return;   
  +B39:   #1
        vR3 = vR3.next;    
        goto +B18;   [?R  .. ..]
  +B47:   #1
        vR2 = vR0.getNewContainer@special(vR1);    [?R  .. RR] 
        vR2.next = vR0.first;   
        vR0.first = vR2;   
        if vR0.activeDom!=null goto B81;   
  +B73:   #1
        vR0.activeDom = vR0.first;   
  +B81:   #1
        return;   
  +END:   #1
 }
// Register: rd 14/14 wr 7 swaps 2 any 2 found 0 registerDomain
 
 method unregisterDomain(Ljx/zero/Domain;)V {
  -START:   #1
        out.println("LLRRobin unregisterDomain called");   [ R i. RR] 
        throw new java/lang/Error("LLRRobin_mini::unregisterDomain not implemented");   
  +END:   #1
 }
// Register: rd 1/1 wr 3 swaps 1 any 0 found 0 unregisterDomain
 
 method setTimeSlice(Ljx/zero/Domain;I)V {
  +START:   #1
        out.println("private TimeSlices are not allowed by this LLScheduler");   [  i. RR] 
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 2 swaps 1 any 0 found 0 setTimeSlice
 
 method activate_currDomain()V {
  +START:   #1
        vR0.__activate_currDomain@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 activate_currDomain
 
 method __activate_currDomain()V {
  -START:   #1
        vR0.LLschedulerSupport.activateDomain(vR0.activeDom.domain);   [ R i RR] 
        throw new java/lang/Error("should never return!");   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 1 any 0 found 0 __activate_currDomain
 
 method activate_nextDomain()V {
  +START:   #1
        vR1 = vR0.nextDomain@special();    [ R  R] 
        if vR1!=null goto B19;   
  -B9:   #1
        throw new java/lang/Error("LLRRobin::activate_nextDomain: System error: no Domain found!!");   
  +B19:   #1
        if vR0.activeDom!=vR1 goto B46;   
  -B27:   #1
        vR0.LLschedulerSupport.activateIdleThread();   [R R . R..] 
        throw new java/lang/Error("should never return!");   
  +B46:   #1
        vR0.activeDom = vR1;   
        vR0.__activate_currDomain@special();   [R R . R..] 
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 3 swaps 0 any 1 found 0 activate_nextDomain
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return "this is a LowLevel RoundRobin Scheduler (LLRRobin) Object";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 toString
 
 method dump()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.print(b1.append@extra("DomainQueue for CPU: ").append@extra(vR0.SMPcpuManager.getMyCPU()).append@extra(":").toString@extra());   [ RR ii.ii. RR..] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ii.ii. i...][ RR ii.ii. iR..]
        b0.println(b1.append@extra("                     (ContainerPoolSize: ").append@extra(vR0.ContainerPoolSize).append@extra(")").toString@extra());   [ RR iiiiiiii.. RR..] 
        if vR0.activeDom==null goto B113;   
  +B78:   #1
        out.print("Active Domain: ");   [ RR i......... RR..] 
        vR0.LLschedulerSupport.printDomainName(vR0.activeDom.domain);   [ RR ii........ RR..] 
        out.println("");   [ RR iii....... RR..] 
        goto +B121;   [ RR iii....... ....]
  +B113:   #1
        out.println("no Domain active");   [R RR i......... RR..] 
  +B121:   #1
        vR1 = vR0.first;    
  +B126:   #1
        if vR1==null goto B151;   
  +B130:   #1
        vR0.LLschedulerSupport.dumpDomain(vR1.domain);   [R RR i......... RR..] 
        vR1 = vR1.next;    
        goto +B126;   [R RR i......... ....]
  +B151:   #1
        vR1 = vR0.first;    
  +B156:   #1
        if vR1==null goto B210;   
  +B160:   #1
        out.print("Threads in Domain ");   [R RR i......... RR..] 
        vR0.LLschedulerSupport.printDomainName(vR1.domain);   [R RR ii........ RR..] 
        out.println("");   [R RR iii....... RR..] 
        vR0.LLschedulerSupport.dumpHLSched(vR1.domain);   [R RR iiii...... RR..] 
        vR1 = vR1.next;    
        goto +B156;   [R RR iiii...... ....]
  +B210:   #1
        return;   
  +END:   #1
 }
// Register: rd 21/21 wr 36 swaps 17 any 2 found 0 dump
 
 method nextDomain()Ljx/scheduler/LLRRobinTest$DomainContainer; {
  +START:   #1
        if vR0.activeDom.next==null goto B18;   
  +B10:   #1
        return vR0.activeDom.next;   
  +B18:   #1
        return vR0.first;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 nextDomain
 
 method getNewContainer(Ljx/zero/Domain;)Ljx/scheduler/LLRRobinTest$DomainContainer; {
  +START:   #1
        vR2 = vR0.ContainerPool;    
        if vR2!=null goto B29;   
  +B9:   #1
        vR0.ContainerPoolSize = (vR0.ContainerPoolSize+1);   
        return new jx/scheduler/LLRRobinTest$DomainContainer(vR0,vR1);   
  +B29:   #1
        vR0.ContainerPool = vR0.ContainerPool.next;   
        vR2.domain = vR1;   
        vR2.next = 0;   
        return vR2;   
  +END:   #1
 }
// Register: rd 13/13 wr 2 swaps 0 any 1 found 0 getNewContainer
 
 method releaseContainer(Ljx/scheduler/LLRRobinTest$DomainContainer;)V {
  +START:   #1
        vR1.domain = 0;   
        vR1.DomainTimeSlice = 0;   
        vR1.next = vR0.ContainerPool;   
        vR0.ContainerPool = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 0 swaps 0 any 0 found 0 releaseContainer
}
