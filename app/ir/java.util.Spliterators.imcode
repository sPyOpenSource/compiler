class java/util/Spliterators {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method emptySpliterator()Ljava/util/Spliterator; {
  +START:   #1
        return EMPTY_SPLITERATOR;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptySpliterator
 
 method emptyIntSpliterator()Ljava/util/Spliterator$OfInt; {
  +START:   #1
        return EMPTY_INT_SPLITERATOR;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyIntSpliterator
 
 method emptyLongSpliterator()Ljava/util/Spliterator$OfLong; {
  +START:   #1
        return EMPTY_LONG_SPLITERATOR;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyLongSpliterator
 
 method emptyDoubleSpliterator()Ljava/util/Spliterator$OfDouble; {
  +START:   #1
        return EMPTY_DOUBLE_SPLITERATOR;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 emptyDoubleSpliterator
 
 method spliterator([Ljava/lang/Object;I)Ljava/util/Spliterator; {
  +START:   #1
        return new java/util/Spliterators$ArraySpliterator(([Ljava/lang/Object;)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliterator([Ljava/lang/Object;III)Ljava/util/Spliterator; {
  +START:   #1
        checkFromToBounds@special(([Ljava/lang/Object;)(requireNonNull@special(vR0)).length,vi1,vi2);   [ R i iii]
        return new java/util/Spliterators$ArraySpliterator(vR0,vi1,vi2,vi3);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 0 spliterator
 
 method spliterator([II)Ljava/util/Spliterator$OfInt; {
  +START:   #1
        return new java/util/Spliterators$IntArraySpliterator(([I)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliterator([IIII)Ljava/util/Spliterator$OfInt; {
  +START:   #1
        checkFromToBounds@special(([I)(requireNonNull@special(vR0)).length,vi1,vi2);   [ R i iii]
        return new java/util/Spliterators$IntArraySpliterator(vR0,vi1,vi2,vi3);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 0 spliterator
 
 method spliterator([JI)Ljava/util/Spliterator$OfLong; {
  +START:   #1
        return new java/util/Spliterators$LongArraySpliterator(([J)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliterator([JIII)Ljava/util/Spliterator$OfLong; {
  +START:   #1
        checkFromToBounds@special(([J)(requireNonNull@special(vR0)).length,vi1,vi2);   [ R i iii]
        return new java/util/Spliterators$LongArraySpliterator(vR0,vi1,vi2,vi3);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 0 spliterator
 
 method spliterator([DI)Ljava/util/Spliterator$OfDouble; {
  +START:   #1
        return new java/util/Spliterators$DoubleArraySpliterator(([D)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliterator([DIII)Ljava/util/Spliterator$OfDouble; {
  +START:   #1
        checkFromToBounds@special(([D)(requireNonNull@special(vR0)).length,vi1,vi2);   [ R i iii]
        return new java/util/Spliterators$DoubleArraySpliterator(vR0,vi1,vi2,vi3);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 0 spliterator
 
 method checkFromToBounds(III)V {
  +START:   #1
        if vi1<=vi2 goto B46;   
  -B5:   #1
        b0 = new java/lang/ArrayIndexOutOfBoundsException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra("origin(").append@extra(vi1).append@extra(") > fence(").append@extra(vi2).append@extra(")").toString@extra());   [ RRR iiii.... RR....] 
        throw b0;   
  +B46:   #1
        if vi1>=0 goto B59;   
  -B50:   #1
        throw new java/lang/ArrayIndexOutOfBoundsException(vi1);   
  +B59:   #1
        if vi2<=vi0 goto B73;   
  -B64:   #1
        throw new java/lang/ArrayIndexOutOfBoundsException(vi2);   
  +B73:   #1
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 14 swaps 4 any 4 found 0 checkFromToBounds
 
 method spliterator(Ljava/util/Collection;I)Ljava/util/Spliterator; {
  +START:   #1
        return new java/util/Spliterators$IteratorSpliterator((java/util/Collection)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliterator(Ljava/util/Iterator;JI)Ljava/util/Spliterator; {
  +START:   #1
        return new java/util/Spliterators$IteratorSpliterator((java/util/Iterator)(requireNonNull@special(vR0)),vl1,vi3);   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliteratorUnknownSize(Ljava/util/Iterator;I)Ljava/util/Spliterator; {
  +START:   #1
        return new java/util/Spliterators$IteratorSpliterator((java/util/Iterator)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliteratorUnknownSize
 
 method spliterator(Ljava/util/PrimitiveIterator$OfInt;JI)Ljava/util/Spliterator$OfInt; {
  +START:   #1
        return new java/util/Spliterators$IntIteratorSpliterator((java/util/PrimitiveIterator$OfInt)(requireNonNull@special(vR0)),vl1,vi3);   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliteratorUnknownSize(Ljava/util/PrimitiveIterator$OfInt;I)Ljava/util/Spliterator$OfInt; {
  +START:   #1
        return new java/util/Spliterators$IntIteratorSpliterator((java/util/PrimitiveIterator$OfInt)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliteratorUnknownSize
 
 method spliterator(Ljava/util/PrimitiveIterator$OfLong;JI)Ljava/util/Spliterator$OfLong; {
  +START:   #1
        return new java/util/Spliterators$LongIteratorSpliterator((java/util/PrimitiveIterator$OfLong)(requireNonNull@special(vR0)),vl1,vi3);   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliteratorUnknownSize(Ljava/util/PrimitiveIterator$OfLong;I)Ljava/util/Spliterator$OfLong; {
  +START:   #1
        return new java/util/Spliterators$LongIteratorSpliterator((java/util/PrimitiveIterator$OfLong)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliteratorUnknownSize
 
 method spliterator(Ljava/util/PrimitiveIterator$OfDouble;JI)Ljava/util/Spliterator$OfDouble; {
  +START:   #1
        return new java/util/Spliterators$DoubleIteratorSpliterator((java/util/PrimitiveIterator$OfDouble)(requireNonNull@special(vR0)),vl1,vi3);   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 spliterator
 
 method spliteratorUnknownSize(Ljava/util/PrimitiveIterator$OfDouble;I)Ljava/util/Spliterator$OfDouble; {
  +START:   #1
        return new java/util/Spliterators$DoubleIteratorSpliterator((java/util/PrimitiveIterator$OfDouble)(requireNonNull@special(vR0)),vi1);   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 spliteratorUnknownSize
 
 method iterator(Ljava/util/Spliterator;)Ljava/util/Iterator; {
  +START:   #1
        requireNonNull@special(vR0);   [ R  R]
        return new java/util/Spliterators$1Adapter(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 iterator
 
 method iterator(Ljava/util/Spliterator$OfInt;)Ljava/util/PrimitiveIterator$OfInt; {
  +START:   #1
        requireNonNull@special(vR0);   [ R  R]
        return new java/util/Spliterators$2Adapter(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 iterator
 
 method iterator(Ljava/util/Spliterator$OfLong;)Ljava/util/PrimitiveIterator$OfLong; {
  +START:   #1
        requireNonNull@special(vR0);   [ R  R]
        return new java/util/Spliterators$3Adapter(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 iterator
 
 method iterator(Ljava/util/Spliterator$OfDouble;)Ljava/util/PrimitiveIterator$OfDouble; {
  +START:   #1
        requireNonNull@special(vR0);   [ R  R]
        return new java/util/Spliterators$4Adapter(vR0);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 iterator
 
 method <clinit>()V {
  +START:   #1
        b0 = new java/util/Spliterators$EmptySpliterator$OfRef();    [ R  i][ R  iR]
        EMPTY_SPLITERATOR = b0;   
        b0 = new java/util/Spliterators$EmptySpliterator$OfInt();    [ R  i.][ R  iR]
        EMPTY_INT_SPLITERATOR = b0;   
        EMPTY_LONG_SPLITERATOR = 0;   
        b0 = new java/util/Spliterators$EmptySpliterator$OfDouble();    [ R . i.][ R . iR]
        EMPTY_DOUBLE_SPLITERATOR = b0;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 0 any 0 found 3 <clinit>
}
