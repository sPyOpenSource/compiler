class jx/fs/auditfs/AuditStore {
 
 method <init>(Ljx/zero/Naming;Ljx/devices/bio/BlockIO;ZI)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.currentSector = 0;   
        vR0.clock = (jx/zero/Clock)(getInitialNaming@special().lookup("Clock"));   
        vR0.bio = vR2;   
        vR0.numberOfSectorsToBuffer = vi4;   
        vR0.capacity = vR2.getCapacity();   
        vR0.sectorSize = vR2.getSectorSize();   
        vR0.memoryManager = (jx/zero/MemoryManager)(vR1.lookup("MemoryManager"));   
        vR0.buf = vR0.memoryManager.alloc(vR0.sectorSize);   
        vR0.posInBuf = 0;   
        if vi3==0 goto B130;   
  +B98:   #1
        vi5 = 1;    
  +B101:   #1
        if vi5>=vR0.capacity goto B130;   
  +B110:   #1
        vR2.readSectors(vi5,1,vR0.buf,1);   [i  i.. iRiiR] 
        vi5++;   
        goto +B101;   [i  i.. .....]
  +B130:   #2
        return;   
  +END:   #1
 }
// Register: rd 25/25 wr 8 swaps 4 any 3 found 0 <init>
 
 method writeAuditLog(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V {
  +START:   #1
        b1 = new jx/fs/auditfs/AuditRecord(vR0.clock,vR1,vR2,vR3);    [ ?R  i][ ?R . iRRRRR]
        vR0.writeAuditLog@special(b1);   [ ?R . RR....] 
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 0 any 0 found 0 writeAuditLog
 
 method writeAuditLog(Ljx/fs/auditfs/AuditRecord;)V {
  +START:   #1
        vi2 = vR1.getSize();    [   R] 
        if (vR0.posInBuf+vi2)<=vR0.sectorSize goto B64;   
  +B18:   #1
        if vR0.numberOfSectorsToBuffer<=0 goto B44;   
  +B25:   #1
        vR0.bio.writeSectors(vR0.currentSector,1,vR0.buf,1);   [i  iR iRiiR] 
  +B44:   #1
        vR0.currentSector = ((vR0.currentSector+1)%vR0.capacity);   
        vR0.posInBuf = 0;   
  +B64:   #1
        vR1.addToBuffer(vR0.buf,vR0.posInBuf);   [i  ii iRR..] 
        vR0.posInBuf = (vR0.posInBuf+vi2);   
        if vR0.numberOfSectorsToBuffer!=0 goto B112;   
  +B93:   #1
        vR0.bio.writeSectors(vR0.currentSector,1,vR0.buf,1);   [i  iR iRiiR] 
  +B112:   #1
        return;   
  +END:   #1
 }
// Register: rd 22/22 wr 7 swaps 3 any 0 found 0 writeAuditLog
 
 method erase()V {
  +START:   #1
        vR0.buf.fill32(0,0,(vR0.sectorSize/4));   [  i iiiR] 
        vi1 = 0;    
  +B19:   #1
        if vi1>=vR0.capacity goto B49;   
  +B27:   #1
        vR0.bio.writeSectors(vi1,1,vR0.buf,1);   [i  i iRiiR] 
        vi1++;   
        goto +B19;   [i  i .....]
  +B49:   #1
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 2 any 2 found 0 erase
 
 method dump()V {
  +START:   #1
        vi1 = 0;    
  +B2:   #1
        if vi1>=vR0.capacity goto B183;   
  +B10:   #1
        vR0.bio.readSectors(vi1,1,vR0.buf,1);   [i RR i iRiiR] 
        vR2 = new jx/fs/auditfs/AuditRecord();    [ RR i i....][ RR i iR...]
        vi3 = 0;    
  +B36:   #1
        if (vi3+8)<=vR0.sectorSize goto B50;   
  +B47:   #1
        goto +B177;   [iRi RR . .....]
  +B50:   #1
        if vR0.buf.getLittleEndian32(vi3)!=0 goto B81;   
  +B63:   #1
        if vR0.buf.getLittleEndian32((vi3+4))!=0 goto B81;   
  +B78:   #1
        goto +B177;   [iRi RR . .....]
  +B81:   #2
        vi3 = vR2.parseFromBuffer(vR0.buf,vi3);    [iRi RR i iRR..] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR i i....][ RR i iR...]
        b0.println(b1.append@extra(toHexString@special(vR2.time.high)).append@extra("/").append@extra(toHexString@special(vR2.time.low)).append@extra(" ").append@extra(vR2.systemName).append@extra("/").append@extra(vR2.domainName).append@extra(": ").append@extra(vR2.message).toString@extra());   [iRi RR iiiiiiii......iii..ii RR........] 
        goto +B36;   [iRi RR iiiiiiii......iii..ii ..........]
  +B177:   #2
        vi1++;   
        goto +B2;   [iRi RR ..................... ..........]
  +B183:   #1
        return;   
  +END:   #1
 }
// Register: rd 19/19 wr 31 swaps 16 any 3 found 0 dump
}
