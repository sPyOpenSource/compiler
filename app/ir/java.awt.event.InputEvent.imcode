class java/awt/event/InputEvent {
 
 method <init>(Ljava/awt/Component;II)V {
  +START:   #1
        vR0.<init>@special(vR1,vi2);   [   iRR] 
        vR0.modifiers = vi3;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method getModifiers()I {
  +START:   #1
        return vR0.modifiers;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getModifiers
 
 method isShiftDown()Z {
  +START:   #1
        if (vR0.getModifiers@this() & 1)<=0 goto B13;   
  +B9:   #1
        b0 = 1;    
        goto +B14b0;   forward return[ i  .]
  +B13:   #1
        b0 = 0;    
  +B14b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isShiftDown
 
 method isControlDown()Z {
  +START:   #1
        if (vR0.getModifiers@this() & 2)<=0 goto B13;   
  +B9:   #1
        b0 = 1;    
        goto +B14b0;   forward return[ i  .]
  +B13:   #1
        b0 = 0;    
  +B14b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isControlDown
 
 method isMetaDown()Z {
  +START:   #1
        if (vR0.getModifiers@this() & 4)<=0 goto B13;   
  +B9:   #1
        b0 = 1;    
        goto +B14b0;   forward return[ i  .]
  +B13:   #1
        b0 = 0;    
  +B14b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isMetaDown
 
 method isAltDown()Z {
  +START:   #1
        if (vR0.getModifiers@this() & 8)<=0 goto B14;   
  +B10:   #1
        b0 = 1;    
        goto +B15b0;   forward return[ i  .]
  +B14:   #1
        b0 = 0;    
  +B15b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isAltDown
 
 method isAltGraphDown()Z {
  +START:   #1
        if (vR0.getModifiers@this() & 32)<=0 goto B14;   
  +B10:   #1
        b0 = 1;    
        goto +B15b0;   forward return[ i  .]
  +B14:   #1
        b0 = 0;    
  +B15b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isAltGraphDown
 
 method consume()V {
  +START:   #1
        vR0.consume@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 consume
 
 method isConsumed()Z {
  +START:   #1
        return vR0.isConsumed@special();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isConsumed
}
