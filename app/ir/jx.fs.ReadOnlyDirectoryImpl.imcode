class jx/fs/ReadOnlyDirectoryImpl {
 
 method <init>(Ljx/fs/FilesystemImpl;Ljx/fs/FileSystem;Ljx/fs/FSObjectImpl;Ljx/fs/Inode;)V {
  +START:   #1
        vR0.<init>@special(vR1,vR2,vR3,vR4);   [   RRRRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method getParent()Ljx/fs/Directory; {
  +START:   #1
        return vR0.parent;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getParent
 
 method list()[Ljava/lang/String; {
  +START:   #1
        vR1 = vR0.inode.readdirNames();    [   R] 
        return vR0.inode.readdirNames();   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 list
 
 method close()V {
  +START:   #1
        vR0.inode.decUseCount();   [   R] 
        vR0.inode = 0;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 close
 
 method length()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 length
 
 method openRO(Ljava/lang/String;)Ljx/fs/FSObject; {
  +START:   #1
        vR2 = vR0.inode.lookup(vR1);    [ RR  RR] 
        if vR2.isDirectory()==0 goto B45;   
  +B20:   #1
        b0 = vR0.fs_impl;    
        b1 = new jx/fs/ReadOnlyDirectoryImpl(vR0.fs_impl,vR0.fs,vR0,vR2);    [ RR  i.][ RR . iRRRRR]
        return b0.registerFSObj(b1);   
  +B45:   #1
        if vR2.isFile()==0 goto B79;   
  +B54:   #1
        b0 = vR0.fs_impl;    
        b1 = new jx/fs/ReadOnlyRegularFileImpl(vR0.fs_impl,vR0.fs,vR0,vR2);    [ RR . i.....][ RR . iRRRRR]
        return b0.registerFSObj(b1);   
  +B79:   #2
        b0 = 0;    
  +B80b0:   #1 reference
        return b0;   
  +H81<caught exception>:   #1 reference
        vR2 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 44 handler 81 type 16
0 - 44 handler 81 type 17
0 - 44 handler 81 type 18
0 - 44 handler 81 type 19
0 - 44 handler 81 type 20
45 - 78 handler 81 type 16
45 - 78 handler 81 type 17
45 - 78 handler 81 type 18
45 - 78 handler 81 type 19
45 - 78 handler 81 type 20
79 - 80 handler 81 type 16
79 - 80 handler 81 type 17
79 - 80 handler 81 type 18
79 - 80 handler 81 type 19
79 - 80 handler 81 type 20
 }
// Register: rd 20/20 wr 9 swaps 0 any 0 found 0 openRO
 
 method openRW(Ljava/lang/String;)Ljx/fs/FSObject; {
  +START:   #1
        vR2 = vR0.inode.lookup(vR1);    [ R  RR] 
        if vR2.isDirectory()==0 goto B38;   
  +B20:   #1
        return new jx/fs/DirectoryImpl(vR0.fs_impl,vR0.fs,vR0,vR2);   
  +B38:   #1
        if vR2.isFile()==0 goto B65;   
  +B47:   #1
        return new jx/fs/RegularFileImpl(vR0.fs_impl,vR0.fs,vR0,vR2);   
  +B65:   #2
        b0 = 0;    
  +B66b0:   #1 reference
        return b0;   
  +H67<caught exception>:   #1 reference
        vR2 = <caught exception>;    
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 37 handler 67 type 16
0 - 37 handler 67 type 17
0 - 37 handler 67 type 18
0 - 37 handler 67 type 19
0 - 37 handler 67 type 20
38 - 64 handler 67 type 16
38 - 64 handler 67 type 17
38 - 64 handler 67 type 18
38 - 64 handler 67 type 19
38 - 64 handler 67 type 20
65 - 66 handler 67 type 16
65 - 66 handler 67 type 17
65 - 66 handler 67 type 18
65 - 66 handler 67 type 19
65 - 66 handler 67 type 20
 }
// Register: rd 14/14 wr 5 swaps 0 any 0 found 0 openRW
 
 method finalize()V {
  +START:   #1
        vR0.inode.decUseCount();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 finalize
}
