class java/util/Collections$CheckedMap$CheckedEntrySet$CheckedEntry {
 
 method <init>(Ljava/util/Map$Entry;Ljava/lang/Class;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.e = (java/util/Map$Entry)(requireNonNull@special(vR1));   
        vR0.valueType = (java/lang/Class)(requireNonNull@special(vR2));   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 <init>
 
 method getKey()Ljava/lang/Object; {
  +START:   #1
        return vR0.e.getKey();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getKey
 
 method getValue()Ljava/lang/Object; {
  +START:   #1
        return vR0.e.getValue();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getValue
 
 method hashCode()I {
  +START:   #1
        return vR0.e.hashCode();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 hashCode
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return vR0.e.toString();   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 toString
 
 method setValue(Ljava/lang/Object;)Ljava/lang/Object; {
  +START:   #1
        if vR1==null goto B28;   
  +B4:   #1
        if vR0.valueType.isInstance@extra(vR1)!=0 goto B28;   
  -B15:   #1
        throw new java/lang/ClassCastException(vR0.badValueMsg@special(vR1));   
  +B28:   #2
        return vR0.e.setValue(vR1);   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 0 any 1 found 0 setValue
 
 method badValueMsg(Ljava/lang/Object;)Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra("Attempt to insert ").append@extra(vR1.getClass()).append@extra(" value into map with value type ").append@extra(vR0.valueType).toString@extra();   
  +END:   #1
 }
// Register: rd 3/3 wr 9 swaps 4 any 0 found 0 badValueMsg
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        if vR1!=vR0 goto B7;   
  +B5:   #1
        return 1;   
  +B7:   #1
        if (vR1 instanceof java/util/Map$Entry)!=0 goto B16;   
  +B14:   #1
        return 0;   
  +B16:   #1
        b0 = vR0.e;    
        b1 = new java/util/AbstractMap$SimpleImmutableEntry((java/util/Map$Entry)(vR1));    [ RR  i.][ RR . iRR]
        return b0.equals(b1);   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 0 any 1 found 1 equals
}
