class jx/shell/Shell {
 
 method <init>(Ljx/zero/Naming;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.prompt = "> ";   
        b1 = new java/util/Hashtable();    [ ?R  i][ ?R  iR]
        vR0.commands = b1;   
        b1 = new java/util/Vector();    [ ?R  i.][ ?R  iR]
        vR0.history = b1;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljava/io/OutputStream;Ljava/io/InputStream;)V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        vR0.prompt = "> ";   
        b1 = new java/util/Hashtable();    [ ?R  i][ ?R  iR]
        vR0.commands = b1;   
        b1 = new java/util/Vector();    [ ?R  i.][ ?R  iR]
        vR0.history = b1;   
        b1 = new java/io/DataInputStream(vR2);    [ ?R  i.][ ?R . iRR]
        vR0.in = b1;   
        b1 = new java/io/PrintStream(vR1);    [ ?R . i..][ ?R . iRR]
        vR0.uout = b1;   
        return;   
  +END:   #1
 }
// Register: rd 14/14 wr 6 swaps 0 any 0 found 0 <init>
 
 method mainloop()V {
  +START:   #1
        vR0.uout.println("Starting shell.");   [ RR i RR] 
        vR0.uout.println("'help' lists all commands.");   [ RR ii RR] 
        vR0.uout.flush();   [ RR ii R.] 
  +B25:   #3
        vR0.uout.print(vR0.prompt);   [ RR i. RR] 
        vR0.uout.flush();   [ RR i. R.] 
        vR1 = vR0.in.readLine@extra();    [ RR i. R.] 
        vR2 = new jx/shell/Parser(vR1);    [ RR i. i.][ RR i. iRR]
        if vR2.getKommando().equals@extra("exit")==0 goto B73;   
  +B72:   #1
        return;   
  +B73:   #1
        if vR2.isValid()!=0 goto B83;   
  +B80:   #1
        goto +B25;   [RR RR ... ...]
  +B83:   #1
        vR3 = vR2.getKommando();    [RR RR ... R..] 
        vR4 = vR2.getArgumente();    [RRR RR ... R..] 
        if vR3.equals@extra("!!")==0 goto B149;   
  +B103:   #1
        vR5 = (jx/shell/HistoryElement)(vR0.history.lastElement@extra());    
        vR0.uout.println(vR5.line);   [RRRRR RR i.. RR.] 
        vR5.action.command(vR0.uout,vR5.param);   [RRRRR RR iiR RRR] 
        goto +B447;   [RRRRR RR iiR ...]
  +B149:   #1
        if vR3.equals@extra("history")==0 goto B207;   
  +B158:   #1
        vR5 = vR0.history.elements@extra();    [RRRRR RR ... R..] 
  +B167:   #1
        if vR5.hasMoreElements()==0 goto B204;   
  +B177:   #1
        vR6 = (jx/shell/HistoryElement)(vR5.nextElement());    
        vR0.uout.println(vR6.line);   [RRRRRR RR i.. RR.] 
        goto +B167;   [RRRRRR RR i.. ...]
  +B204:   #1
        goto +B447;   [RRRRRR RR ... ...]
  +B207:   #1
        if vR3.equals@extra("help")==0 goto B322;   
  +B216:   #1
        vR5 = vR0.commands.keys();    [RRRRRR RR ... R..] 
        vR0.uout.println("exit:  Exit shell");   [RRRRRR RR i.. RR.] 
        vR0.uout.println("!!:    Execute previous command again");   [RRRRRR RR ii. RR.] 
  +B243:   #1
        if vR5.hasMoreElements()==0 goto B319;   
  +B253:   #1
        vR6 = (java/lang/String)(vR5.nextElement());    
        vR7 = (jx/shell/Command)(vR0.commands.get(vR6));    
        b0 = vR0.uout;    
        b1 = new java/lang/StringBuilder();    [ RR ... i..][ RR ... iR.]
        b0.println(b1.append@extra(vR6).append@extra(":  ").append@extra(vR7.getInfo()).toString@extra());   [RRRRRRR RR iii.. RR..] 
        goto +B243;   [RRRRRRR RR iii.. ....]
  +B319:   #1
        goto +B447;   [RRRRRRR RR ..... ....]
  +B322:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ..... i...][ RR ..... iR..]
        b0.println(b1.append@extra("EXEC COMMAND ").append@extra(vR3).toString@extra());   [RRRRRRR RR ii... RR..] 
        vR5 = (jx/shell/Command)(vR0.commands.get(vR3));    
        if vR5!=null goto B407;   
  +B365:   #1
        out.println("XX ");   [RRRRRRR RR i.... RR..] 
        b0 = vR0.uout;    
        b1 = new java/lang/StringBuilder();    [ RR i.... i...][ RR i.... iR..]
        b0.println(b1.append@extra("unknown command '").append@extra(vR3).append@extra("'").toString@extra());   [RRRRRRR RR iiii.. RR..] 
        goto +B25;   [RRRRRRR RR iiii.. ....]
  +B407:   #2
        out.println("YY ");   [RRRRRRR RR i..... RR..] 
        vR5.command(vR0.uout,vR4);   [RRRRRRR RR ii.... RRR.] 
        b0 = vR0.history;    
        b1 = new jx/shell/HistoryElement(vR5,vR4,vR1);    [ RR ii.... i...][ RR ii.... iRRRR]
        b0.addElement@extra(b1);   [RRRRRRR RR ii.... RR...] 
  +B447:   #4
        goto +B479;   [RRRRR RR ...... .....]
  +H450<caught exception>:   #1 reference
        vR5 = <caught exception>;    
        b0 = vR0.uout;    
        b1 = new java/lang/StringBuilder();    [ RR ...... i....][ RR ...... iR...]
        b0.println(b1.append@extra("Command has thrown exception ").append@extra(vR5).toString@extra());   [RRRRRRR RR ii.... RR...] 
  +B479:   #1
        goto +B25;   [RRRRR RR ...... .....]
  +END:   #1
EXCEPTIONHANDLER-TABLE:
94 - 404 handler 450 type 180
407 - 447 handler 450 type 180
 }
// Register: rd 61/61 wr 68 swaps 25 any 1 found 0 mainloop
 
 method register(Ljava/lang/String;Ljx/shell/Command;)V {
  +START:   #1
        vR0.commands.put(vR1,vR2);   [   RRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 register
}
