class metaxa/os/devices/net/UpdListEntry {
 
 method <init>(Ljx/zero/MemoryManager;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.UpdMemory = vR1.allocAligned(16,8);   
        if vR0.UpdMemory!=null goto B34;   
  +B25:   #1
        out.println("ERROR: couldn't allocate memory for UpdListEntry!");   [  i. RR.] 
        return;   
  +B34:   #1
        vR0.UPDPhysicalAddress = vR0.UpdMemory.getStartAddress();   
        vR0.StoreMem = vR1.alloc(1514);   
        if vR0.StoreMem!=null goto B76;   
  +B67:   #1
        out.println("ERROR: couldn't allocate memory for Storage!");   [  i. RR.] 
        return;   
  +B76:   #1
        vR0.UpdMemory.set32(0,0);   [  .. iiR] 
        vR0.UpdMemory.set32(1,0);   [  .. iiR] 
        vR0.UpdMemory.set32(2,vR0.StoreMem.getStartAddress());   [  i. iiR] 
        vR0.UpdMemory.set32(3,(vR0.StoreMem.size() | -2147483648));   [  ii iiR] 
        return;   
  +END:   #1
 }
// Register: rd 15/15 wr 6 swaps 4 any 0 found 0 <init>
 
 method StoreMem(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.StoreMem = vR1;   
        vR0.UpdMemory.set32(2,vR1.getStartAddress());   [  i iiR] 
        vR0.UpdMemory.set32(3,(vR1.size() | -2147483648));   [  ii iiR] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 2 any 0 found 0 StoreMem
 
 method UpPacketStatus(I)V {
  +START:   #1
        vR0.UpdMemory.set32(1,vi1);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 UpPacketStatus
 
 method UpNextPointer(I)V {
  +START:   #1
        vR0.UpdMemory.set32(0,vi1);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 UpNextPointer
 
 method Next(Lmetaxa/os/devices/net/UpdListEntry;)V {
  +START:   #1
        vR0.Next = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 Next
 
 method Previous(Lmetaxa/os/devices/net/UpdListEntry;)V {
  +START:   #1
        vR0.Previous = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 Previous
 
 method UpPacketStatus()I {
  +START:   #1
        return vR0.UpdMemory.get32(1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 UpPacketStatus
 
 method UpdMemory()Ljx/zero/Memory; {
  +START:   #1
        return vR0.UpdMemory;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 UpdMemory
 
 method StoreMem()Ljx/zero/Memory; {
  +START:   #1
        return vR0.StoreMem;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 StoreMem
 
 method Next()Lmetaxa/os/devices/net/UpdListEntry; {
  +START:   #1
        return vR0.Next;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 Next
 
 method Previous()Lmetaxa/os/devices/net/UpdListEntry; {
  +START:   #1
        return vR0.Previous;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 Previous
 
 method UPDPhysicalAddress()I {
  +START:   #1
        return vR0.UPDPhysicalAddress;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 UPDPhysicalAddress
 
 method toString()Ljava/lang/String; {
  +START:   #1
        out.println("-------------UPD_Eintrag---------------");   [ RR i. RR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR i. i.][ RR i. iR]
        b0.println(b1.append@extra("UpPacketStatus: ").append@extra(toHexString@special(vR0.UpdMemory.get32(1))).toString@extra());   [ RR iiiii. RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiii. i..][ RR iiiii. iR.]
        b0.println(b1.append@extra("UPDPhysicalAddress: ").append@extra(toHexString@special(vR0.UPDPhysicalAddress)).toString@extra());   [ RR iiiiiiiii. RR.] 
        out.println("------- Ende der internen Variablen ---------");   [ RR iiiiiiiiii. RR.] 
        if vR0.UpdMemory==null goto B280;   
  +B91:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ........... i..][ RR ........... iR.]
        b0.println(b1.append@extra("UPDMem(0): ").append@extra(vR0.UpdMemory.get32(0)).toString@extra());   [ RR iii........ RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iii........ i..][ RR iii........ iR.]
        b0.println(b1.append@extra("UPDMem(4): ").append@extra(vR0.UpdMemory.get32(1)).toString@extra());   [ RR iiiiii..... RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiii..... i..][ RR iiiiii..... iR.]
        b0.println(b1.append@extra("UPDMem(8): ").append@extra(vR0.UpdMemory.get32(2)).toString@extra());   [ RR iiiiiiiii.. RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiiiiii.. i..][ RR iiiiiiiii.. iR.]
        b0.println(b1.append@extra("UPDMem(12): ").append@extra(vR0.UpdMemory.get32(3)).toString@extra());   [ RR iiiiiiiiiiii. RR.] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR iiiiiiiiiiii. i..][ RR iiiiiiiiiiii. iR.]
        b0.println(b1.append@extra("StartAddresse UPDMem: ").append@extra(vR0.UpdMemory.getStartAddress()).append@extra("  Groesse: ").append@extra(vR0.UpdMemory.size()).toString@extra());   [ RR iiiiiiiiiiiiiii..ii. RR...] 
        goto +B288;   [ RR iiiiiiiiiiiiiii..ii. .....]
  +B280:   #1
        out.println("UPDMem ist null!!!");   [ RR i................... RR...] 
  +B288:   #1
        if vR0.StoreMem==null goto B348;   
  +B295:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .................... i....][ RR .................... iR...]
        b0.println(b1.append@extra("StoreMem -> Groesse: ").append@extra(vR0.StoreMem.size()).append@extra("  StartAdresse: ").append@extra(vR0.StoreMem.getStartAddress()).toString@extra());   [ RR iii..ii............. RR...] 
        goto +B356;   [ RR iii..ii............. .....]
  +B348:   #1
        out.println("StoreMem ist null!!!");   [ RR i................... RR...] 
  +B356:   #1
        out.println("------------- ENDE -> UPD_Eintrag <- ENDE ---------------");   [ RR i................... RR...] 
        return "";   
  +END:   #1
 }
// Register: rd 28/28 wr 76 swaps 33 any 0 found 0 toString
}
