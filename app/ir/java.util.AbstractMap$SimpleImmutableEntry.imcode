class java/util/AbstractMap$SimpleImmutableEntry {
 
 method <init>(Ljava/lang/Object;Ljava/lang/Object;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.key = vR1;   
        vR0.value = vR2;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljava/util/Map$Entry;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.key = vR1.getKey();   
        vR0.value = vR1.getValue();   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method getKey()Ljava/lang/Object; {
  +START:   #1
        return vR0.key;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getKey
 
 method getValue()Ljava/lang/Object; {
  +START:   #1
        return vR0.value;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getValue
 
 method setValue(Ljava/lang/Object;)Ljava/lang/Object; {
  -START:   #1
        throw new java/util/UnsupportedOperationException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setValue
 
 method hashCode()I {
  +START:   #1
        if vR0.key!=null goto B11;   
  +B7:   #1
        b0 = 0;    
        goto +B18b0;   [ ii  ]
  +B11:   #1
        b0 = vR0.key.hashCode();    [ ii  R] 
  +B18b0:   #1 int
        if vR0.value!=null goto B29;   
  +B25b0:   #1 int
        b1 = 0;    
        goto +B36b0b1;   forward return[ ii  .]
  +B29b0:   #1 int
        b1 = vR0.value.hashCode();    [ ii  R] 
  +B36b0b1:   #1 int int
        return (b0 ^ b1);   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 0 found 0 hashCode
 
 method toString()Ljava/lang/String; {
  +START:   #1
        b0 = new java/lang/StringBuilder();    [ R  i][ R  iR]
        return b0.append@extra(vR0.key).append@extra("=").append@extra(vR0.value).toString@extra();   
  +END:   #1
 }
// Register: rd 3/3 wr 7 swaps 3 any 0 found 0 toString
}
