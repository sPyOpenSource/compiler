class jx/rdp/crypto/RC4 {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.sBox = new int[256];   
        vR0.cipherName = "RC4";   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 <init>
 
 method clone()Ljava/lang/Object; {
  -START:   #1
        throw new java/lang/CloneNotSupportedException();   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 clone
 
 method engineBlockSize()I {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 engineBlockSize
 
 method engineInitEncrypt([B)V {
  +START:   #1
        vR0.makeKey@special(vR1);   [   RR] 
        vR0.state = 1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 engineInitEncrypt
 
 method engineInitDecrypt([B)V {
  +START:   #1
        vR0.makeKey@special(vR1);   [   RR] 
        vR0.state = 1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 engineInitDecrypt
 
 method engineUpdate([BII[BI)I {
  +START:   #1
        if vi3>=0 goto B14;   
  -B4:   #1
        throw new java/lang/IllegalArgumentException("inLen < 0");   
  +B14:   #1
        if vR0.getState@extra()!=1 goto B26;   
  +B22:   #1
        b0 = 1;    
        goto +B27b0;   [ i . ...]
  +B26:   #1
        b0 = 0;    
  +B27b0:   #1 int
        vi6 = b0;    
        if vR1!=vR4 goto B82;   
  +B35:   #1
        if vi5<vi2 goto B49;   
  +B41:   #1
        if vi5<(vi2+vi3) goto B63;   
  +B49:   #1
        if vi2<vi5 goto B82;   
  +B55:   #1
        if vi2>=(vi5+vi3) goto B82;   
  +B63:   #1
        vR7 = new byte[vi3];    
        arraycopy@special(vR1,vi2,vR7,0,vi3);   [iR i . iiRiR]
        vR1 = vR7;    
        vi2 = 0;    
  +B82:   #3
        vR0.rc4@special(vR1,vi2,vi3,vR4,vi5);   [iR i . iRiiRR] 
        return vi3;   
  +END:   #1
 }
// Register: rd 20/20 wr 6 swaps 0 any 8 found 0 engineUpdate
 
 method rc4([BII[BI)V {
  +START:   #1
        vi8 = 0;    
  +B3:   #1
        if vi8>=vi3 goto B139;   
  +B9:   #1
        vR0.x = ((vR0.x+1) & 255);   
        vR0.y = ((vR0.sBox[vR0.x]+vR0.y) & 255);   
        vi7 = vR0.sBox[vR0.x];    
        vR0.sBox[vR0.x] = vR0.sBox[vR0.y];   
        vR0.sBox[vR0.y] = vi7;   
        vi6 = ((vR0.sBox[vR0.x]+vR0.sBox[vR0.y]) & 255);    
        b1 = vi5;    
        vi5++;   
        b3 = vi2;    
        vi2++;   
        vR4[b1] = (byte)(vR1[b3] ^ vR0.sBox[vi6]);   
        vi8++;   
        goto +B3;   [iii ?i?i  ]
  +B139:   #1
        return;   
  +END:   #1
 }
// Register: rd 32/32 wr 8 swaps 0 any 7 found 0 rc4
 
 method makeKey([B)V {
  +START:   #1
        if vR1!=null goto B34;   
  -B4:   #1
        b0 = new jx/rdp/crypto/CryptoException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra(vR0.getAlgorithm@extra()).append@extra(": Null user key").toString@extra());   [ RRR ii.i RR.] 
        throw b0;   
  +B34:   #1
        vi2 = vR1.length;    
        if vi2!=0 goto B71;   
  -B41:   #1
        b0 = new jx/rdp/crypto/CryptoException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR .... i..][ RRR .... iR.]
        b1.<init>@special(b2.append@extra(vR0.getAlgorithm@extra()).append@extra(": Invalid user key length").toString@extra());   [i RRR ii.i RR.] 
        throw b0;   
  +B71:   #1
        vR0.y = 0;   
        vR0.x = 0;   
        vi3 = 0;    
  +B83:   #1
        if vi3>=256 goto B103;   
  +B90:   #1
        vR0.sBox[vi3] = vi3;   
        vi3++;   
        goto +B83;   [ii RRR .... ...]
  +B103:   #1
        vi3 = 0;    
        vi4 = 0;    
        vi6 = 0;    
  +B111:   #1
        if vi6>=256 goto B187;   
  +B119:   #1
        vi4 = ((((vR1[vi3] & 255)+vR0.sBox[vi6])+vi4) & 255);    
        vi5 = vR0.sBox[vi6];    
        vR0.sBox[vi6] = vR0.sBox[vi4];   
        vR0.sBox[vi4] = vi5;   
        vi3 = ((vi3+1)%vi2);    
        vi6++;   
        goto +B111;   [iiiii RRR .... ...]
  +B187:   #1
        return;   
  +END:   #1
 }
// Register: rd 38/38 wr 26 swaps 6 any 10 found 1 makeKey
 
 method getAlgorithm()Ljava/lang/String; {
  +START:   #1
        return vR0.cipherName;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getAlgorithm
 
 method getState()I {
  +START:   #1
        return vR0.state;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getState
 
 method crypt([BII)[B {
  +START:   #1
        vR4 = new byte[vi3];    
        vR0.engineUpdate@extra(vR1,vi2,vi3,vR4,0);   [R   iRiiRR] 
        return vR4;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 0 any 0 found 0 crypt
 
 method crypt([B)[B {
  +START:   #1
        vR2 = new byte[vR1.length];    
        vR0.engineUpdate@extra(vR1,0,vR1.length,vR2,0);   [R  i iRiiRR] 
        return vR2;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 1 any 0 found 0 crypt
 
 method crypt([BII[BI)V {
  +START:   #1
        vR0.engineUpdate@extra(vR1,vi2,vi3,vR4,vi5);   [   iRiiRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 crypt
}
