class jx/net/protocol/icmp/ICMPFormat {
 
 method <init>(Ljx/zero/Memory;I)V {
  +START:   #1
        vR0.<init>@special(vR1,vi2);   [   iRR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method insertType(B)V {
  +START:   #1
        vR0.writeByte@this(0,vi1);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 insertType
 
 method getType()I {
  +START:   #1
        return vR0.readByte@this(0);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getType
 
 method getCode()I {
  +START:   #1
        return vR0.readByte@this(1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getCode
 
 method getChecksum()I {
  +START:   #1
        return vR0.readShort@this(2);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getChecksum
 
 method CalculateChecksum()V {
  +START:   #1
        vR0.writeShort@this(2,0);   [   iiR] 
        vi1 = calcChecksum@special(vR0.buf,34,(vR0.buf.size()-34));    [  iR iiR]
        vR0.writeShort@this(2,(short)(((vi1 >> 8) & 255) | ((vi1 << 8) & 65280)));   [i  iRi iiR] 
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 5 swaps 1 any 0 found 0 CalculateChecksum
 
 method length()I {
  +START:   #1
        return 16;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 length
}
