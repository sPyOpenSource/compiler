class jx/net/protocol/udp/UDP {
 
 method <init>(Ljx/net/IPProducer;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.udpConsumerList = new jx/net/UDPConsumer()[65536];   
        vR0.init@special();   [   R.] 
        vR0.lowerProducer = vR1;   
        vR1.registerConsumer(vR0,"UDP");   [  i RRR] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 1 swaps 1 any 0 found 0 <init>
 
 method init()V {
  +START:   #1
        vR0.cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        vR0.event_rcv = vR0.cpuManager.createNewEvent("UDPRcv");   
        vR0.event_snd = vR0.cpuManager.createNewEvent("UDPSnd");   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 5 swaps 3 any 0 found 0 init
 
 method processIP(Ljx/net/IPData;)Ljx/zero/Memory; {
  +START:   #1
        vR0.cpuManager.recordEvent(vR0.event_rcv);    
        vR2 = vR1.mem;    
        vR3 = new jx/net/protocol/udp/UDPFormat(vR1.mem);    [ R  i][ R . iRR]
        vi4 = vR3.getDestPort();    [RR R . R..] 
        vi5 = vR3.getSourcePort();    [RRi R . R..] 
        vR0.checkPort@special(vi4);   [RRii R . iR.] 
        out.println(vi4);   [RRii R . iR.] 
        b0 = vR0.udpConsumerList[vi4];    
        vR7 = b0;    
        if b0==null goto B150;   
  +B69:   #1
        vi8 = vR3.length@extra();    [RRii?R R . R..] 
        out.println("UDPDATALEN: ");   [RRii?Ri R i. RR.] 
        vR9 = vR1.mem.getSubRange(vi8,(vR1.mem.size()-vi8));    [RRii?Ri R ii iiR] 
        vR10 = new jx/net/UDPData();    [ R ii i..][ R ii iR.]
        vR10.mem = vR9;   
        vR10.sourcePort = vi5;   
        vR10.sourceAddress = vR1.sourceAddress;   
        return vR7.processUDP(vR10);   
  +B150:   #1
        return vR1.mem;   
  +END:   #1
 }
// Register: rd 22/22 wr 14 swaps 2 any 2 found 0 processIP
 
 method registerUDPConsumer(Ljx/net/UDPConsumer;I)Z {
  +START:   #1
        vR0.checkPort@special(vi2);   [ RR  iR] 
        if vR0.udpConsumerList[vi2]==null goto B24;   
  -B14:   #1
        throw new java/lang/Error("port already used");   
  +B24:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR . i..][ RR . iR.]
        b0.println(b1.append@extra("reg: ").append@extra(vi2).toString@extra());   [ RR ii. RR.] 
        vR0.udpConsumerList[vi2] = vR1;   
        return 1;   
  +END:   #1
 }
// Register: rd 9/9 wr 7 swaps 2 any 1 found 0 registerUDPConsumer
 
 method unregisterUDPConsumer(Ljx/net/UDPConsumer;I)Z {
  +START:   #1
        vR0.checkPort@special(vi2);   [ R  iR] 
        if vR0.udpConsumerList[vi2]!=null goto B24;   
  -B14:   #1
        throw new java/lang/Error("no consumer registered");   
  +B24:   #1
        if vR0.udpConsumerList[vi2]==vR1 goto B44;   
  -B34:   #1
        throw new java/lang/Error("this consumer is not registered");   
  +B44:   #1
        vR0.udpConsumerList[vi2] = 0;   
        return 1;   
  +END:   #1
 }
// Register: rd 10/10 wr 2 swaps 0 any 0 found 0 unregisterUDPConsumer
 
 method getTransmitter1(Ljx/net/PacketsConsumer1;II)Ljx/net/PacketsConsumer1; {
  +START:   #1
        vR0.checkPort@special(vi2);   [ R  iR] 
        vR0.checkPort@special(vi3);   [ R  iR] 
        return new jx/net/protocol/udp/UDP$1(vR0,vi2,vi3,vR1);   
  +END:   #1
 }
// Register: rd 7/7 wr 1 swaps 0 any 0 found 0 getTransmitter1
 
 method getTransmitter(Ljx/net/PacketsConsumer;II)Ljx/net/PacketsConsumer; {
  +START:   #1
        vR0.checkPort@special(vi2);   [ R  iR] 
        vR0.checkPort@special(vi3);   [ R  iR] 
        return new jx/net/protocol/udp/UDP$2(vR0,vi2,vi3,vR1);   
  +END:   #1
 }
// Register: rd 7/7 wr 1 swaps 0 any 0 found 0 getTransmitter
 
 method checkPort(I)V {
  +START:   #1
        if vi1< 0 goto B10;   
  +B4:   #1
        if vi1<=65535 goto B45;   
  -B10:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("PORT: ").append@extra(vi1).toString@extra());   [ RR ii. RR.] 
        throw new java/lang/Error("Invalid port number.");   
  +B45:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 7 swaps 2 any 2 found 0 checkPort
}
