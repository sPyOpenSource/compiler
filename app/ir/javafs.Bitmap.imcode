class javafs/Bitmap {
 
 method <init>(Ljx/fs/buffercache/BufferCache;II)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.blocksize = vi2;   
        vR0.block_nr = vi3;   
        vR0.buffercache = vR1;   
        vR0.bitmap_loaded = 0;   
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 0 swaps 0 any 0 found 0 <init>
 
 method countFree(I)S {
  +START:   #1
        vi3 = 0;    
        vR0.loadBitmap@this();   [?i   R] 
        vi2 = 0;    
  +B8:   #1
        if vi2>=(vi1/8) goto B63;   
  +B16:   #1
        vi3 = (short)(vi3+(nibblemap[(vR0.bitmap.get8(vi2) & 15)]+nibblemap[((vR0.bitmap.get8(vi2) >> 4) & 15)]));    
        vi2++;   
        goto +B8;   [ii  .. ..]
  +B63:   #1
        if (vi1%8)==0 goto B97;   
  +B70:   #1
        vi2 = (vi2*8);    
  +B75:   #1
        if vi2>=vi1 goto B97;   
  +B80:   #1
        vi3 = (short)(vi3+(1-vR0.testBit@this(vi2)));    
        vi2++;   
        goto +B75;   [ii  .. ..]
  +B97:   #2
        return vi3;   
  +END:   #1
 }
// Register: rd 22/22 wr 11 swaps 0 any 5 found 2 countFree
 
 method loadBitmap()V {
  +START:   #1
        if vR0.bitmap_loaded==0 goto B8;   
  +B7:   #1
        return;   
  +B8:   #1
        vR0.bh = vR0.buffercache.bread(vR0.block_nr);   
        if vR0.bh!=null goto B42;   
  -B32:   #1
        throw new javafs/BufferIOException("no buffer head");   
  +B42:   #1
        vR0.bitmap = vR0.bh.getData();   
        if vR0.bitmap!=null goto B70;   
  -B60:   #1
        throw new javafs/BufferIOException("no block memory");   
  +B70:   #1
        vR0.bitmap_loaded = 1;   
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 3 swaps 1 any 0 found 0 loadBitmap
 
 method clearBitmap()V {
  +START:   #1
        if vR0.bitmap_loaded==0 goto B39;   
  +B7:   #1
        vi1 = 0;    
  +B9:   #1
        if vi1>=vR0.bitmap.size() goto B39;   
  +B22:   #1
        vR0.bitmap.set8(vi1,0);   [i   iiR] 
        vi1++;   
        goto +B9;   [i   ...]
  +B39:   #2
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 0 any 2 found 1 clearBitmap
 
 method markBitmapDirty()V {
  +START:   #1
        if vR0.bitmap_loaded==0 goto B14;   
  +B7:   #1
        vR0.bh.markDirty();   [   R] 
  +B14:   #1
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 markBitmapDirty
 
 method releaseBitmap()V {
  +START:   #1
        if vR0.bitmap_loaded==0 goto B30;   
  +B7:   #1
        vR0.buffercache.bdwrite(vR0.bh);   [  i RR] 
        vR0.bitmap_loaded = 0;   
        vR0.bitmap = 0;   
  +B30:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 1 any 0 found 0 releaseBitmap
 
 method setBit(I)V {
  +START:   #1
        vR0.bitmap.set8((vi1 >> 3),(byte)(vR0.bitmap.get8((vi1 >> 3)) | (1 << (vi1 & 7))));   [  iii iiR] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 2 any 0 found 0 setBit
 
 method clearBit(I)V {
  +START:   #1
        vR0.bitmap.set8((vi1 >> 3),(byte)(vR0.bitmap.get8((vi1 >> 3)) & ((1 << (vi1 & 7)) ^ -1)));   [  iii iiR] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 2 any 0 found 0 clearBit
 
 method testBit(I)I {
  +START:   #1
        if (vR0.bitmap.get8((vi1 >> 3)) & (1 << (vi1 & 7)))<=0 goto B24;   
  +B22:   #1
        return 1;   
  +B24:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 testBit
 
 method findFirstZeroByte()I {
  +START:   #1
        vi2 = 0;    
  +B2:   #1
        if vi2>=vR0.bitmap.size() goto B78;   
  +B15:   #1
        if vR0.bitmap.get8(vi2)!=0 goto B72;   
  +B28:   #1
        vi1 = 0;    
  +B30:   #1
        if vi1>=7 goto B65;   
  +B36:   #1
        if vi2<=0 goto B65;   
  +B40:   #1
        if (vR0.bitmap.get8((vi2-1)) & (1 << vi1))!=0 goto B65;   
  +B59:   #1
        vi1++;   
        goto +B30;   [ii  . ..]
  +B65:   #3
        return ((vi2*8)+vi1);   
  +B72:   #1
        vi2++;   
        goto +B2;   [ii  . ..]
  +B78:   #1
        return -1;   
  +END:   #1
 }
// Register: rd 13/13 wr 5 swaps 1 any 5 found 1 findFirstZeroByte
 
 method findNextZeroByte(I)I {
  +START:   #1
        vi3 = (vi1 >> 3);    
  +B4:   #1
        if vi3>=vR0.bitmap.size() goto B80;   
  +B17:   #1
        if vR0.bitmap.get8(vi3)!=0 goto B74;   
  +B30:   #1
        vi2 = 0;    
  +B32:   #1
        if vi2>=7 goto B67;   
  +B38:   #1
        if vi3<=0 goto B67;   
  +B42:   #1
        if (vR0.bitmap.get8((vi3-1)) & (1 << vi2))!=0 goto B67;   
  +B61:   #1
        vi2++;   
        goto +B32;   [ii  . ..]
  +B67:   #3
        return ((vi3*8)+vi2);   
  +B74:   #1
        vi3++;   
        goto +B4;   [ii  . ..]
  +B80:   #1
        return -1;   
  +END:   #1
 }
// Register: rd 14/14 wr 5 swaps 1 any 6 found 1 findNextZeroByte
 
 method findFirstZeroBit()I {
  +START:   #1
        vi1 = 0;    
  +B2:   #1
        if vi1>=vR0.bitmap.size() goto B73;   
  +B15:   #1
        if vR0.bitmap.get8(vi1)==-1 goto B67;   
  +B29:   #1
        vi2 = 0;    
  +B31:   #1
        if vi2>=8 goto B67;   
  +B37:   #1
        if ((vR0.bitmap.get8(vi1) >> vi2) & 1)!=0 goto B61;   
  +B54:   #1
        return ((vi1*8)+vi2);   
  +B61:   #1
        vi2++;   
        goto +B31;   [ii   ..]
  +B67:   #2
        vi1++;   
        goto +B2;   [ii   ..]
  +B73:   #1
        return -1;   
  +END:   #1
 }
// Register: rd 11/11 wr 4 swaps 0 any 4 found 1 findFirstZeroBit
 
 method findNextZeroBit(I)I {
  +START:   #1
        vi2 = (vi1 >> 3);    
  +B4:   #1
        if vi2>=vR0.bitmap.size() goto B75;   
  +B17:   #1
        if vR0.bitmap.get8(vi2)==-1 goto B69;   
  +B31:   #1
        vi3 = 0;    
  +B33:   #1
        if vi3>=8 goto B69;   
  +B39:   #1
        if ((vR0.bitmap.get8(vi2) >> vi3) & 1)!=0 goto B63;   
  +B56:   #1
        return ((vi2*8)+vi3);   
  +B63:   #1
        vi3++;   
        goto +B33;   [ii   ..]
  +B69:   #2
        vi2++;   
        goto +B4;   [ii   ..]
  +B75:   #1
        return -1;   
  +END:   #1
 }
// Register: rd 12/12 wr 4 swaps 0 any 5 found 1 findNextZeroBit
 
 method <clinit>()V {
  +START:   #1
        b0 = new int[16];    
        b0[0] = 4;   
        b0[1] = 3;   
        b0[2] = 3;   
        b0[3] = 2;   
        b0[4] = 3;   
        b0[5] = 2;   
        b0[6] = 2;   
        b0[7] = 1;   
        b0[8] = 3;   
        b0[9] = 2;   
        b0[10] = 2;   
        b0[11] = 1;   
        b0[12] = 2;   
        b0[13] = 1;   
        b0[14] = 1;   
        b0[15] = 0;   
        nibblemap = b0;   
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 1 swaps 0 any 0 found 1 <clinit>
}
