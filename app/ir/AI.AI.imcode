class AI/AI {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        b1 = new AI/AIIO();    [ ?R  i][ ?R  iR]
        vR0.IO = b1;   
        b1 = new AI/AILogic(vR0.IO.getMemory());    [ ?R  i.][ ?R . iRR]
        vR0.log = b1;   
        b1 = new java/lang/Thread(vR0.log,"logic");    [ ?R . i..][ ?R . iRRR]
        vR0.logThread = b1;   
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 5 swaps 0 any 0 found 0 <init>
 
 method start()V {
  +START:   #1
        out.println("AI running...");   [  i. RR] 
        vR0.logThread.start();   [  i. R.] 
        vR0.IO.start();   [  i. R.] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 start
 
 method init(Ljx/zero/Naming;)V {
  +START:   #1
        vR1 = new jx/zero/debug/DebugOutputStream((jx/zero/debug/DebugChannel)(vR0.lookup("DebugChannel0")));    [ R  i][ R .i. iRR]
        b0 = new jx/zero/debug/DebugPrintStream(vR1);    [ R .i. i..][ R .i. iRR]
        out = b0;   
        out.println("Init running...");   [R R ii. RR.] 
        main@special(0);   [R R ii. R..]
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 8 swaps 2 any 0 found 1 init
 
 method main([Ljava/lang/String;)V {
  +START:   #2
        vR1 = new AI/AI();    [ R  i][ R  iR]
        vR1.start@extra();   [R R  R.] 
  +B12:   #1
        goto +B16;   forward return[R R  ..]
  +H15<caught exception>:   #1 reference
        vR1 = <caught exception>;    
  +B16:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 12 handler 15 type 84
 }
// Register: rd 1/1 wr 2 swaps 0 any 0 found 0 main
}
