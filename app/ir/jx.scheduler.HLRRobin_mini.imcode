class jx/scheduler/HLRRobin_mini {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?RRR  R] 
        vR0.runnables = 0;   
        vR0.MyCPU = 0;   
        vR0.uninterruptable = 0;   
        vR0.unINTthread = 0;   
        vR0.DomainName = "";   
        vR0.debug = 0;   
        vR0.domainZero = getInitialNaming@special();   
        vR0.cpuManager = (jx/zero/CPUManager)(vR0.domainZero.lookup("CPUManager"));   
        vR0.SMPcpuManager = (jx/zero/SMPCPUManager)(vR0.domainZero.lookup("SMPCPUManager"));   
        vR0.HLschedulerSupport = (jx/zero/HLSchedulerSupport)(vR0.domainZero.lookup("HLSchedulerSupport"));   
        vR1 = (jx/zero/debug/DebugChannel)(vR0.domainZero.lookup("DebugChannel0"));    
        b1 = new jx/zero/debug/DebugPrintStream;    
        b2 = b1;    
        b3 = new jx/zero/debug/DebugOutputStream(vR1);    [ ?RRR iiii. i.][ ?RRR iiii. iRR]
        b2.<init>@special(b3);   [R ?RRR iiii. RR.] 
        vR0.out = b1;   
        vR0.uninterruptable = 0;   
        out = vR0.out;   
        b1 = new jx/scheduler/ThreadList();    [ ?RRR iiii. i..][ ?RRR iiii. iR.]
        vR0.runnables = b1;   
        return;   
  +END:   #1
 }
// Register: rd 31/31 wr 15 swaps 4 any 1 found 0 <init>
 
 method registered()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("HLRRobin registered called on CPU").append@extra(vR0.SMPcpuManager.getMyCPU()).toString@extra());   [ RR iii. RR.] 
        vR0.MyCPU = vR0.SMPcpuManager.getMyCPU();   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 7 swaps 3 any 0 found 0 registered
 
 method Scheduler_interrupted()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 Scheduler_interrupted
 
 method Scheduler_preempted()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 Scheduler_preempted
 
 method interrupted(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.preempted@this(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 interrupted
 
 method preempted(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.uninterruptable!=1 goto B16;   
  +B8:   #1
        vR0.unINTthread = vR1;   
        goto +B25;   forward return[   ]
  +B16:   #1
        vR0.runnables.add(vR1);   [   RR] 
  +B25:   #1
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 preempted
 
 method yielded(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.runnables.add(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 yielded
 
 method unblocked(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.runnables.add(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 unblocked
 
 method created(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.runnables.add(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 created
 
 method startGCThread(Ljx/zero/CPUState;Ljx/zero/CPUState;)V {
  +START:   #1
        if vR1==null goto B13;   
  +B4:   #1
        vR0.runnables.add(vR1);   [   RR] 
  +B13:   #1
        vR0.uninterruptable = 1;   
        vR0.HLschedulerSupport.activateThread(vR2);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 1 found 0 startGCThread
 
 method unblockedGCThread(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.uninterruptable!=1 goto B18;   
  -B8:   #1
        throw new java/lang/Error("should not happen!");   
  +B18:   #1
        vR0.unINTthread = vR1;   
        vR0.uninterruptable = 1;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 0 any 0 found 0 unblockedGCThread
 
 method destroyedGCThread(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.uninterruptable = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 destroyedGCThread
 
 method activated()V {
  +START:   #1
        vR1 = (jx/zero/CPUState)(vR0.runnables.removeFirst());    
        if vR0.uninterruptable!=1 goto B32;   
  +B19:   #1
        vR0.HLschedulerSupport.activateThread(vR0.unINTthread);   [R R i RR] 
  +B32:   #1
        if vR1!=null goto B64;   
  -B36:   #1
        vR0.HLschedulerSupport.clearMyRunnableFlag();   [R R . R.] 
        vR0.HLschedulerSupport.yield();   [R R . R.] 
        throw new java/lang/Error("should never return! (A)");   
  -B64:   #1
        vR0.HLschedulerSupport.activateThread(vR1);   [R R . RR.] 
        throw new java/lang/Error("should never return! (C)");   
  +END:   #1
 }
// Register: rd 11/11 wr 5 swaps 1 any 1 found 0 activated
 
 method dump()V {
  +START:   #1
        if vR0.uninterruptable!=1 goto B29;   
  +B8:   #1
        out.print("U:");   [  i. RR] 
        vR0.HLschedulerSupport.dumpThread(vR0.unINTthread);   [  ii RR] 
  +B29:   #1
        vR0.runnables.dump();   [  .. R.] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 3 swaps 2 any 0 found 0 dump
}
