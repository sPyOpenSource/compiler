class java/security/SecureRandom {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ R  R] 
        vR0.counter = 0;   
        vR0.digest = 0;   
        vR0.provider = 0;   
        vR0.randomBytes = 0;   
        vR0.randomBytesUsed = 0;   
        vR0.secureRandomSpi = 0;   
        vR0.state = 0;   
        vR1 = getProviders@special();    [ R  .]
        vR3 = 0;    
        vi5 = 0;    
        vi4 = 0;    
  +B51:   #1
        if vi4>=vR1.length goto B126;   
  +B58:   #1
        vR6 = vR1[vi4].propertyNames();    [R?Rii R  R] 
  +B67:   #2
        if vR6.hasMoreElements()==0 goto B113;   
  +B77:   #1
        vR2 = (java/lang/String)(vR6.nextElement());    
        if vR2.startsWith@extra("SecureRandom.")==0 goto B67;   
  +B97:   #1
        b0 = vR1[vi4].getProperty(vR2);    [RRRiiR R . RR] 
        vR3 = b0;    
        if b0==null goto B67;   
  +B110:   #1
        goto +B113;   [RRRiiR R . ..]
  +B113:   #2
        if vR3==null goto B120;   
  +B117:   #1
        goto +B126;   [RRRiiR R . ..]
  +B120:   #1
        vi4++;   
        goto +B51;   [RRRiiR R . ..]
  +B126:   #5
        vR0.secureRandomSpi = (java/security/SecureRandomSpi)(forName@special(vR3).newInstance@extra());   
        vR0.provider = vR1[vi4];   
  +B148:   #3
        goto +B163;   forward return[RRRiiR R . ..]
  +H151<caught exception>:   #1 reference
        vR7 = <caught exception>;    
        goto +B163;   forward return[RRRiiRR R . ..]
  +H156<caught exception>:   #1 reference
        vR7 = <caught exception>;    
        goto +B163;   forward return[RRRiiRR R . ..]
  +H161<caught exception>:   #1 reference
        vR7 = <caught exception>;    
  +B163:   #3
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
126 - 148 handler 151 type 81
126 - 148 handler 156 type 83
126 - 148 handler 161 type 85
 }
// Register: rd 26/26 wr 16 swaps 1 any 5 found 0 <init>
 
 method <init>([B)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.setSeed@this(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljava/security/SecureRandomSpi;Ljava/security/Provider;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.counter = 0;   
        vR0.digest = 0;   
        vR0.provider = 0;   
        vR0.randomBytes = 0;   
        vR0.randomBytesUsed = 0;   
        vR0.secureRandomSpi = 0;   
        vR0.state = 0;   
        vR0.secureRandomSpi = vR1;   
        vR0.provider = vR2;   
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 0 swaps 0 any 0 found 0 <init>
 
 method getInstance(Ljava/lang/String;)Ljava/security/SecureRandom; {
  +START:   #1
        vR1 = getProviders@special();    [ R  ]
        vR2 = new java/lang/StringBuffer("SecureRandom.");    [ R  i][ R . iRR]
        vR2.append(vR0);   [RR R . RR.] 
        vR3 = 0;    
        vi4 = 0;    
  +B25:   #1
        if vi4>=vR1.length goto B57;   
  +B32:   #1
        b0 = vR1[vi4].getProperty(vR2.toString());    [RRRi R i RR.] 
        vR3 = b0;    
        if b0==null goto B51;   
  +B48:   #1
        goto +B57;   [RRRi R . ...]
  +B51:   #1
        vi4++;   
        goto +B25;   [RRRi R . ...]
  +B57:   #2
        if vR3!=null goto B69;   
  -B61:   #1
        throw new java/security/NoSuchAlgorithmException();   
  +B69:   #4
        b0 = new java/security/SecureRandom((java/security/SecureRandomSpi)(forName@special(vR3).newInstance@extra()),vR1[vi4]);    [ R . i..][ R .. iRRR]
  +B90b0:   #3 reference
        return b0;   
  -H91<caught exception>:   #1 reference
        vR5 = <caught exception>;    
        throw new java/security/NoSuchAlgorithmException("Class not found");   
  -H103<caught exception>:   #1 reference
        vR5 = <caught exception>;    
        throw new java/security/NoSuchAlgorithmException("Class instantiation failed");   
  -H115<caught exception>:   #1 reference
        vR5 = <caught exception>;    
        throw new java/security/NoSuchAlgorithmException("Illegal Access");   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
69 - 90 handler 91 type 81
69 - 90 handler 103 type 83
69 - 90 handler 115 type 85
 }
// Register: rd 19/19 wr 19 swaps 1 any 5 found 0 getInstance
 
 method getInstance(Ljava/lang/String;Ljava/lang/String;)Ljava/security/SecureRandom; {
  +START:   #1
        vR2 = getProvider@special(vR1);    [ R  R]
        if vR2!=null goto B17;   
  -B9:   #1
        throw new java/security/NoSuchProviderException();   
  +B17:   #1
        vR3 = new java/lang/StringBuffer("SecureRandom.");    [ R  i.][ R . iRR]
        vR3.append(vR0);   [RR R . RR.] 
        vR4 = vR2.getProperty(vR3.toString());    [RR R i RR.] 
        if vR4!=null goto B56;   
  -B48:   #1
        throw new java/security/NoSuchAlgorithmException();   
  +B56:   #4
        b0 = new java/security/SecureRandom((java/security/SecureRandomSpi)(forName@special(vR4).newInstance@extra()),vR2);    [ R . i..][ R .. iRRR]
  +B75b0:   #3 reference
        return b0;   
  -H76<caught exception>:   #1 reference
        vR5 = <caught exception>;    
        throw new java/security/NoSuchAlgorithmException("Class not found");   
  -H88<caught exception>:   #1 reference
        vR5 = <caught exception>;    
        throw new java/security/NoSuchAlgorithmException("Class instantiation failed");   
  -H100<caught exception>:   #1 reference
        vR5 = <caught exception>;    
        throw new java/security/NoSuchAlgorithmException("Illegal Access");   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
56 - 75 handler 76 type 81
56 - 75 handler 88 type 83
56 - 75 handler 100 type 85
 }
// Register: rd 13/13 wr 15 swaps 1 any 2 found 0 getInstance
 
 method getProvider()Ljava/security/Provider; {
  +START:   #1
        return vR0.provider;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getProvider
 
 method setSeed([B)V {
  +START:   #1
        vR0.secureRandomSpi.engineSetSeed(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 setSeed
 
 method setSeed(J)V {
  +START:   #1
        b0 = new byte[8];    
        b0[0] = (byte)(int)(255 & (vl1 >> 56));   
        b0[1] = (byte)(int)(255 & (vl1 >> 48));   
        b0[2] = (byte)(int)(255 & (vl1 >> 40));   
        b0[3] = (byte)(int)(255 & (vl1 >> 32));   
        b0[4] = (byte)(int)(255 & (vl1 >> 24));   
        b0[5] = (byte)(int)(255 & (vl1 >> 16));   
        b0[6] = (byte)(int)(255 & (vl1 >> 8));   
        b0[7] = (byte)(int)(255 & vl1);   
        vR3 = b0;    
        vR0.secureRandomSpi.engineSetSeed(vR3);   [?R R . RR] 
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 10 swaps 0 any 1 found 0 setSeed
 
 method nextBytes([B)V {
  +START:   #1
        vR0.randomBytesUsed = (vR0.randomBytesUsed+vR1.length);   
        vR0.counter = (vR0.counter+1);   
        vR0.secureRandomSpi.engineNextBytes(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 nextBytes
 
 method next(I)I {
  +START:   #1
        if vi1!=0 goto B6;   
  +B4:   #1
        return 0;   
  +B6:   #1
        vR2 = new byte[((vi1/8)+(1*(vi1%8)))];    
        vR0.secureRandomSpi.engineNextBytes(vR2);   [R  . RR] 
        vR0.randomBytesUsed = (vR0.randomBytesUsed+vR2.length);   
        vR0.counter = (vR0.counter+1);   
        vi3 = 0;    
        vi4 = 0;    
  +B54:   #1
        if vi4>=vR2.length goto B80;   
  +B61:   #1
        vi3 = (vi3 | (vR2[vi4] << (8*vi4)));    
        vi4++;   
        goto +B54;   [Rii  . ..]
  +B80:   #1
        return vi3;   
  +END:   #1
 }
// Register: rd 16/16 wr 6 swaps 1 any 4 found 0 next
 
 method getSeed(I)[B {
  +START:   #1
        vR1 = new byte[vi0];    
        b0 = new java/util/Random();    [ R  i.][ R  iR]
        b0.nextBytes(vR1);   [R R  RR] 
        return vR1;   
  +END:   #1
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 getSeed
 
 method generateSeed(I)[B {
  +START:   #1
        return vR0.secureRandomSpi.engineGenerateSeed(vi1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 generateSeed
}
