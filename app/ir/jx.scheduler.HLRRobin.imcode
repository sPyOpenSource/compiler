class jx/scheduler/HLRRobin {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ RRiR  R] 
        vR0.runnables = 0;   
        vR0.MyCPU = 0;   
        vR0.anzSchedInterrupted = 0;   
        vR0.anzSchedPreempted = 0;   
        vR0.yielded = 0;   
        vR0.uninterruptable = 0;   
        vR0.unINTthread = 0;   
        vR0.DomainName = "";   
        vR0.debug = 0;   
        vR1 = getInitialNaming@special();    
        vR2 = (jx/zero/debug/DebugChannel)(vR1.lookup("DebugChannel0"));    
        if vR2!=null goto B80;   
  -B70:   #1
        throw new java/lang/Error("DebugChannel0 Portal not found");   
  +B80:   #1
        b1 = new jx/zero/debug/DebugPrintStream;    
        b2 = b1;    
        b3 = new jx/zero/debug/DebugOutputStream(vR2);    [ RRRR .. i..][ RRRR .. iRR]
        b2.<init>@special(b3);   [RR RRRR .. RR.] 
        vR0.out = b1;   
        out = vR0.out;   
        vR0.cpuManager = (jx/zero/CPUManager)(waitUntilPortalAvailable@special(vR1,"CPUManager"));   
        vR0.SMPcpuManager = (jx/zero/SMPCPUManager)(waitUntilPortalAvailable@special(vR1,"SMPCPUManager"));   
        vR0.HLschedulerSupport = (jx/zero/HLSchedulerSupport)(waitUntilPortalAvailable@special(vR1,"HLSchedulerSupport"));   
        b1 = new java/lang/StringBuilder();    [ RRRR RRR. i..][ RRRR RRR. iR.]
        b1 = b1.append@extra("Inst:");    [RR RRRR RRRi RR.] 
        b2 = instNr;    
        instNr = (b2+1);   
        vR0.DomainName = b1.append@extra(b2).toString@extra();   
        b1 = new jx/scheduler/ThreadListCAS();    [ RRiR RRRi. i..][ RRiR RRRi. iR.]
        vR0.runnables = b1;   
        return;   
  +END:   #1
 }
// Register: rd 37/37 wr 23 swaps 2 any 2 found 0 <init>
 
 method registered()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("HLRRobin registered called on CPU").append@extra(vR0.SMPcpuManager.getMyCPU()).toString@extra());   [ RR iii. RR.] 
        vR0.MyCPU = vR0.SMPcpuManager.getMyCPU();   
        vi1 = vR0.HLschedulerSupport.getTimeBaseInMicros();    [ RR iii. R..] 
        vi2 = vR0.HLschedulerSupport.getDomainTimeslice();    [i RR iii. R..] 
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 9 swaps 3 any 0 found 0 registered
 
 method Scheduler_interrupted()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 Scheduler_interrupted
 
 method Scheduler_preempted()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 Scheduler_preempted
 
 method interrupted(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B15;   
  +B7:   #1
        out.println("HLRRobin::interrupted called");   [  i. RR] 
  +B15:   #1
        vR0.preempted@this(vR1);   [  .. RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 interrupted
 
 method preempted(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B40;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("HLRRobin::preempted called (uninterruptable:").append@extra(vR0.uninterruptable).append@extra(")").toString@extra());   [ RR iiii.. RR..] 
  +B40:   #1
        if vR0.uninterruptable==0 goto B55;   
  +B47:   #1
        vR0.unINTthread = vR1;   
        goto +B64;   forward return[ RR ...... ....]
  +B55:   #1
        vR0.runnables.add(vR1);   [ RR ...... RR..] 
  +B64:   #1
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 9 swaps 4 any 0 found 0 preempted
 
 method yielded(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B52;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(" ").append@extra(vR0.MyCPU.getID()).append@extra(":HLRRobin::yielded called").toString@extra());   [ RR ii.iii.. RR...] 
  +B52:   #1
        vR0.yielded = 1;   
        vR0.runnables.add(vR1);   [ RR ........ RR...] 
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 11 swaps 5 any 0 found 0 yielded
 
 method unblocked(Ljx/zero/CPUState;)V {
  +START:   #1
        vR0.runnables.add(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 unblocked
 
 method created(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B15;   
  +B7:   #1
        out.println("HLRRobin::created called");   [  i. RR] 
  +B15:   #1
        vR0.runnables.add(vR1);   [  .. RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 created
 
 method switchedTo(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::switchedTo called").toString@extra());   [ RR iii. RR.] 
  -B35:   #1
        vR0.HLschedulerSupport.activateThread(vR1);   [ RR .... RR.] 
        throw new java/lang/Error("should never return!");   
  +END:   #1
 }
// Register: rd 6/6 wr 8 swaps 3 any 0 found 0 switchedTo
 
 method blockedInPortalCall(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::blockedInPortalCall").toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 7 swaps 3 any 0 found 0 blockedInPortalCall
 
 method portalCalled(Ljx/zero/CPUState;)Z {
  +START:   #1
        if vR0.debug==0 goto B35;   
  +B7:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra(vR0.DomainName).append@extra(": HLRRobin::portalCalled called").toString@extra());   [ RR iii. RR.] 
  +B35:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 4/4 wr 7 swaps 3 any 0 found 0 portalCalled
 
 method startGCThread(Ljx/zero/CPUState;Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B15;   
  +B7:   #1
        out.println("HLRRobin::startGCThread called");   [  i. RR] 
  +B15:   #1
        if vR1==null goto B28;   
  +B19:   #1
        vR0.runnables.add(vR1);   [  .. RR] 
  +B28:   #1
        vR0.uninterruptable = 1;   
        vR0.HLschedulerSupport.activateThread(vR2);   [  .. RR] 
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 1 any 1 found 0 startGCThread
 
 method unblockedGCThread(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B15;   
  +B7:   #1
        out.println("HLRRobin::unblockedGCThread called");   [ R i. RR] 
  +B15:   #1
        if vR0.uninterruptable==0 goto B32;   
  -B22:   #1
        throw new java/lang/Error("should not happen!");   
  +B32:   #1
        vR0.unINTthread = vR1;   
        vR0.uninterruptable = 1;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 1 any 0 found 0 unblockedGCThread
 
 method destroyedGCThread(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR0.debug==0 goto B15;   
  +B7:   #1
        out.println("HLRRobin::destroyedGCThread called");   [  i. RR] 
  +B15:   #1
        vR0.uninterruptable = 0;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 1 any 0 found 0 destroyedGCThread
 
 method activated()V {
  +START:   #1
        if vR0.debug==0 goto B15;   
  +B7:   #1
        out.println("HLRRobin::activated called");   [ R i. RR] 
  +B15:   #1
        if vR0.uninterruptable==0 goto B35;   
  +B22:   #1
        vR0.HLschedulerSupport.activateThread(vR0.unINTthread);   [ R i. RR] 
  +B35:   #1
        if vR0.yielded!=1 goto B67;   
  -B43:   #1
        vR0.yielded = 0;   
        vR0.HLschedulerSupport.yield();   [ R .. R.] 
        throw new java/lang/Error("should never return! (B)");   
  +B67:   #1
        vR1 = (jx/zero/CPUState)(vR0.runnables.removeFirst());    
        if vR1!=null goto B110;   
  -B82:   #1
        vR0.HLschedulerSupport.clearMyRunnableFlag();   [R R .. R..] 
        vR0.HLschedulerSupport.yield();   [R R .. R..] 
        throw new java/lang/Error("should never return!");   
  -B110:   #1
        vR0.HLschedulerSupport.activateThread(vR1);   [R R .. RR.] 
        throw new java/lang/Error("should never return!");   
  +END:   #1
 }
// Register: rd 16/16 wr 8 swaps 2 any 1 found 0 activated
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return "this is a HLRRobin Object";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 toString
 
 method dump()V {
  +START:   #1
        vR0.runnables.dump();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 dump
 
 method <clinit>()V {
  +START:   #1
        instNr = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 <clinit>
}
