class java/io/StringReader {
 
 method <init>(Ljava/lang/String;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.buf = vR1;   
        vR0.count = vR1.length@extra();   
        vR0.pos = 0;   
        vR0.markedPos = 0;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 0 swaps 0 any 0 found 0 <init>
 
 method close()V {
  +START:   #1
        b0 = vR0.lock;    
        vR1 = b0;    
        b0.enter();   
        vR0.buf = 0;   
        vR1.leave();   
        goto +B22;   forward return[R R  ]
  +H17<caught exception>:   #2 reference
        vR2 = <caught exception>;    
        vR1.leave();   
  -B20:   #1
        throw vR2;   
  +B22:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
7 - 14 handler 17 type 0
17 - 20 handler 17 type 0
 }
// Register: rd 4/4 wr 3 swaps 0 any 1 found 0 close
 
 method mark(I)V {
  +START:   #1
        b0 = vR0.lock;    
        vR2 = b0;    
        b0.enter();   
        if vR0.buf!=null goto B24;   
  -B14:   #1
        throw new java/io/IOException("Stream closed");   
  +B24:   #1
        vR0.markedPos = vR0.pos;   
        vR2.leave();   
        goto +B42;   forward return[R R . ...]
  +H37<caught exception>:   #2 reference
        vR3 = <caught exception>;    
        vR2.leave();   
  -B40:   #1
        throw vR3;   
  +B42:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
7 - 34 handler 37 type 0
37 - 40 handler 37 type 0
 }
// Register: rd 7/7 wr 4 swaps 0 any 1 found 0 mark
 
 method markSupported()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 markSupported
 
 method read()I {
  +START:   #1
        b0 = vR0.lock;    
        vR1 = b0;    
        b0.enter();   
        if vR0.buf!=null goto B24;   
  -B14:   #1
        throw new java/io/IOException("Stream closed");   
  +B24:   #1
        if vR0.pos>=vR0.count goto B59;   
  +B35:   #1
        b0 = vR0.buf;    
        b2 = vR0.pos;    
        b1 = b2;    
        vR0.pos = (b2+1);   
        b0 = (b0.charAt@extra(b1) & 65535);    
        vR1.leave();   
        return b0;   
  +B59:   #1
        vR1.leave();   
        return -1;   
  +H63<caught exception>:   #2 reference
        vR2 = <caught exception>;    
        vR1.leave();   
  -B66:   #1
        throw vR2;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
7 - 58 handler 63 type 0
59 - 62 handler 63 type 0
63 - 66 handler 63 type 0
 }
// Register: rd 15/15 wr 8 swaps 0 any 2 found 0 read
 
 method read([CII)I {
  +START:   #1
        b0 = vR0.lock;    
        vR4 = b0;    
        b0.enter();   
        if vR0.buf!=null goto B25;   
  -B15:   #1
        throw new java/io/IOException("Stream closed");   
  +B25:   #1
        if vi2< 0 goto B41;   
  +B29:   #1
        if vi3< 0 goto B41;   
  +B33:   #1
        if (vi2+vi3)<=vR1.length goto B49;   
  -B41:   #2
        throw new java/lang/ArrayIndexOutOfBoundsException();   
  +B49:   #1
        if vR0.pos<vR0.count goto B65;   
  +B60:   #1
        vR4.leave();   
        return -1;   
  +B65:   #1
        vi5 = min@special(vR0.count,(vR0.pos+vi3));    [R R ii ii.]
        vR0.buf.getChars@extra(vR0.pos,vi5,vR1,vi2);   [Ri R iii iRiiR] 
        vi6 = (vi5-vR0.pos);    
        vR0.pos = vi5;   
        vR4.leave();   
        return vi6;   
  +H116<caught exception>:   #2 reference
        vR7 = <caught exception>;    
        vR4.leave();   
  -B121:   #1
        throw vR7;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
8 - 64 handler 116 type 0
65 - 115 handler 116 type 0
116 - 121 handler 116 type 0
 }
// Register: rd 22/22 wr 9 swaps 1 any 5 found 0 read
 
 method ready()Z {
  +START:   #1
        if vR0.buf!=null goto B17;   
  -B7:   #1
        throw new java/io/IOException("Stream closed");   
  +B17:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 ready
 
 method reset()V {
  +START:   #1
        b0 = vR0.lock;    
        vR1 = b0;    
        b0.enter();   
        if vR0.buf!=null goto B24;   
  -B14:   #1
        throw new java/io/IOException("Stream closed");   
  +B24:   #1
        vR0.pos = vR0.markedPos;   
        vR1.leave();   
        goto +B42;   forward return[R R . ...]
  +H37<caught exception>:   #2 reference
        vR2 = <caught exception>;    
        vR1.leave();   
  -B40:   #1
        throw vR2;   
  +B42:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
7 - 34 handler 37 type 0
37 - 40 handler 37 type 0
 }
// Register: rd 7/7 wr 4 swaps 0 any 1 found 0 reset
 
 method skip(J)J {
  +START:   #1
        b0 = vR0.lock;    
        vR3 = b0;    
        b0.enter();   
        if vR0.buf!=null goto B24;   
  -B14:   #1
        throw new java/io/IOException("Stream closed");   
  +B24:   #1
        b0 = (long)(vR0.count-vR0.pos);    
        if compare(vl1,0)>=0 goto B44;   
  +B40b0:   #1 long
        b1 = 0;    
        goto +B45b0b1;   [?R Rl_ . ...]
  +B44b0:   #1 long
        b1 = vl1;    
  +B45b0b1:   #1 long long
        vl4 = min@special(b0,b1);    
        vR0.pos = (int)((long)vR0.pos+vl4);   
        vR3.leave();   
        return vl4;   
  +H68<caught exception>:   #2 reference
        vR6 = <caught exception>;    
        vR3.leave();   
  -B72:   #1
        throw vR6;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
7 - 67 handler 68 type 0
68 - 72 handler 68 type 0
 }
// Register: rd 7/7 wr 5 swaps 0 any 1 found 0 skip
}
