class jx/bio/buffercache/BufferHead {
 
 method <init>(Ljx/zero/MemoryManager;II)V {
  +START:   #1
        vR0.<init>@special(vR1.allocAligned(vi3,4));   [ Ri i RR.] 
        vR0.b_block = vi2;   
        vR0.b_size = vi3;   
        vR0.b_count = 1;   
        vR0.hashtable_hashkey = vR0.b_block;   
        b1 = sequence;    
        sequence = (b1+1);   
        vR0.id = b1;   
        if vi3==1024 goto B65;   
  -B55:   #1
        throw new java/lang/Error("only size 1024 supported");   
  +B65:   #1
        return;   
  +END:   #1
 }
// Register: rd 15/15 wr 4 swaps 1 any 1 found 0 <init>
 
 method getBlock()I {
  +START:   #1
        return vR0.b_block;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getBlock
 
 method getSize()I {
  +START:   #1
        return vR0.b_size;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getSize
 
 method markDirty()V {
  +START:   #1
        vR0.dirty = 1;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 markDirty
 
 method markClean()V {
  +START:   #1
        vR0.dirty = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 markClean
 
 method dirty()Z {
  +START:   #1
        return vR0.dirty;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 dirty
 
 method isDirty()Z {
  +START:   #1
        return vR0.dirty;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isDirty
 
 method lock()V {
  +START:   #1
        vR0.locked = 1;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 lock
 
 method unlock()V {
  +START:   #1
        vR0.locked = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 unlock
 
 method isLocked()Z {
  +START:   #1
        return vR0.locked;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isLocked
 
 method waitUntilUnlocked()V {
  -START:   #1
        throw new java/lang/Error("NOT IMPLEMENTED");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 waitUntilUnlocked
 
 method markUptodate()V {
  +START:   #1
        vR0.uptodate = 1;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 markUptodate
 
 method isUptodate()Z {
  +START:   #1
        return vR0.uptodate;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isUptodate
 
 method waitOn()V {
  +START:   #1
        if vR0.locked==0 goto B63;   
  +B7:   #1
        vR0.b_count = (vR0.b_count+1);   
  +B17:   #1
        if vR0.locked==0 goto B35;   
  +B24:   #1
        out.println("TODO: implement WAIT QUEUE!");   [  i. RR] 
        goto +B17;   [  i. ..]
  +B35:   #1
        (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager")).block();   [  i.. R.] 
        vR0.b_count = (vR0.b_count-1);   
  +B63:   #1
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 6 swaps 2 any 0 found 0 waitOn
 
 method endIo(ZZ)V {
  +START:   #1
        if vi1==0 goto B14;   
  -B4:   #1
        throw new java/lang/Error("IO Error");   
  +B14:   #1
        vR0.uptodate = 1;   
        vR0.locked = 0;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 1 found 0 endIo
 
 method clear()V {
  +START:   #1
        vR0.data.clear();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 clear
 
 method clear(II)V {
  +START:   #1
        if vi1< 0 goto B24;   
  +B4:   #1
        if vi1>=vR0.b_size goto B24;   
  +B12:   #1
        if vi2< 0 goto B24;   
  +B16:   #1
        if vi2<=vR0.b_size goto B25;   
  +B24:   #3
        return;   
  +B25:   #1
        vi3 = vi1;    
  +B27:   #1
        if vi3>=vi2 goto B49;   
  +B32:   #1
        vR0.data.set8(vi3,0);   [i   iiR] 
        vi3++;   
        goto +B27;   [i   ...]
  +B49:   #1
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 2 swaps 0 any 7 found 0 clear
 
 method init(I)V {
  +START:   #1
        vR0.b_count = 1;   
        vR0.b_flushtime = 0;   
        vR0.b_block = vi1;   
        vR0.hashtable_hashkey = vi1;   
        vR0.dirty = 0;   
        vR0.uptodate = 0;   
        vR0.locked = 0;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 0 swaps 0 any 0 found 0 init
 
 method ref()V {
  +START:   #1
        vR0.b_count = (vR0.b_count+1);   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 ref
 
 method unref()V {
  +START:   #1
        vR0.b_count = (vR0.b_count-1);   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 unref
 
 method isUnused()Z {
  +START:   #1
        if vR0.b_count!=0 goto B11;   
  +B7:   #1
        b0 = 1;    
        goto +B12b0;   forward return[ i  ]
  +B11:   #1
        b0 = 0;    
  +B12b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isUnused
 
 method isUsed()Z {
  +START:   #1
        if vR0.b_count<=0 goto B11;   
  +B7:   #1
        b0 = 1;    
        goto +B12b0;   forward return[ i  ]
  +B11:   #1
        b0 = 0;    
  +B12b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isUsed
 
 method isUsedOnlyByMe()Z {
  +START:   #1
        if vR0.b_count!=1 goto B12;   
  +B8:   #1
        b0 = 1;    
        goto +B13b0;   forward return[ i  ]
  +B12:   #1
        b0 = 0;    
  +B13b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 isUsedOnlyByMe
 
 method isInFreeList()Z {
  +START:   #1
        return vR0.inlist;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isInFreeList
 
 method <clinit>()V {
  +START:   #1
        sequence = 1;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 <clinit>
}
