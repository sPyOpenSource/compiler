class jx/synch/mutex/BlockingLockImpl {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?R  R] 
        b1 = new jx/synch/mutex/BlockingLockImpl$Queue(vR0);    [ ?R  i][ ?R . iRR]
        vR0.waiting = b1;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 <init>
 
 method lock()V {
  +START:   #1
        vR1 = cpuManager.getCPUState();    [  . R] 
  +B9:   #1
        scheduler.disableThreadSwitching();   [R  . R] 
        if vR0.owner!=null goto B38;   
  +B24:   #1
        vR0.owner = vR1;   
        scheduler.enableThreadSwitching();   [R  . R] 
        return;   
  +B38:   #1
        vR0.waiting.enqueue(vR1);   [R  . RR] 
        scheduler.blockAndEnableThreadSwitching();   [R  . R.] 
        goto +B9;   [R  . ..]
  +END:   #1
 }
// Register: rd 4/4 wr 5 swaps 0 any 0 found 0 lock
 
 method unlock()V {
  +START:   #1
        vR1 = cpuManager.getCPUState();    [  . R] 
        scheduler.disableThreadSwitching();   [R  . R] 
        vR2 = vR0.waiting.dequeue();    [R  . R] 
        if vR2==null goto B47;   
  +B29:   #1
        vR0.owner = vR2;   
        cpuManager.unblock(vR2);   [RR  . RR] 
        goto +B52;   [RR  . ..]
  +B47:   #1
        vR0.owner = 0;   
  +B52:   #1
        scheduler.enableThreadSwitching();   [RR  . R.] 
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 6 swaps 0 any 1 found 0 unlock
 
 method <clinit>()V {
  +START:   #1
        cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        scheduler = (jx/zero/Scheduler)(getInitialNaming@special().lookup("Scheduler"));   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 8 swaps 2 any 0 found 0 <clinit>
}
