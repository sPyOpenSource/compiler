class jx/net/protocol/bootp/BOOTP {
 
 method <init>(Ljx/net/NetInit;[B)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.xid = 1;   
        vR0.myHWaddr = vR2;   
        vR0.memMgr = (jx/zero/MemoryManager)(getInitialNaming@special().lookup("MemoryManager"));   
        vR0.cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        vR0.event_snd = vR0.cpuManager.createNewEvent("BOOTPsnd");   
        vR0.event_rec = vR0.cpuManager.createNewEvent("BOOTPrec");   
        vR0.net = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 14/14 wr 8 swaps 3 any 0 found 0 <init>
 
 method sendRequest()Ljx/net/IPAddress; {
  +START:   #1
        vR1 = 0;    
        vR2 = 0;    
        b1 = vR0.net;    
        b3 = new jx/net/IPv4Address(255,255,255,255);    [ RRiR  i][ RRiR . iiiiiR]
        vR0.sender = b1.getUDPSender(68,b3,67);   
        b1 = vR0.net;    
        b3 = new jx/zero/Memory()[4];    
        b3[0] = vR0.net.getUDPBuffer(0);   
        b3[1] = vR0.net.getUDPBuffer(0);   
        b3[2] = vR0.net.getUDPBuffer(0);   
        b3[3] = vR0.net.getUDPBuffer(0);   
        vR0.receiver = b1.getUDPReceiver(68,b3);   
        vR0.buf = vR0.net.getUDPBuffer(300);   
        vR3 = new jx/net/protocol/bootp/BOOTPFormat(vR0.buf);    [ RRiR . i.....][ RRiR . iRR...]
        vR3.insertOp(1);   [RRR RRiR . iR....] 
        vR3.insertHtype(1);   [RRR RRiR . iR....] 
        vR3.insertHlen(6);   [RRR RRiR . iR....] 
        b2 = vR0.xid;    
        b1 = b2;    
        vR0.xid = (b2+1);   
        vR3.insertXid(b1);   [RRR RiiR . iR....] 
        vR3.insertHwaddr(vR0.myHWaddr);   [RRR RiiR i RR....] 
        out.println("SENDING BOOTP REQUEST...");   [RRR RiiR ii. RR....] 
        vR0.cpuManager.recordEvent(vR0.event_snd);    
        vR0.buf = vR0.sender.send(vR0.buf);   
        vR4 = vR0.buf;    
        if vR4.isValid()!=0 goto B242;   
  -B232:   #1
        throw new java/lang/Error("not valid?");   
  +B242:   #1
        vR2 = vR0.receiver.receive(vR4,200);    [RRRR RiiR ... iRR...] 
        if vR2!=null goto B316;   
  +B261:   #1
        if vR4.isValid()!=0 goto B281;   
  -B271:   #1
        throw new java/lang/Error("not valid?");   
  +B281:   #1
        vR4 = vR4.revoke();    [RRRR RiiR ... R.....] 
        vR0.buf = vR4;   
        if vR4.isValid()!=0 goto B316;   
  -B306:   #1
        throw new java/lang/Error("not valid?");   
  +B316:   #2
        vR0.cpuManager.recordEvent(vR0.event_rec);    
        if vR2!=null goto B341;   
  +B333:   #1
        out.println("Timout waiting for bootp reply");   [RRRR RiiR i.. RR....] 
  +B341:   #1
        vR5 = new jx/net/protocol/bootp/BOOTPFormat(vR2.getMemory());    [ RiiR ... i.....][ RiiR ... iRR...]
        return 0;   
  +END:   #1
 }
// Register: rd 50/50 wr 25 swaps 4 any 3 found 0 sendRequest
 
 method sendRequest1()Ljx/net/IPAddress; {
  +START:   #1
        vR1 = 0;    
        vR2 = 0;    
        b1 = vR0.net;    
        b3 = new jx/net/IPv4Address(255,255,255,255);    [ RRiR  i][ RRiR . iiiiiR]
        vR0.sender = b1.getUDPSender(68,b3,67);   
        b1 = vR0.net;    
        b3 = new jx/zero/Memory()[4];    
        b3[0] = vR0.net.getUDPBuffer();   
        b3[1] = vR0.net.getUDPBuffer();   
        b3[2] = vR0.net.getUDPBuffer();   
        b3[3] = vR0.net.getUDPBuffer();   
        vR0.receiver = b1.getUDPReceiver(68,b3);   
        vR0.buf = vR0.net.getUDPBuffer();   
        vR3 = new jx/net/protocol/bootp/BOOTPFormat(vR0.buf,42);    [ RRiR . i.....][ RRiR . iiRR..]
        vR3.insertOp(1);   [RRR RRiR . iR....] 
        vR3.insertHtype(1);   [RRR RRiR . iR....] 
        vR3.insertHlen(6);   [RRR RRiR . iR....] 
        b2 = vR0.xid;    
        b1 = b2;    
        vR0.xid = (b2+1);   
        vR3.insertXid(b1);   [RRR RiiR . iR....] 
        vR3.insertHwaddr(vR0.myHWaddr);   [RRR RiiR i RR....] 
        out.println("SENDING1 BOOTP REQUEST...");   [RRR RiiR ii. RR....] 
        vR0.cpuManager.recordEvent(vR0.event_snd);    
        vR0.buf = vR0.sender.send1(vR0.buf,42,requiresSpace@special());   
        vR2 = vR0.receiver.receive(vR0.buf,200);    [RRR RiiR iiiii iRR...] 
        vR0.cpuManager.recordEvent(vR0.event_rec);    
        if vR2!=null goto B258;   
  +B250:   #1
        out.println("Timout waiting for bootp reply");   [RRR RiiR i.... RR....] 
  +B258:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 39/39 wr 21 swaps 5 any 2 found 0 sendRequest1
}
