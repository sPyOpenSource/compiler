class jx/rpc/RPCBuffer {
 
 method <init>(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.init@this(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/zero/Memory;I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.init@this(vR1,vi2);   [   iRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/net/UDPData;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.init@this(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/net/UDPData;II)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.init@this(vR1,vi2,vi3);   [   iiRR] 
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/zero/Memory;Ljx/rpc/RPCContinuation;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.buf = vR1;   
        vR0.cont = vR2;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method copyInto(Ljx/zero/Memory;)V {
  +START:   #1
        vi2 = 0;    
  +B2:   #1
        if vi2>=vR0.offset goto B33;   
  +B10:   #1
        vR1.set8(vi2,vR0.buf.get8(vi2));   [i  i biR] 
        vi2++;   
        goto +B2;   [i  i ...]
  +B33:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 3 swaps 1 any 2 found 0 copyInto
 
 method copyInto(Ljx/zero/Memory;I)V {
  +START:   #1
        vi3 = 0;    
  +B2:   #1
        if vi3>=vR0.offset goto B35;   
  +B10:   #1
        vR1.set8((vi3+vi2),vR0.buf.get8(vi3));   [i  ib biR] 
        vi3++;   
        goto +B2;   [i  ib ...]
  +B35:   #1
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 5 swaps 1 any 2 found 0 copyInto
 
 method append(Ljx/rpc/RPCBuffer;)V {
  +START:   #1
        vR0.guaranteeSpace@special(vR1.offset);   [  i iR] 
        vR0.buf.copyFromMemory(vR1.buf,0,vR0.offset,vR1.offset);   [  iiii iiiRR] 
        vR0.offset = (vR0.offset+vR1.offset);   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 4 swaps 2 any 0 found 0 append
 
 method append([B)V {
  +START:   #1
        vR0.guaranteeSpace@special(vR1.length);   [  i iR] 
        vR0.buf.copyFromByteArray(vR1,0,vR0.offset,vR1.length);   [  iii iiiRR] 
        vR0.offset = (vR0.offset+vR1.length);   
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 3 swaps 2 any 0 found 0 append
 
 method guaranteeSpace(I)V {
  +START:   #1
        if (vR0.offset+vi1)<=vR0.buf.size() goto B28;   
  -B18:   #1
        throw new java/lang/Error("RPC packet must be fragmented. This (or IP fragmentation) is not yet implemented.");   
  +B28:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 guaranteeSpace
 
 method xdump()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("offset=").append@extra(vR0.offset).append@extra(", buf.size=").append@extra(vR0.size).toString@extra());   [ RR iiiii... RR...] 
        xdump@special(vR0.buf,vR0.offset,vR0.size);   [ RR iiiiiRii iiR..]
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 14 swaps 5 any 0 found 0 xdump
 
 method dumpUnprocessed()V {
  +START:   #1
        xdump@special(vR0.buf,vR0.offset,(vR0.buf.size()-vR0.offset));   [  iiR iiR]
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 5 swaps 0 any 0 found 0 dumpUnprocessed
 
 method xdump(I)V {
  +START:   #1
        xdump@special(vR0.buf,vR0.offset,vi1);   [  Ri iiR]
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 2 swaps 0 any 0 found 0 xdump
 
 method setByte(IB)V {
  +START:   #1
        vR0.buf.set8((vR0.offset+vi1),vi2);   [  i iiR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 setByte
 
 method getByte(I)B {
  +START:   #1
        return vR0.buf.get8((vR0.offset+vi1));   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 getByte
 
 method advance(I)V {
  +START:   #1
        vR0.offset = (vR0.offset+vi1);   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 advance
 
 method size()I {
  +START:   #1
        return vR0.offset;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 size
 
 method getSourceAddress()Ljx/net/IPAddress; {
  +START:   #1
        return vR0.sourceAddress;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getSourceAddress
 
 method getSourcePort()I {
  +START:   #1
        return vR0.sourcePort;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getSourcePort
 
 method getMemory()Ljx/zero/Memory; {
  +START:   #1
        return vR0.buf;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMemory
 
 method init(Ljx/net/UDPData;)V {
  +START:   #1
        vR0.buf = vR1.mem;   
        vR0.cont = 0;   
        vR0.offset = 0;   
        vR0.sourceAddress = vR1.sourceAddress;   
        vR0.sourcePort = vR1.sourcePort;   
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 0 swaps 0 any 0 found 0 init
 
 method init(Ljx/net/UDPData;II)V {
  +START:   #1
        vR0.buf = vR1.mem;   
        vR0.cont = 0;   
        vR0.offset = vR1.offset;   
        vR0.size = vR1.size;   
        vR0.sourceAddress = vR1.sourceAddress;   
        vR0.sourcePort = vR1.sourcePort;   
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 0 swaps 0 any 0 found 0 init
 
 method init(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.buf = vR1;   
        vR0.cont = 0;   
        vR0.offset = 0;   
        vR0.sourceAddress = 0;   
        vR0.sourcePort = 0;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 0 swaps 0 any 0 found 0 init
 
 method init(Ljx/zero/Memory;I)V {
  +START:   #1
        vR0.buf = vR1;   
        vR0.cont = 0;   
        vR0.offset = vi2;   
        vR0.sourceAddress = 0;   
        vR0.sourcePort = 0;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 0 swaps 0 any 0 found 0 init
 
 method init()V {
  +START:   #1
        vR0.cont = 0;   
        vR0.offset = 42;   
        vR0.sourceAddress = 0;   
        vR0.sourcePort = 0;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 init
 
 method getBytes([BII)V {
  +START:   #1
        vi4 = 0;    
  +B3:   #1
        if vi4>=vi3 goto B37;   
  +B9:   #1
        vR1[vi4] = vR0.buf.get8(((vR0.offset+vi2)+vi4));   
        vi4++;   
        goto +B3;   [i  i ..]
  +B37:   #1
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 1 any 2 found 0 getBytes
}
