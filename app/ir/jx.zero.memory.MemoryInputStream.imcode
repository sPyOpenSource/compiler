class jx/zero/memory/MemoryInputStream {
 
 method available()I {
  +START:   #1
        return (vR0.count-vR0.pos);   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 available
 
 method reset()V {
  +START:   #1
        vR0.pos = 0;   
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 reset
 
 method read()I {
  +START:   #1
        if vR0.pos<vR0.count goto B13;   
  +B11:   #1
        return -1;   
  +B13:   #1
        b0 = vR0.buf;    
        b2 = vR0.pos;    
        b1 = b2;    
        vR0.pos = (b2+1);   
        return (b0.get8(b1) & 255);   
  +END:   #1
 }
// Register: rd 9/9 wr 3 swaps 0 any 1 found 0 read
 
 method read([BII)I {
  +START:   #1
        if vR0.pos<vR0.count goto B13;   
  +B11:   #1
        return -1;   
  +B13:   #1
        vi4 = (vR0.count-vR0.pos);    
        if vi4>=vi3 goto B35;   
  +B30:   #1
        b0 = vi4;    
        goto +B36b0;   [i i  ]
  +B35:   #1
        b0 = vi3;    
  +B36b0:   #1 int
        vi5 = b0;    
        vR0.buf.copyToByteArray(vR1,vi2,vR0.pos,vi5);   [ii i i iiiRR] 
        vR0.pos = (vR0.pos+vi5);   
        return vi5;   
  +END:   #1
 }
// Register: rd 15/15 wr 5 swaps 1 any 4 found 0 read
 
 method skip(J)J {
  +START:   #1
        vi3 = (int)((long)vR0.pos+vl1);    
        if vi3<=vR0.count goto B40;   
  +B17:   #1
        vi4 = (vR0.count-vR0.pos);    
        vR0.pos = vR0.count;   
        return (long)vi4;   
  +B40:   #1
        vR0.pos = vi3;   
        return vl1;   
  +END:   #1
 }
// Register: rd 8/8 wr 3 swaps 0 any 1 found 0 skip
 
 method <init>(Ljx/zero/ReadOnlyMemory;)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.buf = vR1;   
        vR0.count = vR1.size();   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
}
