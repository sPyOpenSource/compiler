class jx/fs/auditfs/AuditRecord {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/zero/Clock;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V {
  +START:   #1
        vR0.<init>@special();   [ RR  R] 
        vR0.systemName = vR2;   
        vR0.domainName = vR3;   
        vR0.message = vR4;   
        b1 = new jx/zero/CycleTime();    [ RR  i][ RR  iR]
        vR0.time = b1;   
        if vR1!=null goto B43;   
  -B35:   #1
        throw new java/lang/Error();   
  +B43:   #1
        vR1.getCycles(vR0.time);   [ RR i RR] 
        return;   
  +END:   #1
 }
// Register: rd 12/12 wr 2 swaps 1 any 1 found 0 <init>
 
 method getSize()I {
  +START:   #1
        return ((((((vR0.systemName.length@extra()+8)+4)+vR0.domainName.length@extra())+4)+vR0.message.length@extra())+4);   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 getSize
 
 method addToBuffer(Ljx/zero/Memory;I)V {
  +START:   #1
        vR1.setLittleEndian32(vi2,vR0.time.low);   [  i iiR] 
        vR1.setLittleEndian32((vi2+4),vR0.time.high);   [  iii iiR] 
        vi2+=8;   
        vi2 = vR0.addString@special(vR1,vi2,vR0.systemName);    [  iiii RiRR] 
        vi2 = vR0.addString@special(vR1,vi2,vR0.domainName);    [  iiiii RiRR] 
        vi2 = vR0.addString@special(vR1,vi2,vR0.message);    [  iiiiii RiRR] 
        return;   
  +END:   #1
 }
// Register: rd 12/12 wr 10 swaps 5 any 1 found 0 addToBuffer
 
 method parseFromBuffer(Ljx/zero/Memory;I)I {
  +START:   #1
        b1 = new jx/zero/CycleTime();    [ ?R  i][ ?R  iR]
        vR0.time = b1;   
        vR0.time.low = vR1.getLittleEndian32(vi2);   
        vR0.time.high = vR1.getLittleEndian32((vi2+4));   
        vi2+=8;   
        vR0.systemName = vR0.parseString@special(vR1,vi2);   
        vi2 = (vi2+(vR0.systemName.length@extra()+4));    
        vR0.domainName = vR0.parseString@special(vR1,vi2);   
        vi2 = (vi2+(vR0.domainName.length@extra()+4));    
        vR0.message = vR0.parseString@special(vR1,vi2);   
        vi2 = (vi2+(vR0.message.length@extra()+4));    
        return vi2;   
  +END:   #1
 }
// Register: rd 24/24 wr 6 swaps 1 any 4 found 3 parseFromBuffer
 
 method addString(Ljx/zero/Memory;ILjava/lang/String;)I {
  +START:   #1
        vR1.setLittleEndian32(vi2,vR3.length@extra());   [  i iiR] 
        vi4 = 0;    
  +B14:   #1
        if vi4>=vR3.length@extra() goto B48;   
  +B23:   #1
        vR1.set8(((vi2+vi4)+4),(byte)vR3.charAt@extra(vi4));   [i  ii iiR] 
        vi4++;   
        goto +B14;   [i  ii ...]
  +B48:   #1
        return ((vi2+vR3.length@extra())+4);   
  +END:   #1
 }
// Register: rd 14/14 wr 6 swaps 2 any 2 found 2 addString
 
 method parseString(Ljx/zero/Memory;I)Ljava/lang/String; {
  +START:   #1
        vi3 = vR1.getLittleEndian32(vi2);    [ R  iR] 
        vR4 = new byte[vi3];    
        vi5 = 0;    
  +B16:   #1
        if vi5>=vi3 goto B45;   
  +B22:   #1
        vR4[vi5] = vR1.get8(((vi2+vi5)+4));   
        vi5++;   
        goto +B16;   [iRi R i ..]
  +B45:   #1
        return new java/lang/String(vR4);   
  +END:   #1
 }
// Register: rd 12/12 wr 6 swaps 1 any 2 found 0 parseString
}
