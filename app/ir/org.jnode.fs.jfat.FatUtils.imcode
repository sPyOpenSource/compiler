class org/jnode/fs/jfat/FatUtils {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method decodeDateTime(III)J {
  +START:   #1
        if vi0< 0 goto B10;   
  +B4:   #1
        if vi0<=65535 goto B37;   
  -B10:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR  i][ RRR  iR]
        b1.<init>@special(b2.append@extra("dosDate is invalid: ").append@extra(vi0).toString@extra());   [ RRR ii. RR.] 
        throw b0;   
  +B37:   #1
        if vi1< 0 goto B47;   
  +B41:   #1
        if vi1<=65535 goto B74;   
  -B47:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR ... i..][ RRR ... iR.]
        b1.<init>@special(b2.append@extra("dosTime is invalid: ").append@extra(vi1).toString@extra());   [ RRR ii. RR.] 
        throw b0;   
  +B74:   #1
        if vi2< 0 goto B85;   
  +B78:   #1
        if vi2<=199 goto B112;   
  -B85:   #1
        b0 = new java/lang/IllegalArgumentException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR ... i..][ RRR ... iR.]
        b1.<init>@special(b2.append@extra("dosTime is invalid: ").append@extra(vi2).toString@extra());   [ RRR ii. RR.] 
        throw b0;   
  +B112:   #1
        vi3 = ((vi2%100)*10);    
        vi4 = (((vi1 & 31)*2)+(vi2/100));    
        vi5 = ((vi1 >> 5) & 63);    
        vi6 = (vi1 >> 11);    
        vi7 = (vi0 & 31);    
        vi8 = ((vi0 >> 5) & 15);    
        vi9 = ((vi0 >> 9)+1980);    
        return 0;   
  +END:   #1
 }
// Register: rd 26/26 wr 28 swaps 6 any 15 found 0 decodeDateTime
 
 method decodeDateTime(II)J {
  +START:   #1
        return decodeDateTime@special(vi0,vi1,0);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 decodeDateTime
 
 method getMinDateTime()J {
  +START:   #1
        return 31553280;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getMinDateTime
 
 method getMaxDateTime()J {
  +START:   #1
        return 435481590;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getMaxDateTime
 
 method checkDateTime(J)J {
  +START:   #1
        vl2 = getMinDateTime@special();    
        if compare(vl0,vl2)< 0 goto B18;   
  +B10:   #1
        if compare(vl0,getMaxDateTime@special())<=0 goto B20;   
  +B18:   #1
        return vl2;   
  +B20:   #1
        return vl0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 checkDateTime
 
 method encodeTime(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(checkDateTime@special(vl0));   [?R   ??R] 
        return (((2048*vR2.get@extra(11))+(32*vR2.get@extra(12)))+(vR2.get@extra(13)/2));   
  +END:   #1
 }
// Register: rd 7/7 wr 4 swaps 0 any 0 found 0 encodeTime
 
 method encodeDate(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(checkDateTime@special(vl0));   [?R   ??R] 
        return (((512*(vR2.get@extra(1)-1980))+(32*(vR2.get@extra(2)+1)))+vR2.get@extra(5));   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 0 encodeDate
 
 method encodeTenth(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(checkDateTime@special(vl0));   [?R   ??R] 
        return ((100*(vR2.get@extra(13)%2))+(vR2.get@extra(14)/10));   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 0 found 0 encodeTenth
 
 method fTime(J)Ljava/lang/String; {
  +START:   #1
        return time.format(valueOf@special(vl0));   
  +END:   #1
 }
// Register: rd 0/0 wr 2 swaps 1 any 0 found 0 fTime
 
 method fDate(J)Ljava/lang/String; {
  +START:   #1
        return date.format(valueOf@special(vl0));   
  +END:   #1
 }
// Register: rd 0/0 wr 2 swaps 1 any 0 found 0 fDate
 
 method compareIgnoreCase(Ljava/lang/String;Ljava/lang/String;)Z {
  +START:   #1
        return vR0.equalsIgnoreCase@extra(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 compareIgnoreCase
 
 method toIgnoreCase(Ljava/lang/String;)Ljava/lang/String; {
  +START:   #1
        return vR0.toUpperCase@extra().toLowerCase@extra();   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 toIgnoreCase
 
 method toUpperCase(Ljava/lang/String;)Ljava/lang/String; {
  +START:   #1
        return toIgnoreCase@special(vR0).toUpperCase@extra();   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 toUpperCase
 
 method isLowerCase(Ljava/lang/String;)Z {
  +START:   #1
        if vR0.length@extra()!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR1 = vR0.toCharArray@extra();    [   R] 
        vi2 = 0;    
  +B16:   #1
        if vi2>=vR1.length goto B42;   
  +B22:   #1
        if toLowerCase@special(vR1[vi2])==vR1[vi2] goto B36;   
  +B34:   #1
        return 0;   
  +B36:   #1
        vi2++;   
        goto +B16;   [Ri  . .]
  +B42:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 9/9 wr 4 swaps 0 any 2 found 0 isLowerCase
 
 method isUpperCase(Ljava/lang/String;)Z {
  +START:   #1
        if vR0.length@extra()!=0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR1 = vR0.toCharArray@extra();    [   R] 
        vi2 = 0;    
  +B16:   #1
        if vi2>=vR1.length goto B42;   
  +B22:   #1
        if toUpperCase@special(vR1[vi2])==vR1[vi2] goto B36;   
  +B34:   #1
        return 0;   
  +B36:   #1
        vi2++;   
        goto +B16;   [Ri  . .]
  +B42:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 9/9 wr 4 swaps 0 any 2 found 0 isUpperCase
 
 method longName(Ljava/lang/String;)Ljava/lang/String; {
  +START:   #1
        vR1 = vR0.trim@extra();    [   R] 
        return vR1;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 longName
 
 method getMonth(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(vl0);   [?R   ??R] 
        return vR2.get@extra(2);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 getMonth
 
 method getHours(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(vl0);   [?R   ??R] 
        return vR2.get@extra(11);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 getHours
 
 method getDay(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(vl0);   [?R   ??R] 
        return (vR2.get@extra(7)-1);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 getDay
 
 method getYear(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        return (vR2.get@extra(1)-1980);   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getYear
 
 method getMinutes(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(vl0);   [?R   ??R] 
        return vR2.get@extra(12);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 getMinutes
 
 method getSeconds(J)I {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        vR2.setTimeInMillis(vl0);   [?R   ??R] 
        return vR2.get@extra(13);   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 getSeconds
 
 method getMilliSeconds(J)J {
  +START:   #1
        vR2 = getInstance@special();    [   ]
        return vR2.getTimeInMillis();   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 getMilliSeconds
 
 method <clinit>()V {
  +START:   #1
        b0 = new java/text/SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");    [ R  i][ R . iRR]
        time = b0;   
        b0 = new java/text/SimpleDateFormat("yyyy-MM-dd");    [ R . i..][ R . iRR]
        date = b0;   
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 4 swaps 0 any 0 found 2 <clinit>
}
