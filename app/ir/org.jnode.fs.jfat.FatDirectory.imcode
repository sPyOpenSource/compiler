class org/jnode/fs/jfat/FatDirectory {
 
 method <init>(Lorg/jnode/fs/jfat/FatFileSystem;)V {
  +START:   #1
        vR0.<init>@special(vR1);   [ ?R  RR] 
        b1 = new org/jnode/fs/jfat/FatTable();    [ ?R  i.][ ?R  iR]
        vR0.children = b1;   
        b1 = new java/util/HashMap();    [ ?R  i.][ ?R  iR]
        vR0.idMap = b1;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 <init>
 
 method <init>(Lorg/jnode/fs/jfat/FatFileSystem;Lorg/jnode/fs/jfat/FatDirectory;Lorg/jnode/fs/jfat/FatRecord;)V {
  +START:   #1
        vR0.<init>@special(vR1,vR2,vR3);   [ ?R  RRRR] 
        b1 = new org/jnode/fs/jfat/FatTable();    [ ?R  i...][ ?R  iR..]
        vR0.children = b1;   
        b1 = new java/util/HashMap();    [ ?R  i...][ ?R  iR..]
        vR0.idMap = b1;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 0 any 0 found 0 <init>
 
 method initialize()V {
  +START:   #1
        vR1 = vR0.getFatFileSystem@this();    [ i  R] 
        vR2 = vR0.getParent@this();    [R i  R] 
        vR3 = vR0.getEntry@this();    [RR i  R] 
        vR4 = vR0.getChain@this();    [RRR i  R] 
        vR4.allocateAndClear(1);   [RRRR i  iR] 
        if vR2.isRoot()==0 goto B38;   
  +B34:   #1
        b0 = 0;    
        goto +B45b0;   [RRRR i  ..]
  +B38:   #1
        b0 = vR2.getEntry().getStartCluster();    [RRRRiiRR i . R.] [RRRRiiRR i R R.] 
  +B45b0:   #1 int
        vi5 = b0;    
        vi6 = vR4.getStartCluster();    [RRRRi i . R.] 
        vR7 = new org/jnode/fs/jfat/FatDotDirEntry(vR1,0,vR3,vi6);    [ i . i.][ i . iiRiRR]
        vR8 = new org/jnode/fs/jfat/FatDotDirEntry(vR1,1,vR3,vi5);    [ i . i.....][ i . iiRiRR]
        vR0.setFatDirEntry@this(vR7);   [RRRRiiRR i . RR....] 
        vR0.setFatDirEntry@this(vR8);   [RRRRiiRR i . RR....] 
        return;   
  +END:   #1
 }
// Register: rd 19/19 wr 13 swaps 0 any 1 found 0 initialize
 
 method getFatDirEntry(IZ)Lorg/jnode/fs/jfat/FatDirEntry; {
  +START:   #1
        vR3 = new org/jnode/fs/jfat/FatMarshal(32);    [ R  i][ R . iiR]
        vR0.getChain@this().read((vi1*vR3.length()),vR3.getByteBuffer(),0);   [R R iR. iRiR] [R R iRR iRiR] 
        return vR0.createDirEntry@this(vR3,vi1,vi2);   
  +END:   #1
 }
// Register: rd 8/8 wr 6 swaps 1 any 0 found 1 getFatDirEntry
 
 method createDirEntry(Lorg/jnode/fs/jfat/FatMarshal;IZ)Lorg/jnode/fs/jfat/FatDirEntry; {
  +START:   #1
        vi4 = vR1.getUInt8(0);    [ iRR  iR] 
        vR5 = new org/jnode/fs/jfat/FatAttr(vR1.getUInt8(11));    [ iRR  i.][ iRR . iiR]
        if vi4!=229 goto B34;   
  +B30:   #1
        b0 = 1;    
        goto +B35b0;   [iR iRR . ...]
  +B34:   #1
        b0 = 0;    
  +B35b0:   #1 int
        vi6 = b0;    
        lswitch (vi4) { 
           0:B72
           229:B88
           255:B108
           ::B135
        };   
  +B72:   #1
        return new org/jnode/fs/jfat/FatDirEntry(vR0.getFatFileSystem@this(),vR1,vi2,vi4);   
  +B88:   #1
        if vi3!=0 goto B135;   
  +B92:   #1
        return new org/jnode/fs/jfat/FatDirEntry(vR0.getFatFileSystem@this(),vR1,vi2,vi4);   
  -B108:   #1
        b0 = new java/io/IOException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR . i.....][ RRR . iR....]
        b1.<init>@special(b2.append@extra("Invalid entry for index: ").append@extra(vi2).toString@extra());   [iRiR RRR ii. RR....] 
        throw b0;   
  +B135:   #2
        if vR5.isLong()!=0 goto B153;   
  +B143:   #1
        if vR1.getUInt32(28)!=-1 goto B164;   
  +B153:   #1
        vR7 = vR0.createLongDirEntry@this(vR1,vi2);    [iRi RRR ... iRR...] 
        goto +B172;   [iRiR RRR ... ......]
  +B164:   #1
        vR7 = vR0.createShortDirEntry@this(vR1,vi2);    [iRiR RRR ... iRR...] 
  +B172:   #1
        if vi6==0 goto B183;   
  +B177:   #1
        vR7.setFreeDirEntry(1);   [iRiR RRR ... iR....] 
  +B183:   #1
        return vR7;   
  +END:   #1
 }
// Register: rd 28/28 wr 16 swaps 2 any 6 found 0 createDirEntry
 
 method createShortDirEntry(Lorg/jnode/fs/jfat/FatMarshal;I)Lorg/jnode/fs/jfat/FatDirEntry; {
  +START:   #1
        return new org/jnode/fs/jfat/FatShortDirEntry(vR0.getFatFileSystem@this(),vR1,vi2);   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 createShortDirEntry
 
 method createLongDirEntry(Lorg/jnode/fs/jfat/FatMarshal;I)Lorg/jnode/fs/jfat/FatDirEntry; {
  +START:   #1
        return new org/jnode/fs/jfat/FatLongDirEntry(vR0.getFatFileSystem@this(),vR1,vi2);   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 createLongDirEntry
 
 method setFatDirEntry(Lorg/jnode/fs/jfat/FatDirEntry;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setFatDirEntry
 
 method getFatFreeEntries(I)[Lorg/jnode/fs/jfat/FatDirEntry; {
  +START:   #1
        vi2 = 0;    
        vi3 = 0;    
        vR4 = 0;    
        vR5 = new org/jnode/fs/jfat/FatDirEntry()[vi1];    
  +B13:   #3
        if vi2>=vi1 goto B98;   
  +B18:   #1
        vR4 = vR0.getFatDirEntry@this(vi3,0);    [iiRR R  iiR] 
        vi3++;   
  +B29:   #1
        goto +B65;   [iiRR R  ...]
  +H32<caught exception>:   #1 reference
        vR6 = <caught exception>;    
        if vi3<=65535 goto B50;   
  -B40:   #1
        throw new java/io/IOException("Directory is full");   
  +B50:   #1
        vR0.getChain@this().allocateAndClear(1);   [iiRRR R . iR.] [iiRRR R R iR.] 
        vi2 = 0;    
        vi3 = 0;    
        goto +B13;   [iiRRR R . ...]
  +B65:   #1
        if vR4.isFreeDirEntry()!=0 goto B81;   
  +B73:   #1
        if vR4.isLastDirEntry()==0 goto B93;   
  +B81:   #1
        vR5[vi2] = vR4;   
        vi2++;   
        goto +B13;   [iiRR R . ...]
  +B93:   #1
        vi2 = 0;    
        goto +B13;   [iiRR R . ...]
  +B98:   #1
        return vR5;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
18 - 29 handler 32 type 149
 }
// Register: rd 15/15 wr 13 swaps 0 any 5 found 0 getFatFreeEntries
 
 method getDirectoryId()Ljava/lang/String; {
  +START:   #1
        return toString@special(vR0.getStartCluster@this());   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getDirectoryId
 
 method isDirectory()Z {
  +START:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isDirectory
 
 method getDirectory()Ljx/fs/Directory; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getDirectory
 
 method getVisitedChildren()Lorg/jnode/fs/jfat/FatTable; {
  +START:   #1
        return vR0.children;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getVisitedChildren
 
 method iterator()Ljava/util/Iterator; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 iterator
 
 method createIterator(Z)Ljava/util/Iterator; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 createIterator
 
 method scanDirectory()V {
  +START:   #1
        vR1 = new org/jnode/fs/jfat/FatEntriesFactory(vR0,0);    [ R  i][ R . iiRR]
  +B10:   #1
        if vR1.hasNextEntry()==0 goto B25;   
  +B17:   #1
        vR1.createNextEntry();   [R R . R...] 
        goto +B10;   [R R . ....]
  +B25:   #1
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 0 any 0 found 0 scanDirectory
 
 method getEntry(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        vR2 = vR0.children.get(vR1);    [ R  RR] 
        if vR2!=null goto B64;   
  +B13:   #1
        vR3 = new org/jnode/fs/jfat/FatEntriesFactory(vR0,0);    [ R  i.][ R . iiRR]
  +B23:   #1
        if vR3.hasNextEntry()==0 goto B64;   
  +B30:   #1
        vR4 = vR3.createNextEntry();    [RR R . R...] 
        if compareIgnoreCase@special(vR4.getName(),vR1)==0 goto B61;   
  +B48:   #1
        vR2 = vR0.children.put(vR4);    [RRR R . RR..] 
        goto +B64;   forward return[RRR R . ....]
  +B61:   #1
        goto +B23;   [RRR R . ....]
  +B64:   #3
        return vR2;   
  +END:   #1
 }
// Register: rd 9/9 wr 6 swaps 0 any 1 found 0 getEntry
 
 method getEntryById(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        vR2 = (org/jnode/fs/jfat/FatEntry)(vR0.idMap.get(vR1));    
        if vR2!=null goto B75;   
  +B18:   #1
        vR3 = new org/jnode/fs/jfat/FatEntriesFactory(vR0,1);    [ R . i.][ R . iiRR]
  +B28:   #1
        if vR3.hasNextEntry()==0 goto B61;   
  +B35:   #1
        vR4 = vR3.createNextEntry();    [RR R . R...] 
        vR0.idMap.put(vR4.getId(),vR4);   [RRR R i RRR.] 
        goto +B28;   [RRR R i ....]
  +B61:   #1
        return (jx/fs/Node)(vR0.idMap.get(vR1));   
  +B75:   #1
        return vR2;   
  +END:   #1
 }
// Register: rd 12/12 wr 7 swaps 1 any 1 found 0 getEntryById
 
 method getEntryByShortName([B)Lorg/jnode/fs/jfat/FatEntry; {
  +START:   #1
        vR2 = 0;    
        vR3 = new org/jnode/fs/jfat/FatEntriesFactory(vR0,0);    [ R  i][ R . iiRR]
  +B12:   #1
        if vR3.hasNextEntry()==0 goto B43;   
  +B19:   #1
        vR4 = vR3.createNextEntry();    [RR R . R...] 
        if vR4.isShortName(vR1)==0 goto B40;   
  +B34:   #1
        vR2 = vR4;    
        goto +B43;   forward return[RRR R . ....]
  +B40:   #1
        goto +B12;   [RRR R . ....]
  +B43:   #2
        return vR2;   
  +END:   #1
 }
// Register: rd 7/7 wr 5 swaps 0 any 1 found 0 getEntryByShortName
 
 method getEntryByName(Ljava/lang/String;)Lorg/jnode/fs/jfat/FatEntry; {
  +START:   #1
        vR2 = 0;    
        vR3 = new org/jnode/fs/jfat/FatEntriesFactory(vR0,0);    [ R  i][ R . iiRR]
  +B12:   #1
        if vR3.hasNextEntry()==0 goto B46;   
  +B19:   #1
        vR4 = vR3.createNextEntry();    [RR R . R...] 
        if compareIgnoreCase@special(vR4.getName(),vR1)==0 goto B43;   
  +B37:   #1
        vR2 = vR4;    
        goto +B46;   forward return[RRR R . ....]
  +B43:   #1
        goto +B12;   [RRR R . ....]
  +B46:   #2
        return vR2;   
  +END:   #1
 }
// Register: rd 7/7 wr 6 swaps 0 any 1 found 0 getEntryByName
 
 method collide([B)Z {
  +START:   #1
        if vR0.getEntryByShortName@this(vR1)==null goto B12;   
  +B8:   #1
        b0 = 1;    
        goto +B13b0;   forward return[ i  ..]
  +B12:   #1
        b0 = 0;    
  +B13b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 collide
 
 method collide(Ljava/lang/String;)Z {
  +START:   #1
        if vR0.getEntryByName@this(vR1)==null goto B12;   
  +B8:   #1
        b0 = 1;    
        goto +B13b0;   forward return[ i  ..]
  +B12:   #1
        b0 = 0;    
  +B13b0:   #1 int
        return b0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 collide
 
 method isEmpty()Z {
  +START:   #1
        if vR0.isRoot@this()==0 goto B9;   
  +B7:   #1
        return 0;   
  +B9:   #1
        vR1 = vR0.iterator@this();    [   R] 
  +B14:   #1
        if vR1.hasNext()==0 goto B48;   
  +B23:   #1
        vR2 = 0;    
        if vR2.equals@extra(".")!=0 goto B45;   
  +B34:   #1
        if vR2.equals@extra("..")!=0 goto B45;   
  +B43:   #1
        return 0;   
  +B45:   #2
        goto +B14;   [RR  . ..]
  +B48:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 5/5 wr 4 swaps 2 any 0 found 0 isEmpty
 
 method addFile(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        vR2 = new org/jnode/fs/jfat/FatName(vR0,vR1);    [ RRR  i][ RRR . iRRR]
        if vR0.collide@this(vR2.getLongName())==0 goto B56;   
  -B21:   #1
        b0 = new java/io/IOException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR . i...][ RRR . iR..]
        b1.<init>@special(b2.append@extra("File [").append@extra(vR2.getLongName()).append@extra("] already exists").toString@extra());   [R RRR ii.ii. RR..] 
        throw b0;   
  +B56:   #1
        vR3 = new org/jnode/fs/jfat/FatRecord(vR0,vR2);    [ RRR ...... i...][ RRR ...... iRRR]
        vR3.getShortEntry().setArchive();   [RR RRR ...... R...] [RR RRR R..... R...] 
        vR4 = new org/jnode/fs/jfat/FatFile(vR0.getFatFileSystem@this(),vR0,vR3);    [ RRR ...... i...][ RRR ...... iRRRR]
        vR4.flush();   [RRR RRR ...... R....] 
        vR5 = vR0.children.put(vR4);    [RRR RRR ...... RR...] 
        vR0.idMap.put(vR5.getId(),vR5);   [RRRR RRR i..... RRR..] 
        return vR5;   
  +END:   #1
 }
// Register: rd 23/23 wr 20 swaps 6 any 1 found 0 addFile
 
 method addDirectory(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        vR2 = vR0.getFatFileSystem@this();    [ RRR  R] 
        vR3 = new org/jnode/fs/jfat/FatName(vR0,vR1);    [ RRR  i][ RRR . iRRR]
        if vR0.collide@this(vR3.getLongName())==0 goto B61;   
  -B26:   #1
        b0 = new java/io/IOException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR . i...][ RRR . iR..]
        b1.<init>@special(b2.append@extra("File [").append@extra(vR3.getLongName()).append@extra("] already exists").toString@extra());   [RR RRR ii.ii. RR..] 
        throw b0;   
  +B61:   #1
        vR4 = new org/jnode/fs/jfat/FatRecord(vR0,vR3);    [ RRR ...... i...][ RRR ...... iRRR]
        vR4.getShortEntry().setDirectory();   [RRR RRR ...... R...] [RRR RRR R..... R...] 
        vR5 = new org/jnode/fs/jfat/FatDirectory(vR2,vR0,vR4);    [ RRR ...... i...][ RRR ...... iRRRR]
        vR5.initialize@special();   [RRRR RRR ...... R....] 
        vR5.flush();   [RRRR RRR ...... R....] 
        vR6 = vR0.children.put(vR5);    [RRRR RRR ...... RR...] 
        vR0.idMap.put(vR6.getId(),vR6);   [RRRRR RRR i..... RRR..] 
        return vR6;   
  +END:   #1
 }
// Register: rd 25/25 wr 21 swaps 6 any 1 found 0 addDirectory
 
 method remove(Ljava/lang/String;)V {
  +START:   #1
        vR2 = (org/jnode/fs/jfat/FatEntry)(vR0.getEntry@this(vR1));    
        if vR2!=null goto B22;   
  -B13:   #1
        throw new java/io/FileNotFoundException(vR1);   
  +B22:   #1
        if vR2.isFile()==0 goto B61;   
  +B29:   #1
        vR3 = (org/jnode/fs/jfat/FatFile)(vR2.getFile());    
        vR0.children.remove(vR2);   [RR RRR . RR.] 
        vR3.delete();   [RR RRR . R..] 
        vR3.freeAllClusters();   [RR RRR . R..] 
        vR3.flush();   [RR RRR . R..] 
        goto +B122;   [RR RRR . ...]
  +B61:   #1
        vR3 = (org/jnode/fs/jfat/FatDirectory)(vR2);    
        if vR3.isEmpty()!=0 goto B101;   
  -B73:   #1
        b0 = new java/lang/UnsupportedOperationException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR . i..][ RRR . iR.]
        b1.<init>@special(b2.append@extra("Directory is not empty: ").append@extra(vR1).toString@extra());   [RR RRR ii. RR.] 
        throw b0;   
  +B101:   #1
        vR0.children.remove(vR2);   [RR RRR ... RR.] 
        vR3.delete();   [RR RRR ... R..] 
        vR3.freeAllClusters();   [RR RRR ... R..] 
        vR3.flush();   [RR RRR ... R..] 
  +B122:   #1
        vR0.idMap.remove(vR2.getId());   [RR RRR i.. RR.] 
        return;   
  +END:   #1
 }
// Register: rd 25/25 wr 14 swaps 3 any 3 found 1 remove
 
 method toString()Ljava/lang/String; {
  +START:   #1
        b0 = "FatDirectory [%s] index:%d";    
        b1 = new java/lang/Object()[2];    
        b1[0] = vR0.getName@this();   
        b1[1] = valueOf@special(vR0.getIndex@this());   
        return format@special(b0,b1);   
  +END:   #1
 }
// Register: rd 6/6 wr 3 swaps 0 any 0 found 0 toString
 
 method getNode(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        if vR0.i_released==0 goto B15;   
  -B7:   #1
        throw new jx/fs/NotExistException();   
  +B15:   #1
        vR2 = vR0.getEntryByName@this(vR1);    [ R  RR] 
        if vR2==null goto B27;   
  +B25:   #1
        return vR2;   
  +B27:   #1
        return vR2;   
  +END:   #1
 }
// Register: rd 5/5 wr 1 swaps 0 any 1 found 0 getNode
 
 method getPermission()Ljx/fs/Permission; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getPermission
 
 method getAttribute()Ljx/fs/FSAttribute; {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 getAttribute
 
 method close()V {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 close
 
 method isValid()Z {
  -START:   #1
        throw new java/lang/UnsupportedOperationException("Not supported yet.");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 isValid
}
