class jx/rpcsvc/nfs2/NFSInode {
 
 method <init>(Ljx/rpcsvc/nfs2/NFSProc;Ljx/fs/Node;Ljx/rpcsvc/nfs2/FHandle;)V {
  +START:   #1
        vR0.<init>@special(vR2);   [   RR] 
        vR0.nfs = vR1;   
        vR0.fileHandle = vR3;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/rpcsvc/nfs2/NFSProc;Ljx/fs/Node;Ljava/lang/String;)V {
  +START:   #1
        vR0.<init>@special(vR2);   [   RR] 
        vR0.nfs = vR1;   
        vR0.myName = vR3;   
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/rpc/RPC;Ljx/rpcsvc/nfs2/NFSProc;Ljx/fs/Node;Ljx/rpcsvc/nfs2/FHandle;Ljx/rpcsvc/nfs2/FAttr;)V {
  +START:   #1
        vR0.<init>@special(vR3);   [   RR] 
        vR0.rpc = vR1;   
        vR0.nfs = vR2;   
        vR0.fileHandle = vR4;   
        vR0.attr = vR5;   
        return;   
  +END:   #1
 }
// Register: rd 9/9 wr 0 swaps 0 any 0 found 0 <init>
 
 method <init>(Ljx/rpc/RPC;Ljx/net/IPAddress;Ljava/lang/String;)V {
  +START:   #1
        vR0.<init>@special(0);   [ RRR??R  RR] 
        vR0.rpc = vR1;   
        vR4 = (jx/rpcsvc/mount1/MountProc)(getInitialNaming@special().lookup("Mounter"));    
        b1 = new jx/rpcsvc/nfs2/DirPath(vR3);    [ RRR??R i. i.][ RRR??R i. iRR]
        vR5 = vR4.mnt(b1);    [R RRR??R i. RR.] 
        if vR5.status==0 goto B81;   
  -B50:   #1
        b0 = new jx/rpcsvc/nfs2/NFSException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR??R .. i..][ RRR??R .. iR.]
        b1.<init>@special(b2.append@extra("Could not mount ").append@extra(vR5.status).toString@extra());   [RR RRR??R iii. RR.] 
        throw b0;   
  +B81:   #1
        vR0.fileHandle = (jx/rpcsvc/mount1/FHStatusOK)(vR5).directory;   
        b1 = new jx/rpcsvc/nfs2/NFSInode$NFSProc_Stub(vR1,vR2);    [ RRR??R .... i..][ RRR??R .... iRRR]
        vR0.nfs = b1;   
        b0 = new jx/rpc/AuthUnix;    
        b1 = b0;    
        b2 = vR1.getLocalAddress().getHostName();    [RR RRR??R .... R...] [RR RRR??R R... R...] 
        b5 = new int[1];    
        b5[0] = 10424;   
        b1.<init>@special(b2,10412,10430,b5);   [RR RRR??R .... RiiRR] 
        vR6 = b0;    
        vR7 = new jx/rpc/AuthNone();    [ RRR??R .... i....][ RRR??R .... iR...]
        access$000@special((jx/rpcsvc/nfs2/NFSInode$NFSProc_Stub)(vR0.nfs),vR6,vR7);   [RRRR RRR??R R... RRR..]
        return;   
  +END:   #1
 }
// Register: rd 31/31 wr 26 swaps 4 any 3 found 1 <init>
 
 method <init>(Ljx/fs/Node;)V {
  +START:   #1
        vR0.<init>@special(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method initFromNFS(Ljava/lang/String;)V {
  +START:   #1
        if (vR0.parent instanceof jx/rpcsvc/nfs2/NFSInode)!=0 goto B20;   
  -B10:   #1
        throw new jx/rpcsvc/nfs2/NFSException("non-nfs parent, cannot init");   
  +B20:   #1
        vR2 = (jx/rpcsvc/nfs2/NFSInode)(vR0.parent).getFileHandle@special();    [ RRR . R..] 
        b0 = vR0.nfs;    
        b2 = new jx/rpcsvc/nfs2/Name(vR1);    [ RRR . i..][ RRR . iRR]
        vR3 = b0.lookup(vR2,b2);    [R RRR . RRR] 
        if (vR3 instanceof jx/rpcsvc/nfs2/DirOpResOK)!=0 goto B84;   
  -B57:   #1
        b0 = new jx/rpcsvc/nfs2/NFSException;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR . i..][ RRR . iR.]
        b1.<init>@special(b2.append@extra("lookupError: ").append@extra(vR1).toString@extra());   [RR RRR ii. RR.] 
        throw b0;   
  +B84:   #1
        vR0.fileHandle = (jx/rpcsvc/nfs2/DirOpResOK)(vR3).file;   
        vR0.attr = (jx/rpcsvc/nfs2/DirOpResOK)(vR3).attributes;   
        return;   
  +END:   #1
 }
// Register: rd 20/20 wr 14 swaps 2 any 1 found 2 initFromNFS
 
 method initAttrFromNFS()V {
  +START:   #1
        vR1 = vR0.nfs.getattr(vR0.fileHandle);    [ R i RR] 
        if (vR1 instanceof jx/rpcsvc/nfs2/AttrStatOK)!=0 goto B31;   
  -B21:   #1
        throw new jx/rpcsvc/nfs2/NFSException("getattr Error ");   
  +B31:   #1
        vR0.attr = (jx/rpcsvc/nfs2/AttrStatOK)(vR1).attributes;   
        return;   
  +END:   #1
 }
// Register: rd 7/7 wr 3 swaps 1 any 0 found 1 initAttrFromNFS
 
 method getFileHandle()Ljx/rpcsvc/nfs2/FHandle; {
  +START:   #1
        if vR0.fileHandle!=null goto B37;   
  +B7:   #1
        if vR0.myName==null goto B27;   
  +B14:   #1
        vR0.initFromNFS@special(vR0.myName);   [ R i RR] 
        return vR0.fileHandle;   
  -B27:   #1
        throw new jx/rpcsvc/nfs2/NFSException("no fh ");   
  +B37:   #1
        return vR0.fileHandle;   
  +END:   #1
 }
// Register: rd 7/7 wr 2 swaps 1 any 0 found 0 getFileHandle
 
 method readdirNames()[Ljava/lang/String; {
  -START:   #1
        throw new java/lang/Error("String[] statt Vector zurueckgeben!");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 readdirNames
 
 method getAttr()Ljx/rpcsvc/nfs2/FAttr; {
  +START:   #1
        if vR0.attr!=null goto B46;   
  +B7:   #1
        if vR0.fileHandle!=null goto B42;   
  +B14:   #1
        if vR0.myName==null goto B32;   
  +B21:   #1
        vR0.initFromNFS@special(vR0.myName);   [ R i RR] 
        goto +B42;   [ R i ..]
  -B32:   #1
        throw new jx/rpcsvc/nfs2/NFSException("no name and no handle?");   
  +B42:   #2
        vR0.initAttrFromNFS@special();   [ R . R..] 
  +B46:   #1
        return vR0.attr;   
  +END:   #1
 }
// Register: rd 8/8 wr 2 swaps 1 any 0 found 0 getAttr
 
 method isDirectory()Z {
  +START:   #2
        if vR0.getAttr@special().type.ftype!=2 goto B18;   
  +B14:   #1
        b0 = 1;    
        goto +B19b0;   forward return[ i  .]
  +B18:   #1
        b0 = 0;    
  +B19b0:   #2 int
        return b0;   
  +H20<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [R i  R] 
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 19 handler 20 type 60
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 isDirectory
 
 method isReadable()Z {
  +START:   #2
        if (vR0.getAttr@special().mode & 256)==0 goto B18;   
  +B14:   #1
        b0 = 1;    
        goto +B19b0;   forward return[ i  .]
  +B18:   #1
        b0 = 0;    
  +B19b0:   #2 int
        return b0;   
  +H20<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [R i  R] 
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 19 handler 20 type 60
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 isReadable
 
 method isWritable()Z {
  +START:   #2
        if (vR0.getAttr@special().mode & 128)==0 goto B18;   
  +B14:   #1
        b0 = 1;    
        goto +B19b0;   forward return[ i  .]
  +B18:   #1
        b0 = 0;    
  +B19b0:   #2 int
        return b0;   
  +H20<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [R i  R] 
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 19 handler 20 type 60
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 isWritable
 
 method isExecutable()Z {
  +START:   #2
        if (vR0.getAttr@special().mode & 64)==0 goto B17;   
  +B13:   #1
        b0 = 1;    
        goto +B18b0;   forward return[ i  .]
  +B17:   #1
        b0 = 0;    
  +B18b0:   #2 int
        return b0;   
  +H19<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [R i  R] 
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 18 handler 19 type 60
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 isExecutable
 
 method isFile()Z {
  +START:   #2
        if vR0.getAttr@special().type.ftype!=1 goto B18;   
  +B14:   #1
        b0 = 1;    
        goto +B19b0;   forward return[ i  .]
  +B18:   #1
        b0 = 0;    
  +B19b0:   #2 int
        return b0;   
  +H20<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [R i  R] 
        return 0;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 19 handler 20 type 60
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 isFile
 
 method mtime()J {
  +START:   #2
        b0 = (long)vR0.getAttr@special().mtime.seconds;    
  +B11b0:   #1 long
        return b0;   
  +H12<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [R l_  R] 
        return -1;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 11 handler 12 type 60
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 mtime
 
 method mknode(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        vR2 = new jx/rpcsvc/nfs2/SAttr(384);    [ RRR  i][ RRR . iiR]
        b0 = vR0.nfs;    
        b1 = vR0.fileHandle;    
        b2 = new jx/rpcsvc/nfs2/Name(vR1);    [ RRR . i..][ RRR . iRR]
        vR3 = b0.create(b1,b2,vR2);    [R RRR . RRRR] 
        if (vR3 instanceof jx/rpcsvc/nfs2/DirOpResOK)!=0 goto B43;   
  +B41:   #1
        return 0;   
  +B43:   #1
        vR4 = (jx/rpcsvc/nfs2/DirOpResOK)(vR3).file;    
        vR5 = (jx/rpcsvc/nfs2/DirOpResOK)(vR3).attributes;    
        vR6 = new jx/rpcsvc/nfs2/NFSInode(vR0.rpc,vR0.nfs,vR0,vR4,vR5);    [ RRR . i...][ RRR . iRRRRRR]
        if vR0.children==null goto B99;   
  +B90:   #1
        vR0.children.addElement@extra(vR6);   [RRRRR RRR . RR.....] 
  +B99:   #1
        if vR0.names==null goto B114;   
  +B106:   #1
        vR0.names.addElement@extra(vR1);   [RRRRR RRR . RR.....] 
  +B114:   #1
        return vR6;   
  +END:   #1
 }
// Register: rd 24/24 wr 11 swaps 0 any 0 found 2 mknode
 
 method mkdir(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 mkdir
 
 method getLength()I {
  +START:   #2
        b0 = vR0.getAttr@special().size;    
  +B7b0:   #1 int
        return b0;   
  +H8<caught exception>:   #1 reference
        vR1 = <caught exception>;    
        vR1.printStackTrace();   [R i  R] 
        return -1;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
0 - 7 handler 8 type 60
 }
// Register: rd 3/3 wr 2 swaps 0 any 0 found 0 getLength
 
 method read(J[BII)I {
  +START:   #1
        vi9 = 0;    
        vi10 = 1024;    
        vR0.getFileHandle@special();   [????ii RR  R] 
        vi7 = (int)vl1;    
        vi11 = vi5;    
  +B21:   #1
        if vi11<=0 goto B183;   
  +B26:   #1
        vi8 = min@special(1024,vi11);    [i?i?iii RR . ii]
        vR12 = vR0.nfs.read(vR0.fileHandle,vi7,vi8,0);    [i?iiiii RR i iiiRR] 
        if (vR12 instanceof jx/rpcsvc/nfs2/ReadResOK)!=0 goto B94;   
  +B64:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR . i....][ RR . iR...]
        b0.println(b1.append@extra("Read error ").append@extra(vR12).toString@extra());   [i?iiiiiR RR ii. RR...] 
        exit@special(1);   [i?iiiiiR RR ii. i....]
  +B94:   #1
        vR13 = (jx/rpcsvc/nfs2/ReadResOK)(vR12).data;    
        vi6 = vR13.data.length;    
        if vi6>=0 goto B130;   
  +B117:   #1
        out.println("Unable to read text");   [iiiiiiiRR RR i.. RR...] 
        exit@special(1);   [iiiiiiiRR RR i.. i....]
  +B130:   #1
        if vi6!=0 goto B138;   
  +B135:   #1
        goto +B183;   forward return[iiiiiiiRR RR ... .....]
  +B138:   #1
        arraycopy@special(vR13.data,0,vR3,vi4,vi6);   [iiiiiiiRR RR R.. iiRiR]
        vi7 = (vi7+vi6);    
        vi4 = (vi4+vi6);    
        vi11 = (vi11-vi6);    
        vi9 = (vi9+vi6);    
        goto +B21;   [iiiiiiiRR RR R.. .....]
  +B183:   #2
        return vi9;   
  +END:   #1
 }
// Register: rd 23/23 wr 22 swaps 4 any 8 found 1 read
 
 method write(J[BII)I {
  +START:   #1
        vi9 = 0;    
        vi10 = 1024;    
        vR0.getFileHandle@special();   [????ii RR  R] 
        vi7 = (int)vl1;    
        vi11 = vi5;    
        vR12 = new jx/rpcsvc/nfs2/NFSData();    [ RR i i][ RR i iR]
  +B30:   #1
        if vi11<=0 goto B190;   
  +B35:   #1
        vi8 = min@special(1024,vi11);    [i?i?iiiR RR . ii]
        if vR12.data==null goto B64;   
  +B53:   #1
        if vR12.data.length==vi8 goto B73;   
  +B64:   #1
        vR12.data = new byte[vi8];   
  +B73:   #1
        arraycopy@special(vR3,vi4,vR12.data,0,vi8);   [i?iiiiiR RR R iiRiR]
        vR13 = vR0.nfs.write(vR0.fileHandle,0,vi7,0,vR12);    [i?iiiiiR RR Ri RiiiRR] 
        if (vR13 instanceof jx/rpcsvc/nfs2/AttrStatOK)!=0 goto B147;   
  +B116:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .. i.....][ RR .. iR....]
        b0.println(b1.append@extra("Write error ").append@extra(vR13).toString@extra());   [i?iiiiiRR RR ii. RR....] 
        exit@special(1);   [i?iiiiiRR RR ii. i.....]
  +B147:   #1
        vR0.attr = (jx/rpcsvc/nfs2/AttrStatOK)(vR13).attributes;   
        vi7 = (vi7+vi8);    
        vi4 = (vi4+vi8);    
        vi11 = (vi11-vi8);    
        vi9 = (vi9+vi8);    
        goto +B30;   [i?iiiiiRR RR ... ......]
  +B190:   #1
        return vi9;   
  +END:   #1
 }
// Register: rd 26/26 wr 19 swaps 3 any 6 found 1 write
 
 method available()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 available
 
 method getRoot(Ljx/rpc/RPC;Ljx/net/IPAddress;Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        return new jx/rpcsvc/nfs2/NFSInode(vR0,vR1,vR2);   
  +END:   #1
 }
// Register: rd 4/4 wr 1 swaps 0 any 0 found 0 getRoot
 
 method finalize()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 finalize
 
 method getParent()Ljx/fs/Node; {
  +START:   #1
        return vR0.parent;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getParent
 
 method setParent(Ljx/fs/Node;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setParent
 
 method isDirty()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isDirty
 
 method setDirty(Z)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setDirty
 
 method incUseCount()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 incUseCount
 
 method decUseCount()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 decUseCount
 
 method i_nlinks()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 i_nlinks
 
 method deleteNode()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 deleteNode
 
 method writeNode()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 writeNode
 
 method putNode()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 putNode
 
 method overlay(Ljx/fs/Node;Ljava/lang/String;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 overlay
 
 method removeOverlay(Ljx/fs/Node;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 removeOverlay
 
 method removeAllOverlays()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 removeAllOverlays
 
 method isOverlayed(Ljava/lang/String;)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isOverlayed
 
 method lookup(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 lookup
 
 method isSymlink()Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 isSymlink
 
 method lastModified()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 lastModified
 
 method getNode(Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getNode
 
 method mkdir(Ljava/lang/String;I)Ljx/fs/Node; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 mkdir
 
 method rmdir(Ljava/lang/String;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 rmdir
 
 method create(Ljava/lang/String;I)Ljx/fs/Node; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 create
 
 method unlink(Ljava/lang/String;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 unlink
 
 method symlink(Ljava/lang/String;Ljava/lang/String;)Ljx/fs/Node; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 symlink
 
 method getSymlink()Ljava/lang/String; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getSymlink
 
 method rename(Ljava/lang/String;Ljx/fs/Node;Ljava/lang/String;)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 rename
 
 method read(Ljx/zero/Memory;II)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 read
 
 method read(ILjx/zero/Memory;II)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 read
 
 method write(Ljx/zero/Memory;II)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 write
 
 method write(ILjx/zero/Memory;II)I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 write
 
 method lastAccessed()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 lastAccessed
 
 method lastChanged()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 lastChanged
 
 method setLastModified(I)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setLastModified
 
 method setLastAccessed(I)V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 setLastAccessed
 
 method getIdentifier()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getIdentifier
 
 method getVersion()I {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getVersion
 
 method getFileSystem()Ljx/fs/FileSystem; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getFileSystem
 
 method getStatFS()Ljx/fs/StatFS; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getStatFS
}
