class test/memobj/Main {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method testMemory(Ljx/zero/MemoryManager;Ljx/zero/Memory;I)V {
  +START:   #1
        vR3 = 0;    
        if vi2==vR1.size() goto B22;   
  -B12:   #1
        throw new java/lang/Error("WRONG SIZE");   
  +B22:   #1
        out.println("SIZE OK");   [R R i. RR.] 
        test8Bit@special(vR0,vR1,vi2);   [R R i. iRR]
        test8BitConst@special(vR0,vR1,vi2);   [R R i. iRR]
        out.println("set8/get8 OK");   [R R ii. RR.] 
        xdump@special(vR1,0,64);   [R R ii. iiR]
        test16Bit@special(vR0,vR1,vi2);   [R R ii. iRR]
        out.println("set16/get16 OK");   [R R iii. RR.] 
        xdump@special(vR1,0,64);   [R R iii. iiR]
        test16BitLE@special(vR0,vR1,vi2);   [R R iii. iRR]
        out.println("setLittleEndian16/getLittleEndian16 OK");   [R R iiii. RR.] 
        xdump@special(vR1,0,64);   [R R iiii. iiR]
        test32Bit@special(vR0,vR1,vi2);   [R R iiii. iRR]
        test32BitConst@special(vR0,vR1,vi2);   [R R iiii. iRR]
        out.println("set32/get32 OK");   [R R iiiii. RR.] 
        xdump@special(vR1,0,64);   [R R iiiii. iiR]
        vR4 = new byte[13];    
        vR1.copyToByteArray(vR4,3,2,10);   [RR R iiiii. iiiRR] 
        vi5 = 0;    
  +B147:   #1
        if vi5>=10 goto B190;   
  +B154:   #1
        if vR1.get8((vi5+2))==vR4[(vi5+3)] goto B184;   
  -B174:   #1
        throw new java/lang/Error("copyToByteArray: WRONG value");   
  +B184:   #1
        vi5++;   
        goto +B147;   [RRi R ...... .....]
  -B190:   #1
        out.println("copyToByteArray OK");   [RRi R i..... RR...] 
        vR1.copyFromByteArray(vR4,1,2,3);   [RRi R i..... iiiRR] 
        out.println("copyFromByteArray OK");   [RRi R ii.... RR...] 
        vR5 = vR0.alloc(100);    [RRi R ii.... iR...] 
        vR1.copyToMemory(vR5,1,8,70);   [RRR R ii.... iiiRR] 
        out.println("copyToMemory OK");   [RRR R iii... RR...] 
        xdump@special(vR5,0,64);   [RRR R iii... iiR..]
        throw new java/lang/Error("extend -> split");   
  +END:   #1
 }
// Register: rd 16/16 wr 25 swaps 9 any 3 found 1 testMemory
 
 method test8Bit(Ljx/zero/MemoryManager;Ljx/zero/Memory;I)V {
  +START:   #1
        vi3 = 128;    
        vR1.set8(0,(byte)vi3);   [i RRR i iiR] 
        if vR1.get8(0)==(byte)vi3 goto B35;   
  -B25:   #1
        throw new java/lang/Error("sign extension does not work");   
  +B35:   #1
        vi4 = 0;    
  +B38:   #1
        if vi4>=127 goto B124;   
  +B45:   #1
        vR1.set8(vi4,(byte)vi4);   [ii RRR i. iiR] 
        vi5 = vR1.get8(vi4);    [ii RRR i. iR.] 
        if vi5==vi4 goto B118;   
  -B73:   #1
        xdump@special(vR1,0,64);   [iii RRR .. iiR]
        b0 = new java/lang/Error;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR .. i..][ RRR .. iR.]
        b1.<init>@special(b2.append@extra("get8: WRONG value ").append@extra(vi4).append@extra(", ").append@extra(vi5).toString@extra());   [iii RRR iii... RR...] 
        throw b0;   
  +B118:   #1
        vi4++;   
        goto +B38;   [iii RRR ...... .....]
  +B124:   #1
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 17 swaps 6 any 4 found 0 test8Bit
 
 method test8BitConst(Ljx/zero/MemoryManager;Ljx/zero/Memory;I)V {
  +START:   #1
        vi3 = 0;    
  +B2:   #1
        if vi3>=127 goto B82;   
  +B8:   #1
        vR1.set8(2,(byte)vi3);   [i RRR i iiR] 
        vi4 = vR1.get8(2);    [i RRR i iR.] 
        if vi4==vi3 goto B76;   
  -B32:   #1
        xdump@special(vR1,0,64);   [ii RRR . iiR]
        b0 = new java/lang/Error;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR . i..][ RRR . iR.]
        b1.<init>@special(b2.append@extra("get8: WRONG value ").append@extra(vi3).append@extra(", ").append@extra(vi4).toString@extra());   [ii RRR iii... RR...] 
        throw b0;   
  +B76:   #1
        vi3++;   
        goto +B2;   [ii RRR ...... .....]
  +B82:   #1
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 14 swaps 4 any 4 found 0 test8BitConst
 
 method test16Bit(Ljx/zero/MemoryManager;Ljx/zero/Memory;I)V {
  +START:   #1
        vi3 = 32768;    
        vR1.set16(0,(short)vi3);   [i RR i iiR] 
        if vR1.get16(0)==(short)vi3 goto B34;   
  -B24:   #1
        throw new java/lang/Error("sign extension does not work");   
  +B34:   #1
        vi4 = 0;    
  +B37:   #1
        if vi4>=32767 goto B182;   
  +B45:   #1
        vR1.set16(vi4,(short)vi4);   [ii RR i. iiR] 
        if vR1.get16(vi4)==vi4 goto B79;   
  -B69:   #1
        throw new java/lang/Error("get16: WRONG value");   
  +B79:   #1
        vi5 = (((vR1.get8(((vi4*2)+1)) << 8) & 65280) | (vR1.get8(((vi4*2)+0)) & 255));    
        if vi5==vi4 goto B176;   
  -B123:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ... i..][ RR ... iR.]
        b0.println(b1.append@extra("ERROR at i=").append@extra(vi4).append@extra(", n=").append@extra(vi5).toString@extra());   [iii RR iii... RR...] 
        xdump@special(vR1,0,64);   [iii RR iii... iiR..]
        throw new java/lang/Error("get16: WRONG value (byteorder)");   
  +B176:   #1
        vi4++;   
        goto +B37;   [iii RR ...... .....]
  +B182:   #1
        return;   
  +END:   #1
 }
// Register: rd 23/23 wr 21 swaps 8 any 3 found 0 test16Bit
 
 method test16BitLE(Ljx/zero/MemoryManager;Ljx/zero/Memory;I)V {
  +START:   #1
        vi3 = 0;    
  +B2:   #1
        if vi3>=32767 goto B134;   
  +B9:   #1
        vR1.setLittleEndian16(vi3,(short)vi3);   [i RR i iiR] 
        if vR1.getLittleEndian16(vi3)==vi3 goto B39;   
  -B29:   #1
        throw new java/lang/Error("getLittleEndian16: WRONG value");   
  +B39:   #1
        vi4 = (((vR1.get8((vi3+1)) << 8) & 65280) | (vR1.get8((vi3+0)) & 255));    
        if vi4==vi3 goto B128;   
  -B76:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ... i..][ RR ... iR.]
        b0.println(b1.append@extra("ERROR at i=").append@extra(vi3).append@extra(", n=").append@extra(vi4).toString@extra());   [ii RR iii... RR...] 
        xdump@special(vR1,0,64);   [ii RR iii... iiR..]
        throw new java/lang/Error("getLittleEndian16: WRONG value (byteorder)");   
  +B128:   #1
        vi3++;   
        goto +B2;   [ii RR ...... .....]
  +B134:   #1
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 18 swaps 6 any 3 found 0 test16BitLE
 
 method test32BitConst(Ljx/zero/MemoryManager;Ljx/zero/Memory;I)V {
  +START:   #1
        vi3 = 0;    
  +B2:   #1
        if vi3>=32767 goto B161;   
  +B9:   #1
        vR1.set32(2,vi3);   [i RR  iiR] 
        if vR1.get32(2)==vi3 goto B38;   
  -B28:   #1
        throw new java/lang/Error("get32: WRONG value");   
  +B38:   #1
        vi4 = (((((vR1.get8(11) << 24) & -16777216) | ((vR1.get8(10) << 16) & 16711680)) | ((vR1.get8(9) << 8) & 65280)) | (vR1.get8(8) & 255));    
        if vi4==vi3 goto B155;   
  -B103:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR . i..][ RR . iR.]
        b0.println(b1.append@extra("ERROR at i=").append@extra(vi3).append@extra(", n=").append@extra(vi4).toString@extra());   [ii RR iii... RR...] 
        xdump@special(vR1,0,64);   [ii RR iii... iiR..]
        throw new java/lang/Error("get32: WRONG value (byteorder)");   
  +B155:   #1
        vi3++;   
        goto +B2;   [ii RR ...... .....]
  +B161:   #1
        return;   
  +END:   #1
 }
// Register: rd 18/18 wr 17 swaps 3 any 3 found 0 test32BitConst
 
 method test32Bit(Ljx/zero/MemoryManager;Ljx/zero/Memory;I)V {
  +START:   #1
        vi3 = 0;    
  +B2:   #1
        if vi3>=32767 goto B173;   
  +B9:   #1
        vR1.set32(vi3,vi3);   [i RR  iiR] 
        if vR1.get32(vi3)==vi3 goto B38;   
  -B28:   #1
        throw new java/lang/Error("get32: WRONG value");   
  +B38:   #1
        vi4 = (((((vR1.get8(((vi3*4)+3)) << 24) & -16777216) | ((vR1.get8(((vi3*4)+2)) << 16) & 16711680)) | ((vR1.get8(((vi3*4)+1)) << 8) & 65280)) | (vR1.get8(((vi3*4)+0)) & 255));    
        if vi4==vi3 goto B167;   
  -B115:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ..... i..][ RR ..... iR.]
        b0.println(b1.append@extra("ERROR at i=").append@extra(vi3).append@extra(", n=").append@extra(vi4).toString@extra());   [ii RR iii... RR...] 
        xdump@special(vR1,0,64);   [ii RR iii... iiR..]
        throw new java/lang/Error("get32: WRONG value (byteorder)");   
  +B167:   #1
        vi3++;   
        goto +B2;   [ii RR ...... .....]
  +B173:   #1
        return;   
  +END:   #1
 }
// Register: rd 22/22 wr 21 swaps 7 any 3 found 0 test32Bit
 
 method testSet(Ljx/zero/Memory;)V {
  +START:   #1
        vR0.set32(202,254);   [   iiR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 testSet
 
 method testSpeed(Ljx/zero/MemoryManager;)V {
  +START:   #1
        vR1 = (jx/zero/Clock)(getInitialNaming@special().lookup("Clock"));    
        vR2 = vR0.allocAligned(1024,4);    [R RR i. iiR] 
        vR3 = new jx/zero/CycleTime();    [ RR i. i..][ RR i. iR.]
        vR4 = new jx/zero/CycleTime();    [ RR i. i..][ RR i. iR.]
        vR5 = new jx/zero/CycleTime();    [ RR i. i..][ RR i. iR.]
        vR1.getCycles(vR3);   [RRRRR RR i. RR.] 
        vi6 = 0;    
  +B61:   #1
        if vi6>=100 goto B101;   
  +B68:   #1
        vi7 = 0;    
  +B71:   #1
        if vi7>=256 goto B95;   
  +B79:   #1
        vR2.set32(vi7,vi7);   [RRRRRii RR .. iiR] 
        vi7++;   
        goto +B71;   [RRRRRii RR .. ...]
  +B95:   #1
        vi6++;   
        goto +B61;   [RRRRRii RR .. ...]
  +B101:   #1
        vR1.getCycles(vR4);   [RRRRRii RR .. RR.] 
        vR1.subtract(vR5,vR4,vR3);   [RRRRRii RR .. RRRR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .. i...][ RR .. iR..]
        b0.println(b1.append@extra("set32 time for 100 1KB blocks=").append@extra(vR1.toMicroSec(vR5)).append@extra(" microseconds").toString@extra());   [RRRRRii RR ii.ii. RR..] 
        return;   
  +END:   #1
 }
// Register: rd 13/13 wr 21 swaps 5 any 4 found 0 testSpeed
 
 method testRevoke(Ljx/zero/Naming;)V {
  +START:   #1
        vR1 = (jx/zero/MemoryManager)(vR0.lookup("MemoryManager"));    
        vR2 = (jx/zero/CPUManager)(vR0.lookup("CPUManager"));    
        vR3 = vR1.alloc(100);    [RR  ii. iR] 
        vR4 = new jx/zero/Memory()[3];    
        vR3.split3(10,30,vR4);   [RRRR  ii. RiiR] 
        vR5 = vR4[1];    
        vR2.dump("AFTERSPLIT",vR5);   [RRRRR  iiR RRR.] 
        vR6 = vR5.revoke();    [RRRRR  iiR R...] 
        vR2.dump("AFTERREVOKE",vR6);   [RRRRRR  iiRi RRR.] 
        out.println("Access revoked:");   [RRRRRR  iiRii. RR..] 
        vR5.get8(0);   [RRRRRR  iiRii. iR..] 
        out.println("Access done -> Error");   [RRRRRR  iiRiii. RR..] 
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 16 swaps 5 any 0 found 0 testRevoke
 
 method testCreateSpeed(Ljx/zero/Naming;I)V {
  +START:   #1
        vR2 = (jx/zero/Clock)(getInitialNaming@special().lookup("Clock"));    
        vR3 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR4 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR5 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR6 = (jx/zero/MemoryManager)(vR0.lookup("MemoryManager"));    
        vR7 = (jx/zero/CPUManager)(vR0.lookup("CPUManager"));    
        vR2.getCycles(vR3);   [RRRRRR RR iii. RR] 
        vi8 = 0;    
  +B76:   #1
        if vi8>=vi1 goto B99;   
  +B82:   #1
        vR9 = vR6.alloc(100);    [RRRRRRi RR .... iR] 
        vi8++;   
        goto +B76;   [RRRRRRiR RR .... ..]
  +B99:   #1
        vR2.getCycles(vR4);   [RRRRRRiR RR .... RR] 
        vR2.subtract(vR5,vR4,vR3);   [RRRRRRiR RR .... RRRR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .... i...][ RR .... iR..]
        b0.println(b1.append@extra("time for ").append@extra(vi1).append@extra(" Memory creates=").append@extra(vR2.toMicroSec(vR5)).append@extra(" microseconds").toString@extra());   [RRRRRRiR RR ii.iii... RR....] 
        vR2.getCycles(vR3);   [RRRRRRiR RR ii.iii... RR....] 
        vi8 = 0;    
  +B174:   #1
        if vi8>=vi1 goto B198;   
  +B180:   #1
        vR9 = vR6.allocDeviceMemory(0,100);    [RRRRRRiR RR ......... iiR...] 
        vi8++;   
        goto +B174;   [RRRRRRiR RR ......... ......]
  +B198:   #1
        vR2.getCycles(vR4);   [RRRRRRiR RR ......... RR....] 
        vR2.subtract(vR5,vR4,vR3);   [RRRRRRiR RR ......... RRRR..] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ......... i.....][ RR ......... iR....]
        b0.println(b1.append@extra("time for ").append@extra(vi1).append@extra(" DeviceMemory creates=").append@extra(vR2.toMicroSec(vR5)).append@extra(" microseconds").toString@extra());   [RRRRRRiR RR ii.iii... RR....] 
        return;   
  +END:   #1
 }
// Register: rd 25/25 wr 43 swaps 13 any 4 found 0 testCreateSpeed
 
 method testRevokeSpeed(Ljx/zero/Naming;I)V {
  +START:   #1
        vR2 = (jx/zero/Clock)(getInitialNaming@special().lookup("Clock"));    
        vR3 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR4 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR5 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR6 = (jx/zero/MemoryManager)(vR0.lookup("MemoryManager"));    
        vR7 = (jx/zero/CPUManager)(vR0.lookup("CPUManager"));    
        vR8 = vR6.alloc(100);    [RRRRRR RR iii. iR] 
        vR9 = new jx/zero/Memory()[3];    
        vR2.getCycles(vR3);   [RRRRRRRR RR iii. RR] 
        vi10 = 0;    
  +B93:   #1
        if vi10>=vi1 goto B114;   
  +B99:   #1
        vR8 = vR8.revoke();    [RRRRRRRRi RR .... R.] 
        vi10++;   
        goto +B93;   [RRRRRRRRi RR .... ..]
  +B114:   #1
        vR2.getCycles(vR4);   [RRRRRRRRi RR .... RR] 
        vR2.subtract(vR5,vR4,vR3);   [RRRRRRRRi RR .... RRRR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .... i...][ RR .... iR..]
        b0.println(b1.append@extra("time for ").append@extra(vi1).append@extra(" revokes=").append@extra(vR2.toMicroSec(vR5)).append@extra(" microseconds").toString@extra());   [RRRRRRRRi RR ii.iii... RR....] 
        return;   
  +END:   #1
 }
// Register: rd 16/16 wr 30 swaps 8 any 2 found 0 testRevokeSpeed
 
 method testSplitSpeed(Ljx/zero/Naming;I)V {
  +START:   #1
        vR2 = (jx/zero/Clock)(getInitialNaming@special().lookup("Clock"));    
        vR3 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR4 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR5 = new jx/zero/CycleTime();    [ RR i. i.][ RR i. iR]
        vR6 = (jx/zero/MemoryManager)(vR0.lookup("MemoryManager"));    
        vR7 = (jx/zero/CPUManager)(vR0.lookup("CPUManager"));    
        vR8 = vR6.alloc(vi1);    [RRRRRR RR iii. iR] 
        vR9 = new jx/zero/Memory()[2];    
        vR2.getCycles(vR3);   [RRRRRRRR RR iii. RR] 
        vi10 = 0;    
  +B92:   #1
        if vi10>=vi1 goto B120;   
  +B98:   #1
        vR8.split2(1,vR9);   [RRRRRRRRi RR .... RiR] 
        vR8 = vR9[1];    
        vi10++;   
        goto +B92;   [RRRRRRRRi RR .... ...]
  +B120:   #1
        vR2.getCycles(vR4);   [RRRRRRRRi RR .... RR.] 
        vR2.subtract(vR5,vR4,vR3);   [RRRRRRRRi RR .... RRRR] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR .... i...][ RR .... iR..]
        b0.println(b1.append@extra("time for ").append@extra(vi1).append@extra(" splits=").append@extra(vR2.toMicroSec(vR5)).append@extra(" microseconds").toString@extra());   [RRRRRRRRi RR ii.iii... RR....] 
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 30 swaps 8 any 2 found 0 testSplitSpeed
 
 method testSplit(Ljx/zero/Naming;)V {
  +START:   #1
        vR1 = (jx/zero/DomainManager)(getInitialNaming@special().lookup("DomainManager"));    
        vR2 = (jx/zero/MemoryManager)(vR0.lookup("MemoryManager"));    
        vR3 = vR2.alloc(100);    [RR  ii. iR] 
        vR4 = new jx/zero/Memory()[2];    
        vR3.split2(10,vR4);   [RRRR  ii. RiR] 
        vi5 = 0;    
  +B54:   #1
        vR3.set32(0,0);   [RRRRi  ... iiR] 
  +B62:   #1
        goto +B70;   [RRRRi  ... ...]
  +H65<caught exception>:   #1 reference
        vR6 = <caught exception>;    
        vi5 = 1;    
  +B70:   #1
        if vi5!=0 goto B83;   
  +B75:   #1
        out.println("ERROR: NO EXCEPTION WHILE ACCESSING BASE MEMORY OF SPLIT");   [RRRRi  i.. RR.] 
  +B83:   #1
        vi5 = 1;    
  +B86:   #1
        vR4[0].set32(0,0);   [RRRRi  ... iiR] 
        vR4[1].set32(0,0);   [RRRRi  ... iiR] 
  +B108:   #1
        goto +B116;   [RRRRi  ... ...]
  +H111<caught exception>:   #1 reference
        vR6 = <caught exception>;    
        vi5 = 0;    
  +B116:   #1
        if vi5!=0 goto B130;   
  +B121:   #1
        out.println("ERROR: EXCEPTION WHILE ACCESSING SPLITTER");   [RRRRi  i.. RR.] 
  +B130:   #1
        out.println("SUCCESS: split test completed successfully");   [RRRRi  i.. RR.] 
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
54 - 62 handler 65 type 252
86 - 108 handler 111 type 252
 }
// Register: rd 10/10 wr 19 swaps 5 any 2 found 0 testSplit
