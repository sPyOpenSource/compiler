class jx/scheduler/JAVARRobin {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [ ?RRR  R] 
        vR0.MyCPU = 0;   
        vR0.ContainerPool = 0;   
        vR0.ContainerPoolSize = 0;   
        vR0.domainZero = getInitialNaming@special();   
        vR0.irq = (jx/zero/IRQ)(vR0.domainZero.lookup("IRQ"));   
        vR0.cpuManager = (jx/zero/CPUManager)(vR0.domainZero.lookup("CPUManager"));   
        vR0.SMPcpuManager = (jx/zero/SMPCPUManager)(vR0.domainZero.lookup("SMPCPUManager"));   
        vR0.JAVAschedulerSupport = (jx/zero/JAVASchedulerSupport)(vR0.domainZero.lookup("JAVASchedulerSupport"));   
        vR1 = (jx/zero/debug/DebugChannel)(vR0.domainZero.lookup("DebugChannel0"));    
        b1 = new jx/zero/debug/DebugPrintStream;    
        b2 = b1;    
        b3 = new jx/zero/debug/DebugOutputStream(vR1);    [ ?RRR iiiii. i.][ ?RRR iiiii. iRR]
        b2.<init>@special(b3);   [R ?RRR iiiii. RR.] 
        vR0.out = b1;   
        out = vR0.out;   
        vR0.first = 0;   
        vR0.last = 0;   
        return;   
  +END:   #1
 }
// Register: rd 30/30 wr 16 swaps 5 any 1 found 0 <init>
 
 method init(I)V {
  +START:   #1
        out.println("RRobin register called");   [  i. RR] 
        vR0.idleThread = vR0.JAVAschedulerSupport.getIdleThread();   
        vR0.MyCPU = vR0.SMPcpuManager.getMyCPU();   
        vR0.irq.installFirstLevelHandler(vi1,vR0);   [  i. RiR] 
        vR0.irq.enableIRQ(vi1);   [  i. iR.] 
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 2 swaps 1 any 0 found 0 init
 
 method interrupt()V {
  +START:   #1
        vR1 = vR0.removeNext@this();    [   R] 
        if vR1!=null goto B10;   
  +B9:   #1
        return;   
  +B10:   #1
        vR0.add@this(vR0.JAVAschedulerSupport.getCurThr());   [R  i RR] 
        vR0.JAVAschedulerSupport.switchTo(vR1);   [R  i RR] 
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 2 swaps 1 any 1 found 0 interrupt
 
 method add(Ljx/zero/CPUState;)V {
  +START:   #1
        if vR1!=null goto B5;   
  +B4:   #1
        return;   
  +B5:   #1
        if vR1!=vR0.idleThread goto B14;   
  +B13:   #1
        return;   
  +B14:   #1
        vR2 = vR0.first;    
  +B19:   #1
        if vR2==null goto B48;   
  +B23:   #1
        if vR2.content!=vR1 goto B40;   
  +B31:   #1
        out.println("Thread <THREAD> already in runqueue.");   [R ?RR i. RR] 
        return;   
  +B40:   #1
        vR2 = vR2.next;    
        goto +B19;   [R ?RR .. ..]
  +B48:   #1
        if vR0.last!=null goto B72;   
  +B55:   #1
        b2 = vR0.getNewContainer@special(vR1);    [R ?RR .. RR] 
        b1 = b2;    
        vR0.first = b2;   
        vR0.last = b1;   
        goto +B95;   forward return[R ?RR .. ..]
  +B72:   #1
        vR0.last.next = vR0.getNewContainer@special(vR1);   
        vR0.last = vR0.last.next;   
  +B95:   #1
        return;   
  +END:   #1
 }
// Register: rd 19/19 wr 6 swaps 1 any 4 found 0 add
 
 method removeNext()Ljx/zero/CPUState; {
  +START:   #1
        vR1 = 0;    
        vR2 = 0;    
        if vR0.first!=null goto B13;   
  +B11:   #1
        return 0;   
  +B13:   #1
        vR1 = vR0.first;    
        vR0.first = vR0.first.next;   
        if vR0.first!=null goto B41;   
  +B36:   #1
        vR0.last = 0;   
  +B41:   #1
        vR2 = vR1.content;    
        vR0.releaseContainer@special(vR1);   [RR   RR] 
        return vR2;   
  +END:   #1
 }
// Register: rd 9/9 wr 4 swaps 0 any 0 found 0 removeNext
 
 method toString()Ljava/lang/String; {
  +START:   #1
        return "this is a RRobin Object";   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 toString
 
 method dump()V {
  +START:   #1
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("RunQueue for CPU ").append@extra(vR0.SMPcpuManager.getMyCPU()).append@extra(":").toString@extra());   [ RR ii.ii. RR..] 
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR ii.ii. i...][ RR ii.ii. iR..]
        b0.println(b1.append@extra("ContainerPoolSize: ").append@extra(vR0.ContainerPoolSize).toString@extra());   [ RR iiiiiii. RR..] 
        vR1 = vR0.first;    
  +B71:   #1
        if vR1==null goto B96;   
  +B75:   #1
        vR0.JAVAschedulerSupport.dumpThread(vR1.content);   [R RR i....... RR..] 
        vR1 = vR1.next;    
        goto +B71;   [R RR i....... ....]
  +B96:   #1
        return;   
  +END:   #1
 }
// Register: rd 11/11 wr 19 swaps 8 any 1 found 0 dump
 
 method getNewContainer(Ljx/zero/CPUState;)Ljx/scheduler/JAVARRobin$CPUStateContainer; {
  +START:   #1
        vR2 = vR0.ContainerPool;    
        if vR2!=null goto B57;   
  +B9:   #1
        vR0.ContainerPoolSize = (vR0.ContainerPoolSize+1);   
        b0 = out;    
        b1 = new java/lang/StringBuilder();    [ RR  i][ RR  iR]
        b0.println(b1.append@extra("RRobin: ContainerPool empty, new size: ").append@extra(vR0.ContainerPoolSize).toString@extra());   [R RR iii. RR.] 
        return new jx/scheduler/JAVARRobin$CPUStateContainer(vR0,vR1);   
  +B57:   #1
        vR0.ContainerPool = vR0.ContainerPool.next;   
        vR2.content = vR1;   
        vR2.next = 0;   
        return vR2;   
  +END:   #1
 }
// Register: rd 16/16 wr 9 swaps 3 any 1 found 0 getNewContainer
 
 method releaseContainer(Ljx/scheduler/JAVARRobin$CPUStateContainer;)V {
  +START:   #1
        vR1.next = vR0.ContainerPool;   
        vR0.ContainerPool = vR1;   
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 0 swaps 0 any 0 found 0 releaseContainer
}
