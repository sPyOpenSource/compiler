class java/util/Spliterators$EmptySpliterator$OfInt {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method tryAdvance(Ljava/util/function/Consumer;)Z {
  +START:   #1
        requireNonNull@special(vR1);   [   R]
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 tryAdvance
 
 method forEachRemaining(Ljava/util/function/Consumer;)V {
  +START:   #1
        requireNonNull@special(vR1);   [   R]
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 forEachRemaining
 
 method getExactSizeIfKnown()J {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getExactSizeIfKnown
 
 method hasCharacteristics(I)Z {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hasCharacteristics
 
 method getComparator()Ljava/util/Comparator; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getComparator
 
 method forEachRemaining(Ljava/util/function/IntConsumer;)V {
  +START:   #1
        vR0.forEachRemaining@special(vR1);   [   RR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 forEachRemaining
 
 method tryAdvance(Ljava/util/function/IntConsumer;)Z {
  +START:   #1
        return vR0.tryAdvance@special(vR1);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 tryAdvance
 
 method trySplit()Ljava/util/Spliterator$OfInt; {
  +START:   #1
        return (java/util/Spliterator$OfInt)(vR0.trySplit@special());   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 trySplit
 
 method trySplit()Ljava/util/Spliterator$OfPrimitive; {
  +START:   #1
        return (java/util/Spliterator$OfPrimitive)(vR0.trySplit@special());   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 trySplit
}
