class jx/bootrc/BootRC2 {
 
 method <init>(Ljx/zero/ReadOnlyMemory;)V {
  +START:   #1
        vR0.<init>@special();   [ RRR  R] 
        vR0.data = new char[256];   
        b1 = new java/util/Vector();    [ RRR  i.][ RRR  iR]
        vR0.domains = b1;   
        b1 = new java/util/Hashtable();    [ RRR  i.][ RRR  iR]
        vR0.components = b1;   
        vR0.curDomainSpec = 0;   
        vR0.mem = vR1;   
        vR2 = 0;    
        vR3 = 0;    
        vR4 = 0;    
  +B52:   #6
        vR5 = vR0.readline@special();    [RRR RRR  R.] 
        if vR5!=null goto B66;   
  +B63:   #1
        goto +B288;   [RRRR RRR  ..]
  +B66:   #1
        vR5 = vR5.trim@extra();    [RRRRRRRi RRR  R.] 
        if vR5.length@extra()==0 goto B52;   
  +B81:   #1
        if vR5.charAt@extra(0)!=35 goto B95;   
  +B92:   #1
        goto +B52;   [RRRRRRRi RRR  ..]
  +B95:   #1
        if vR5.charAt@extra(0)!=91 goto B238;   
  +B106:   #1
        vR2 = 0;    
        vR3 = 0;    
        if vR5.equals@extra("[Global]")==0 goto B140;   
  +B120:   #1
        b1 = new jx/bootrc/GlobalSpec();    [ RRR . i.][ RRR . iR]
        vR0.global = b1;   
        vR4 = vR0.global;    
        goto +B52;   [RRRRRRRi RRR . ..]
  +B140:   #1
        if vR5.startsWith@extra("[Domain")==0 goto B172;   
  +B150:   #1
        vR2 = new jx/bootrc/DomainSpec();    [ RRR . i.][ RRR . iR]
        vR4 = vR2;    
        vR0.domains.addElement@extra(vR2);   [RRRRRRRi RRR . RR] 
        goto +B52;   [RRRRRRRi RRR . ..]
  +B172:   #1
        if vR5.startsWith@extra("[Component ")==0 goto B228;   
  +B182:   #1
        vR6 = vR5.substring@extra(10,(vR5.length@extra()-1)).trim@extra();    [RRRRRRRi RRR .i R..] [RRRRRRRi RRR Ri iiR] 
        vR3 = new jx/bootrc/ComponentSpec(vR6);    [ RRR .i i..][ RRR .i iRR]
        vR4 = vR3;    
        vR0.components.put(vR6,vR3);   [RRRRRRRi RRR .i RRR] 
        goto +B52;   [RRRRRRRi RRR .i ...]
  -B228:   #1
        throw new java/lang/Error("Syntax error");   
  +B238:   #1
        vR6 = splitByChar@special(vR5,61);    [RRRRRRRi RRR .. iR.]
        vR7 = new jx/bootrc/Pair(vR6[0].trim@extra(),vR6[1].trim@extra());    [ RRR .. i..][ RRR .. iRRR]
        if vR4==null goto B285;   
  +B275:   #1
        vR4.pairs.addElement@extra(vR7);   [RRRRRRRi RRR .. RR..] 
  +B285:   #1
        goto +B52;   [RRRRRRRi RRR .. ....]
  +B288:   #1
        vi5 = 0;    
  +B291:   #1
        if vi5>=vR0.domains.size@extra() goto B441;   
  +B303:   #1
        vR6 = (jx/bootrc/DomainSpec)(vR0.domains.elementAt(vi5));    
  +B317:   #1
        vR7 = vR6.getStringArray("Components");    [RRRiR RRR i. RR..] 
        vR8 = new jx/bootrc/ComponentSpec()[vR7.length];    
        vi9 = 0;    
  +B337:   #1
        if vi9>=vR7.length goto B415;   
  +B345:   #1
        vR8[vi9] = (jx/bootrc/ComponentSpec)(vR0.components.get(vR7[vi9]));   
        if vR8[vi9]!=null goto B409;   
  -B373:   #1
        b0 = new java/lang/Error;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR .. i...][ RRR .. iR..]
        b1.<init>@special(b2.append@extra("ComponentSpec "").append@extra(vR7[vi9]).append@extra("" not found.").toString@extra());   [RRRiRRRi RRR iiii.. RR..] 
        throw b0;   
  +B409:   #1
        vi9++;   
        goto +B337;   [RRRiRRRi RRR ...... ....]
  +B415:   #1
        vR6.setComponents(vR8);   [RRRiRRRi RRR ...... RR..] 
  +B422:   #1
        goto +B435;   [RRRiRRRi RRR ...... ....]
  +H425<caught exception>:   #1 reference
        vR7 = <caught exception>;    
        out.println("No components specified for domain");   [RRRRRRRi RRR i..... RR..] 
  +B435:   #1
        vi5++;   
        goto +B291;   [RRRiRRRi RRR ...... ....]
  +B441:   #1
        return;   
  +END:   #1
EXCEPTIONHANDLER-TABLE:
317 - 422 handler 425 type 147
 }
// Register: rd 61/61 wr 50 swaps 11 any 9 found 1 <init>
 
 method getGlobalSpec()Ljx/bootrc/GlobalSpec; {
  +START:   #1
        return vR0.global;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getGlobalSpec
 
 method nextDomainSpec()Ljx/bootrc/DomainSpec; {
  +START:   #1
        if vR0.curDomainSpec<vR0.domains.size@extra() goto B16;   
  +B14:   #1
        return 0;   
  +B16:   #1
        b0 = vR0.domains;    
        b2 = vR0.curDomainSpec;    
        b1 = b2;    
        vR0.curDomainSpec = (b2+1);   
        return (jx/bootrc/DomainSpec)(b0.elementAt(b1));   
  +END:   #1
 }
// Register: rd 11/11 wr 5 swaps 0 any 1 found 0 nextDomainSpec
 
 method splitByChar(Ljava/lang/String;C)[Ljava/lang/String; {
  +START:   #1
        vi2 = 0;    
        vR3 = new java/util/Vector();    [ R  i][ R  iR]
  +B10:   #1
        if vi2!=0 goto B65;   
  +B14:   #1
        vi4 = vR0.indexOf@extra(vi1);    [iR R  iR] 
        if vi4!=-1 goto B35;   
  +B27:   #1
        vi2 = 1;    
        vR5 = vR0;    
        goto +B56;   [iRiR R  ..]
  +B35:   #1
        vR5 = vR0.substring@extra(0,vi4);    [iRiR R  iiR] 
        vR0 = vR0.substring@extra((vi4+1)).trim@extra();    [iRiR R i. R..] [iRiR R iR iR.] 
  +B56:   #1
        vR3.addElement@extra(vR5);   [iRiR R .. RR.] 
        goto +B10;   [iRiR R .. ...]
  +B65:   #1
        vR4 = new java/lang/String()[vR3.size@extra()];    
        vR3.copyInto(vR4);   [iRRR R .. RR.] 
        return vR4;   
  +END:   #1
 }
// Register: rd 11/11 wr 9 swaps 1 any 3 found 0 splitByChar
 
 method readline()Ljava/lang/String; {
  +START:   #1
        vi2 = 0;    
  +B2:   #1
        if vR0.pos>=vR0.mem.size() goto B62;   
  +B18:   #1
        b0 = vR0.mem.get8(vR0.pos);    [?i b i iR] 
        vi1 = b0;    
        if b0==10 goto B62;   
  +B38:   #1
        vR0.data[vi2] = (char)vi1;   
        vR0.pos = (vR0.pos+1);   
        vi2++;   
        goto +B2;   [ii b . ..]
  +B62:   #2
        if vR0.pos<vR0.mem.size() goto B84;   
  +B78:   #1
        if vi2!=0 goto B84;   
  +B82:   #1
        return 0;   
  +B84:   #2
        vR0.pos = (vR0.pos+1);   
        vR3 = new java/lang/String(vR0.data,0,vi2);    [ b . i.][ b . iiiRR]
        return vR3;   
  +END:   #1
 }
// Register: rd 23/23 wr 9 swaps 1 any 5 found 0 readline
}
