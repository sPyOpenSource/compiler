class java/text/NumberFormat {
 
 method getInstance()Ljava/text/NumberFormat; {
  +START:   #1
        return getInstance@special(getDefault@special());   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 getInstance
 
 method getInstance(Ljava/util/Locale;)Ljava/text/NumberFormat; {
  +START:   #1
        return getNumberInstance@special(vR0);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getInstance
 
 method getNumberInstance()Ljava/text/NumberFormat; {
  +START:   #1
        return getNumberInstance@special(getDefault@special());   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 getNumberInstance
 
 method getNumberInstance(Ljava/util/Locale;)Ljava/text/NumberFormat; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getNumberInstance
 
 method getCurrencyInstance()Ljava/text/NumberFormat; {
  +START:   #1
        return getCurrencyInstance@special(getDefault@special());   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 getCurrencyInstance
 
 method getCurrencyInstance(Ljava/util/Locale;)Ljava/text/NumberFormat; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getCurrencyInstance
 
 method getPercentInstance()Ljava/text/NumberFormat; {
  +START:   #1
        return getPercentInstance@special(getDefault@special());   
  +END:   #1
 }
// Register: rd 0/0 wr 1 swaps 0 any 0 found 0 getPercentInstance
 
 method getPercentInstance(Ljava/util/Locale;)Ljava/text/NumberFormat; {
  +START:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 getPercentInstance
 
 method getAvailableLocales()[Ljava/util/Locale; {
  +START:   #1
        vR0 = new java/util/Locale()[1];    
        vR0[0] = ENGLISH;   
        return vR0;   
  +END:   #1
 }
// Register: rd 2/2 wr 1 swaps 0 any 0 found 0 getAvailableLocales
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 <init>
 
 method getMaximumIntegerDigits()I {
  +START:   #1
        return vR0.maximumIntegerDigits;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMaximumIntegerDigits
 
 method setMaximumIntegerDigits(I)V {
  +START:   #1
        vR0.maximumIntegerDigits = vi1;   
        if vR0.getMinimumIntegerDigits@this()<=vi1 goto B18;   
  +B13:   #1
        vR0.setMinimumIntegerDigits@this(vi1);   [   iR] 
  +B18:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 setMaximumIntegerDigits
 
 method getMinimumIntegerDigits()I {
  +START:   #1
        return vR0.minimumIntegerDigits;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMinimumIntegerDigits
 
 method setMinimumIntegerDigits(I)V {
  +START:   #1
        vR0.minimumIntegerDigits = vi1;   
        if vR0.getMaximumIntegerDigits@this()>=vi1 goto B18;   
  +B13:   #1
        vR0.setMaximumIntegerDigits@this(vi1);   [   iR] 
  +B18:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 setMinimumIntegerDigits
 
 method getMaximumFractionDigits()I {
  +START:   #1
        return vR0.maximumFractionDigits;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMaximumFractionDigits
 
 method setMaximumFractionDigits(I)V {
  +START:   #1
        vR0.maximumFractionDigits = vi1;   
        if vR0.getMinimumFractionDigits@this()<=vi1 goto B18;   
  +B13:   #1
        vR0.setMinimumFractionDigits@this(vi1);   [   iR] 
  +B18:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 setMaximumFractionDigits
 
 method getMinimumFractionDigits()I {
  +START:   #1
        return vR0.minimumFractionDigits;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 getMinimumFractionDigits
 
 method setMinimumFractionDigits(I)V {
  +START:   #1
        vR0.minimumFractionDigits = vi1;   
        if vR0.getMaximumFractionDigits@this()>=vi1 goto B18;   
  +B13:   #1
        vR0.setMaximumFractionDigits@this(vi1);   [   iR] 
  +B18:   #1
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 setMinimumFractionDigits
 
 method isGroupingUsed()Z {
  +START:   #1
        return vR0.groupingUsed;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isGroupingUsed
 
 method setGroupingUsed(Z)V {
  +START:   #1
        vR0.groupingUsed = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setGroupingUsed
 
 method isParseIntegerOnly()Z {
  +START:   #1
        return vR0.parseIntegerOnly;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 isParseIntegerOnly
 
 method setParseIntegerOnly(Z)V {
  +START:   #1
        vR0.parseIntegerOnly = vi1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 setParseIntegerOnly
 
 method format(J)Ljava/lang/String; {
  +START:   #1
        vR3 = new java/lang/StringBuffer("");    [ R??R  i][ R??R . iRR]
        b3 = new java/text/FieldPosition(0);    [ R??R . i..][ R??R . iiR]
        vR0.format@this(vl1,vR3,b3);   [?R R??R . RR??R] 
        return vR3.toString();   
  +END:   #1
 }
// Register: rd 5/5 wr 4 swaps 0 any 0 found 0 format
 
 method format(D)Ljava/lang/String; {
  +START:   #1
        vR3 = new java/lang/StringBuffer("");    [ R??R  i][ R??R . iRR]
        b3 = new java/text/FieldPosition(1);    [ R??R . i..][ R??R . iiR]
        vR0.format@this(vd1,vR3,b3);   [?R R??R . RR??R] 
        return vR3.toString();   
  +END:   #1
 }
// Register: rd 5/5 wr 4 swaps 0 any 0 found 0 format
 
 method format(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer; {
  -START:   #1
        throw new java/lang/Error("NOT IMPLEMENTED");   
  +END:   #1
 }
// Register: rd 1/1 wr 1 swaps 0 any 0 found 0 format
 
 method parse(Ljava/lang/String;)Ljava/lang/Number; {
  +START:   #1
        vR2 = new java/text/ParsePosition(0);    [ R  i][ R . iiR]
        vR3 = vR0.parse@this(vR1,vR2);    [R R . RRR] 
        if vR2.getIndex()!=0 goto B34;   
  -B23:   #1
        throw new java/text/ParseException("Unable to parse string into Number",0);   
  +B34:   #1
        return vR3;   
  +END:   #1
 }
// Register: rd 5/5 wr 4 swaps 0 any 0 found 0 parse
 
 method parseObject(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object; {
  +START:   #1
        return vR0.parse@this(vR1,vR2);   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 parseObject
 
 method hashCode()I {
  +START:   #1
        return identityHashCode@special(vR0);   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 hashCode
 
 method equals(Ljava/lang/Object;)Z {
  +START:   #1
        if vR1!=null goto B6;   
  +B4:   #1
        return 0;   
  +B6:   #1
        if (vR1 instanceof java/text/NumberFormat)!=0 goto B15;   
  +B13:   #1
        return 0;   
  +B15:   #1
        return 1;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 1 found 0 equals
}
