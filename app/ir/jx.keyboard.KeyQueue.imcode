class jx/keyboard/KeyQueue {
 
 method <init>(I)V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.length = vi1;   
        vR0.queue = new int[vR0.length];   
        vR0.readIdx = (vR0.length-1);   
        vR0.writeIdx = 0;   
        vR0.cpuManager = (jx/zero/CPUManager)(getInitialNaming@special().lookup("CPUManager"));   
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 3 swaps 1 any 0 found 0 <init>
 
 method append(I)Z {
  +START:   #1
        if vR0.readIdx!=vR0.writeIdx goto B13;   
  +B11:   #1
        return 0;   
  +B13:   #1
        vR0.queue[vR0.writeIdx] = vi1;   
        vR0.writeIdx = ((vR0.writeIdx+1)%vR0.length);   
        return 1;   
  +END:   #1
 }
// Register: rd 8/8 wr 0 swaps 0 any 1 found 0 append
 
 method flush()V {
  +START:   #1
        vR0.readIdx = (vR0.length-1);   
        vR0.writeIdx = 0;   
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 flush
 
 method available()I {
  +START:   #1
        return (((vR0.writeIdx-vR0.readIdx)-1)%vR0.length);   
  +END:   #1
 }
// Register: rd 3/3 wr 0 swaps 0 any 0 found 0 available
 
 method get()I {
  +START:   #1
        vi1 = ((vR0.readIdx+1)%vR0.length);    
        if vi1!=vR0.writeIdx goto B22;   
  +B20:   #1
        return -1;   
  +B22:   #1
        vR0.readIdx = vi1;   
        return vR0.queue[vR0.readIdx];   
  +END:   #1
 }
// Register: rd 8/8 wr 1 swaps 0 any 1 found 0 get
 
 method waitForCharacter()V {
  +START:   #2
        if ((vR0.readIdx+1)%vR0.length)!=vR0.writeIdx goto B43;   
  +B18:   #1
        vR0.waiting = vR0.cpuManager.getCPUState();   
        vR0.cpuManager.block();   [   R] 
        goto +START;   [   .]
  +B43:   #1
        return;   
  +END:   #1
 }
// Register: rd 6/6 wr 0 swaps 0 any 0 found 0 waitForCharacter
 
 method notifyWaiter()V {
  +START:   #1
        return;   
  +END:   #1
 }
// Register: rd 0/0 wr 0 swaps 0 any 0 found 0 notifyWaiter
}
