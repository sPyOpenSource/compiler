class jx/formats/LittleEndianOutputStream {
 
 method <init>(Ljava/io/OutputStream;)V {
  +START:   #1
        vR0.<init>@special(vR1);   [   RR] 
        vR0.doChecksum = 1;   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method writeByte(B)V {
  +START:   #1
        vR0.write@this(vi1);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 1/1 wr 0 swaps 0 any 0 found 0 writeByte
 
 method writeShort(S)V {
  +START:   #1
        vR0.write@this((vi1 & 255));   [  i iR] 
        vR0.write@this(((vi1 >>> 8) & 255));   [  ii iR] 
        return;   
  +END:   #1
 }
// Register: rd 4/4 wr 2 swaps 2 any 0 found 0 writeShort
 
 method writeInt(I)V {
  +START:   #1
        vR0.write@this((vi1 & 255));   [  i iR] 
        vR0.write@this(((vi1 >>> 8) & 255));   [  ii iR] 
        vR0.write@this(((vi1 >>> 16) & 255));   [  iii iR] 
        vR0.write@this(((vi1 >>> 24) & 255));   [  iiii iR] 
        return;   
  +END:   #1
 }
// Register: rd 8/8 wr 4 swaps 4 any 0 found 0 writeInt
 
 method writeString(Ljava/lang/String;)V {
  +START:   #1
        vi2 = vR1.length@extra();    [   R] 
        vR3 = new char[vi2];    
        vR1.getChars@extra(0,vi2,vR3,0);   [iR   iRiiR] 
        vR0.writeInt@extra(vi2);   [iR   iR...] 
        vi4 = 0;    
  +B25:   #1
        if vi4>=vi2 goto B49;   
  +B31:   #1
        vR0.write@this((vR3[vi4] & 255));   [iRi  i cR...] 
        vi4++;   
        goto +B25;   [iRi  i .....]
  +B49:   #1
        return;   
  +END:   #1
 }
// Register: rd 10/10 wr 5 swaps 1 any 2 found 0 writeString
 
 method writeChecksum()V {
  +START:   #1
        vR0.doChecksum = 0;   
        vR0.writeInt@extra(vR0.checksum);   [  i iR] 
        return;   
  +END:   #1
 }
// Register: rd 3/3 wr 1 swaps 1 any 0 found 0 writeChecksum
 
 method write(I)V {
  +START:   #1
        if vR0.doChecksum==0 goto B21;   
  +B7:   #1
        vR0.checksum = ((vR0.checksum ^ vi1) & 255);   
  +B21:   #1
        vR0.write@special(vi1);   [   iR] 
        return;   
  +END:   #1
 }
// Register: rd 5/5 wr 0 swaps 0 any 0 found 0 write
}
