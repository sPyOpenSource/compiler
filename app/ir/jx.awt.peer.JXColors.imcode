class jx/awt/peer/JXColors {
 
 method <init>()V {
  +START:   #1
        vR0.<init>@special();   [   R] 
        vR0.colorFile = "jxcolors.ini";   
        return;   
  +END:   #1
 }
// Register: rd 2/2 wr 0 swaps 0 any 0 found 0 <init>
 
 method parseColor(Ljx/bootrc/ConfigFile;Ljava/lang/String;)Ljava/awt/Color; {
  +START:   #1
        vR3 = vR1.get(vR2);    [ R  RR] 
        if vR3==null goto B75;   
  +B10:   #1
        vR4 = new java/util/StringTokenizer(vR3,",");    [ R  i.][ R . iRRR]
        vi5 = parseInt@special(vR4.nextToken().trim@extra());    [RR R R R...]
        vi6 = parseInt@special(vR4.nextToken().trim@extra());    [RRi R RR R...]
        vi7 = parseInt@special(vR4.nextToken().trim@extra());    [RRii R RRR R...]
        return new java/awt/Color(vi5,vi6,vi7);   
  +B75:   #1
        return 0;   
  +END:   #1
 }
// Register: rd 11/11 wr 13 swaps 0 any 1 found 0 parseColor
 
 method loadColorInformation()V {
  +START:   #1
        vR1 = (jx/zero/BootFS)(getInitialNaming@special().lookup("BootFS"));    
        if vR1!=null goto B28;   
  -B18:   #1
        throw new java/lang/Error("No BootFS found!");   
  +B28:   #1
        vR2 = vR1.getFile(vR0.colorFile);    [R RRR i. RR.] 
        if vR2!=null goto B78;   
  -B43:   #1
        b0 = new java/lang/Error;    
        b1 = b0;    
        b2 = new java/lang/StringBuilder();    [ RRR .. i..][ RRR .. iR.]
        b1.<init>@special(b2.append@extra("File ").append@extra(vR0.colorFile).append@extra(" not found!").toString@extra());   [RR RRR iiii.. RR..] 
        throw b0;   
  +B78:   #1
        vR3 = new jx/bootrc/ConfigFile(vR2);    [ RRR ...... i...][ RRR ...... iRR.]
        normalTextColor = vR0.parseColor@special(vR3,"normalTextColor");   
        menuTextColor = vR0.parseColor@special(vR3,"menuTextColor");   
        textTextColor = vR0.parseColor@special(vR3,"textTextColor");   
        disabledTextColor = vR0.parseColor@special(vR3,"disabledTextColor");   
        normalBgColor = vR0.parseColor@special(vR3,"normalBgColor");   
        menuBgColor = vR0.parseColor@special(vR3,"menuBgColor");   
        menuSelTextColor = vR0.parseColor@special(vR3,"menuSelTextColor");   
        menuSelBgColor = vR0.parseColor@special(vR3,"menuSelBgColor");   
        textBgColor = vR0.parseColor@special(vR3,"textBgColor");   
        disabledBgColor = vR0.parseColor@special(vR3,"disabledBgColor");   
        arrowColor = vR0.parseColor@special(vR3,"arrowColor");   
        disabledArrowColor = vR0.parseColor@special(vR3,"disabledArrowColor");   
        caretColor = vR0.parseColor@special(vR3,"caretColor");   
        hoverColor = vR0.parseColor@special(vR3,"hoverColor");   
        focusColor = vR0.parseColor@special(vR3,"focusColor");   
        checkboxBgColor = vR0.parseColor@special(vR3,"checkboxBgColor");   
        checkboxFgColor = vR0.parseColor@special(vR3,"checkboxFgColor");   
        return;   
  +END:   #1
 }
// Register: rd 47/47 wr 53 swaps 23 any 3 found 0 loadColorInformation
 
 method <clinit>()V {
  +START:   #1
        normalTextColor = black;   
        menuTextColor = black;   
        textTextColor = black;   
        disabledTextColor = gray;   
        normalBgColor = lightGray;   
        menuBgColor = lightGray;   
        menuSelTextColor = white;   
        menuSelBgColor = blue;   
        textBgColor = white;   
        disabledBgColor = lightGray;   
        arrowColor = black;   
        disabledArrowColor = gray;   
        caretColor = black;   
        hoverColor = gray;   
        focusColor = black;   
        checkboxBgColor = white;   
        checkboxFgColor = black;   
        return;   
  +END:   #1
 }
// Register: rd 17/17 wr 17 swaps 0 any 0 found 0 <clinit>
}
