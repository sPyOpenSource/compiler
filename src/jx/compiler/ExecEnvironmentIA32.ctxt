#BlueJ class context
comment0.target=ExecEnvironmentIA32
comment0.text=\n\n\ @author\ Christian\ Wawersich\n
comment1.params=classFinder\ opts
comment1.target=ExecEnvironmentIA32(ClassFinder,\ CompilerOptions)
comment10.params=
comment10.target=imcode.MethodStackFrame\ getMethodStackFrame()
comment11.params=
comment11.target=void\ addTimerSP()
comment12.params=
comment12.target=void\ addTimerEP()
comment13.params=node\ reg\ bcPosition
comment13.target=void\ codeCheckReference(imcode.graph.IMNode,\ nativecode.Reg,\ int)
comment13.text=\ \n\tat\ least\ 2\ clks\n\ @param\ node\n\ @param\ reg\n\ @param\ bcPosition\n\ @throws\ jx.compiler.CompileException\n
comment14.params=node\ reg\ bcPosition
comment14.target=void\ codeCheckMagic(imcode.graph.IMNode,\ nativecode.Reg,\ int)
comment15.params=node\ reg\ bcPosition
comment15.target=void\ codeCheckDivZero(imcode.graph.IMNode,\ nativecode.Reg,\ int)
comment16.params=node\ array\ index\ bcPosition
comment16.target=void\ codeCheckArrayRange(imcode.graph.IMNode,\ nativecode.Reg,\ int,\ int)
comment16.text=\n\ \ \ \ \ \ \ \ at\ least\ 3-5\ clks\n\ @param\ node\n\ @param\ array\n\ @param\ index\n\ @param\ bcPosition\n\ @throws\ jx.compiler.CompileException\n
comment17.params=node\ array\ index\ bcPosition
comment17.target=void\ codeCheckArrayRange(imcode.graph.IMNode,\ nativecode.Reg,\ nativecode.Reg,\ int)
comment18.params=node\ classCPEntry\ result
comment18.target=void\ codeNewObject(imcode.graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ nativecode.Reg)
comment19.params=node\ classCPEntry\ methodRefCPEntry\ args\ result
comment19.target=void\ codeCompactNew(imcode.graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ jx.classfile.constantpool.MethodRefCPEntry,\ imcode.graph.IMOperant[],\ nativecode.Reg)
comment2.params=container
comment2.target=void\ setCodeContainer(imcode.CodeContainer)
comment20.params=node\ type\ size\ result
comment20.target=void\ codeNewArray(imcode.graph.IMNode,\ int,\ imcode.graph.IMOperant,\ nativecode.Reg)
comment21.params=node\ classCPEntry\ size\ result
comment21.target=void\ codeNewObjectArray(imcode.graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ imcode.graph.IMOperant,\ nativecode.Reg)
comment22.params=node\ array\ datatype\ index\ result\ bcPosition
comment22.target=void\ codeGetArrayField(imcode.graph.IMNode,\ nativecode.Reg,\ int,\ int,\ nativecode.Reg,\ int)
comment23.params=node\ array\ datatype\ index\ result\ bcPosition
comment23.target=void\ codeGetArrayField(imcode.graph.IMNode,\ nativecode.Reg,\ int,\ nativecode.Reg,\ nativecode.Reg,\ int)
comment24.params=node\ array\ datatype\ index\ result\ bcPosition
comment24.target=void\ codeGetArrayFieldLong(imcode.graph.IMNode,\ nativecode.Reg,\ int,\ nativecode.Reg,\ nativecode.Reg64,\ int)
comment25.params=node\ array\ datatype\ index\ value\ bcPosition
comment25.target=void\ codePutArrayField(imcode.graph.IMNode,\ nativecode.Reg,\ int,\ int,\ nativecode.Reg,\ int)
comment26.params=node\ array\ datatype\ index\ value\ bcPosition
comment26.target=void\ codePutArrayField(imcode.graph.IMNode,\ nativecode.Reg,\ int,\ nativecode.Reg,\ nativecode.Reg,\ int)
comment27.params=node\ type\ oprs\ result
comment27.target=void\ codeNewMultiArray(imcode.graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ imcode.graph.IMOperant[],\ nativecode.Reg)
comment28.params=node\ array\ result
comment28.target=void\ codeGetArrayLength(imcode.graph.IMNode,\ nativecode.Reg,\ nativecode.Reg)
comment29.params=node\ exception\ bcPosition
comment29.target=void\ codeThrow(imcode.graph.IMNode,\ int,\ int)
comment3.params=aClass
comment3.target=void\ setCurrentlyCompiling(execenv.BCClass)
comment30.params=node\ exception\ bcPosition
comment30.target=void\ codeThrow(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ int)
comment31.params=node\ classCPEntry\ objRef\ bcPosition
comment31.target=void\ codeCheckCast(imcode.graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ nativecode.Reg,\ int)
comment32.params=node\ classCPEntry\ objRef\ regEAX\ bcPosition
comment32.target=void\ codeInstanceOf(imcode.graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ nativecode.Reg,\ nativecode.Reg,\ int)
comment33.params=node\ obj\ bcPosition
comment33.target=void\ codeMonitorEnter(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ int)
comment34.params=node\ obj\ bcPosition
comment34.target=void\ codeMonitorLeave(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ int)
comment35.params=cpEntry
comment35.target=symbols.SymbolTableEntryBase\ getStringRef(jx.classfile.constantpool.StringCPEntry)
comment36.params=cpEntry\ result\ bcPosition
comment36.target=void\ codeLoadStringRef(jx.classfile.constantpool.StringCPEntry,\ nativecode.Reg,\ int)
comment37.params=node\ fieldRefCPEntry\ objRef\ result\ bcPosition
comment37.target=void\ codeGetField(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg,\ nativecode.Reg,\ int)
comment38.params=node\ fieldRefCPEntry\ objRef\ result\ bcPosition
comment38.target=void\ codeGetFieldLong(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg,\ nativecode.Reg64,\ int)
comment39.params=node\ className\ fieldOffset\ addr
comment39.target=void\ codeGetStaticFieldAddr(imcode.graph.IMNode,\ java.lang.String,\ int,\ nativecode.Reg)
comment4.params=
comment4.target=execenv.CompilerOptionsInterface\ getCompilerOptions()
comment40.params=node\ fieldRefCPEntry\ result\ bcPosition
comment40.target=void\ codeGetStaticField(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg,\ int)
comment41.params=node\ fieldRefCPEntry\ result\ bcPosition
comment41.target=void\ codeGetStaticFieldLong(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg64,\ int)
comment42.params=node\ fieldRefCPEntry\ objRef\ value\ bcPosition
comment42.target=void\ codePutField(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg,\ nativecode.Reg,\ int)
comment43.params=node\ fieldRefCPEntry\ objRef\ value\ bcPosition
comment43.target=void\ codePutFieldLong(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg,\ nativecode.Reg64,\ int)
comment44.params=node\ fieldRefCPEntry\ value\ bcPosition
comment44.target=void\ codePutStaticField(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg,\ int)
comment45.params=node\ fieldRefCPEntry\ value\ bcPosition
comment45.target=void\ codePutStaticFieldLong(imcode.graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ nativecode.Reg64,\ int)
comment46.params=node\ lOpr\ rOpr\ result\ bcPosition
comment46.target=void\ codeLongMul(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant,\ nativecode.Reg64,\ int)
comment47.params=node\ lOpr\ rOpr\ result\ bcPosition
comment47.target=void\ codeLongDiv(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant,\ nativecode.Reg64,\ int)
comment48.params=node\ lOpr\ rOpr\ result\ bcPosition
comment48.target=void\ codeLongRem(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant,\ nativecode.Reg64,\ int)
comment49.params=node\ lOpr\ rOpr\ result\ bcPosition
comment49.target=void\ codeLongShr(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant,\ nativecode.Reg64,\ int)
comment5.params=methodRefCPEntry
comment5.target=execenv.BCMethod\ getBCMethod(jx.classfile.constantpool.MethodRefCPEntry)
comment50.params=node\ lOpr\ rOpr\ result\ bcPosition
comment50.target=void\ codeLongShl(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant,\ nativecode.Reg64,\ int)
comment51.params=node\ lOpr\ rOpr\ result\ bcPosition
comment51.target=void\ codeLongUShr(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant,\ nativecode.Reg64,\ int)
comment52.params=node\ lOpr\ rOpr\ result\ bcPosition
comment52.target=void\ codeLongCompare(imcode.graph.IMNode,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant,\ nativecode.Reg,\ int)
comment53.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment53.target=void\ codeVirtualCall(imcode.graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg,\ int)
comment54.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment54.target=void\ codeSpecialCall(imcode.graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg,\ int)
comment55.params=node\ interfaceRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment55.target=void\ codeInterfaceCall(imcode.graph.IMNode,\ jx.classfile.constantpool.InterfaceMethodRefCPEntry,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg,\ int)
comment56.params=node\ methodRefCPEntry\ args\ datatype\ result\ bcPosition
comment56.target=void\ codeStaticCall(imcode.graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg,\ int)
comment57.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment57.target=void\ codeVirtualCallLong(imcode.graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg64,\ int)
comment58.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment58.target=void\ codeSpecialCallLong(imcode.graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg64,\ int)
comment59.params=node\ interfaceRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment59.target=void\ codeInterfaceCallLong(imcode.graph.IMNode,\ jx.classfile.constantpool.InterfaceMethodRefCPEntry,\ imcode.graph.IMOperant,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg64,\ int)
comment6.params=level
comment6.target=boolean\ doOptimize(int)
comment60.params=node\ methodRefCPEntry\ args\ datatype\ result\ bcPosition
comment60.target=void\ codeStaticCallLong(imcode.graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ imcode.graph.IMOperant[],\ int,\ nativecode.Reg64,\ int)
comment61.params=thisPtr\ args\ obj\ bcPosition
comment61.target=int\ codeVirtualPushArgs(imcode.graph.IMOperant,\ imcode.graph.IMOperant[],\ nativecode.Reg,\ int)
comment62.params=args
comment62.target=int\ codeStaticPushArgs(imcode.graph.IMOperant[])
comment63.params=entries\ result\ datatype
comment63.target=void\ codeStackCleanup(int,\ nativecode.Reg,\ int)
comment64.params=entries\ result
comment64.target=void\ codeStackCleanupLong(int,\ nativecode.Reg64)
comment65.params=exception\ bcPosition\ back
comment65.target=symbols.UnresolvedJump\ createExceptionCall(int,\ int,\ symbols.UnresolvedJump)
comment65.text=\ \n\tmethods\ for\ exception\ managment\n\ @param\ exception\n\ @param\ bcPosition\n\ @param\ back\n\ @return\ \n
comment66.params=exception\ bcPosition
comment66.target=symbols.UnresolvedJump\ createExceptionCall(int,\ int)
comment67.params=
comment67.target=void\ codeExceptionCalls()
comment68.params=node\ InstructionPointer
comment68.target=void\ codeStackMap(imcode.graph.IMNode,\ int)
comment68.text=\n\ \ \ \ \ \ \ helper\n\ @param\ node\n\ @param\ InstructionPointer\n\ @throws\ jx.compiler.CompileException\n
comment69.params=fieldRefCPEntry
comment69.target=int\ getFieldOffset(jx.classfile.constantpool.FieldRefCPEntry)
comment7.params=
comment7.target=int\ getExtraStackSpace()
comment70.params=method\ name\ sig
comment70.target=boolean\ isMethod(jx.classfile.constantpool.MethodRefCPEntry,\ java.lang.String,\ java.lang.String)
comment71.params=
comment71.target=void\ initPlugins()
comment72.params=className
comment72.target=plugins.CompilerPlugin\ findPlugin(java.lang.String)
comment8.params=
comment8.target=void\ codeProlog()
comment9.params=
comment9.target=void\ codeEpilog()
numComments=73
