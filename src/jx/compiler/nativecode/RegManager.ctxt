#BlueJ class context
comment0.target=RegManager
comment0.text=\n\ \n
comment1.params=
comment1.target=RegManager()
comment10.params=
comment10.target=Reg64\ chooseLongRegister()
comment11.params=blocked
comment11.target=Reg64\ chooseLongRegister(Reg64)
comment12.params=blocked\ datatype
comment12.target=Reg\ chooseAndAllocIntRegister(Reg,\ int)
comment12.text=\n\ \ \ \ \ \ \ Reg\ chooseAndAllocIntRegister\n\n\ \ \ \ \ \ \ Waehlt\ ein\ physikalisches\ Register\ fuer\ ein\ virtuelles\ Register\ aus,\ mit\n\ \ \ \ \ \ \ der\ Einschraenke\ nicht\ die\ Register\ der\ Argumente\ zu\ nehmen.\n
comment13.params=reg
comment13.target=Reg\ getIntRegister(Reg)
comment13.text=\n\ \ \ \ \ \ \ getIntRegister\n\n\ \ \ \ \ \ \ Gibt\ ein\ zu\ einem\ festgelegten\ physikalischen\ Register\ passendes\ virtuelles\ Register\n\ \ \ \ \ \ \ zurueck.\n
comment14.params=reg
comment14.target=Reg64\ getLongRegister(Reg64)
comment14.text=\n\ \ \ \ \ \ \ getLongRegister\n\n\ \ \ \ \ \ \ Gibt\ ein\ zu\ einem\ festgelegten\ physikalischen\ Register\ passendes\ virtuelles\ Register\n\ \ \ \ \ \ \ zurueck.\n
comment15.params=any\ reg
comment15.target=void\ setAnyIntRegister(Reg,\ Reg)
comment15.text=\n\ \ \ \ \ \ \ Legt\ ein\ physikalisches\ Register\ fuer\ den\ Platzhalter\ "any"\ fest.\n
comment16.params=
comment16.target=void\ startBasicBlock()
comment16.text=\n\ \ \ \ \ \ \ Wird\ am\ Anfang\ eines\ Basisblockes\ aufgerufen.\n
comment17.params=
comment17.target=void\ endBasicBlock()
comment17.text=\n\ \ \ \ \ \ \ Wird\ am\ Ende\ eines\ jeden\ Basisblockes\ aufgerufen.\n
comment18.params=
comment18.target=boolean\ hasFreeIntRegister()
comment18.text=\n\ \ \ \ \ \ \ Dient\ zur\ Abfrage\ ob\ noch\ freie\ Register\ zur\ Verfuehgung\ stehen.\n
comment19.params=reg\ datatype
comment19.target=void\ allocIntRegister(Reg,\ int)
comment19.text=\n\ \ \ \ \ \ \ allocIntRegister(Reg\ reg,int\ datatype)\ \n\n\ \ \ \ \ \ \ Belegt\ das\ physikalische\ Register\ fuer\ ein\ virtuelles\ Register\ (reg).\ Ist\ das\n\ \ \ \ \ \ \ physikalische\ Register\ bereits\ Belegt\ wird\ der\ Inhalt\ des\ belegenden\ Registers\ \n\ \ \ \ \ \ \ auf\ dem\ Stack\ gesichert.\ Handelt\ es\ sich\ beim\ virtuellen\ Register\ um\ den\ \n\ \ \ \ \ \ \ Platzhalter\ "any"\ so\ wird\ automatisch\ ein\ Register\ ausgewaehlt.\n\n
comment2.params=container
comment2.target=void\ init(jx.compiler.imcode.CodeContainer)
comment20.params=reg\ prefer\ datatype
comment20.target=void\ allocIntRegister(Reg,\ Reg,\ int)
comment20.text=\ \n\tallocIntRegister(Reg\ reg,Reg\ prefer,int\ datatype)\n\n\tVerhaelt\ sich\ wie\ allocIntRegister(Reg\ reg,int\ datatype)\ mit\ dem\ Unterschied,\ dass\ fuer\n\tden\ Platzhalter\ "any"\ ein\ bevorzugtes\ Register\ angegeben\ werden\ kann.\n
comment21.params=reg\ prefer
comment21.target=void\ allocLongRegister(Reg64,\ Reg64)
comment21.text=\ \n\tallocLongRegister(Reg64\ reg,\ Reg64\ prefer)\n\n\tVerhaelt\ sich\ wie\ allocLongRegister(Reg\ reg)\ mit\ dem\ Unterschied,\ dass\ fuer\n\tden\ Platzhalter\ "any"\ ein\ bevorzugtes\ Register\ angegeben\ werden\ kann.\n
comment22.params=reg
comment22.target=void\ allocLongRegister(Reg64)
comment22.text=\n\ \ \ \ \ \ \ allocLongRegister(Reg64\ reg)\ \n\n\ \ \ \ \ \ \ Belegt\ das\ physikalische\ Register\ fuer\ ein\ virtuelles\ Register\ (reg).\ Ist\ das\n\ \ \ \ \ \ \ physikalische\ Register\ bereits\ Belegt\ wird\ der\ Inhalt\ des\ belegenden\ Registers\ \n\ \ \ \ \ \ \ auf\ dem\ Stack\ gesichert.\ Handelt\ es\ sich\ beim\ virtuellen\ Register\ um\ den\ \n\ \ \ \ \ \ \ Platzhalter\ "any"\ so\ wird\ automatisch\ ein\ Register\ ausgewaehlt.\n\n
comment23.params=reg
comment23.target=void\ readIntRegister(Reg)
comment23.text=\ \n\treadIntRegister(Reg\ reg)\n\n\tMuss\ immer\ aufgerufen\ werden\ bevor\ auf\ den\ Inhalt\ eines\ virtuellen\ Registers\n\tlesend\ Zugegriffen\ werden\ soll.\ Die\ Methode\ stellt\ sicher\ das\ verdraengte\ \n\tRegister\ wieder\ vom\ Stack\ in\ das\ Register\ geladen\ werden.\n
comment24.params=reg
comment24.target=boolean\ known(Reg)
comment25.params=reg
comment25.target=void\ readLongRegister(Reg64)
comment25.text=\ \n\treadLongRegister(Reg\ reg)\n\n\tMuss\ immer\ aufgerufen\ werden\ bevor\ auf\ den\ Inhalt\ eines\ virtuellen\ Registers\n\tlesend\ Zugegriffen\ werden\ soll.\ Die\ Methode\ stellt\ sicher\ das\ verdraengte\ \n\tRegister\ wieder\ vom\ Stack\ in\ das\ Register\ geladen\ werden.\n
comment26.params=reg
comment26.target=void\ writeIntRegister(Reg)
comment26.text=\n\ \ \ \ \ \ \ writeIntRegiter(Reg\ reg)\n\n\ \ \ \ \ \ \ Muss\ immer\ vor\ einem\ Schreibzugriff\ auf\ ein\ virtuelles\ Register\ aufgerufen\ werden.\n\ \ \ \ \ \ \ Die\ Methode\ sorgt\ dafuer,\ dass\ der\ Inhalt\ bei\ verdraengten\ Registern\ wieder\ vom\ \n\ \ \ \ \ \ \ Stack\ gelesen\ wird\ und\ kennzeichnet\ das\ Register\ als\ veraendert.\n\n
comment27.params=reg
comment27.target=void\ writeLongRegister(Reg64)
comment27.text=\n\ \ \ \ \ \ \ writeLongRegiter(Reg64\ reg)\n\n\ \ \ \ \ \ \ Muss\ immer\ vor\ einem\ Schreibzugriff\ auf\ ein\ virtuelles\ Register\ aufgerufen\ werden.\n\ \ \ \ \ \ \ Die\ Methode\ sorgt\ dafuer,\ dass\ der\ Inhalt\ bei\ verdraengten\ Registern\ wieder\ vom\ \n\ \ \ \ \ \ \ Stack\ gelesen\ wird\ und\ kennzeichnet\ das\ Register\ als\ veraendert.\n\n
comment28.params=reg
comment28.target=void\ freeIntRegister(Reg)
comment28.text=\n\ \ \ \ \ \ \ freeIntRegister\n\n\ \ \ \ \ \ \ Kennzeichnet\ die\ von\ einem\ virtuellen\ Register\ belegten\ Resourcen\ als\ freigegeben.\n
comment29.params=reg
comment29.target=void\ freeLongRegister(Reg64)
comment29.text=\n\ \ \ \ \ \ \ freeLongRegister\n\n\ \ \ \ \ \ \ Kennzeichnet\ die\ von\ einem\ virtuellen\ Register\ belegten\ Resourcen\ als\ freigegeben.\n
comment3.params=any
comment3.target=void\ chooseAnyIntRegister(Reg)
comment3.text=\n\ \ \ \ \ \ \ chooseAnyIntRegister(any)\n\n\ \ \ \ \ \ \ Waehlt\ ein\ physikalisches\ Register\ fuer\ den\ Platzhalter\ "any"\ aus.\n
comment30.params=slot\ reg
comment30.target=void\ readLongRegisterFromSlot(jx.compiler.imcode.LocalVariable,\ Reg64)
comment30.text=\n\ \ \ \ \ \ \ readLongRegisterFromSlot(slot,reg,datatype)\n\ \ \ \ \ \ \ Liest\ den\ Inhalt\ von\ einer\ Stackposition\ in\ ein\ Register\n
comment31.params=slot\ reg\ datatype
comment31.target=void\ readIntRegisterFromSlot(jx.compiler.imcode.LocalVariable,\ Reg,\ int)
comment31.text=\n\ \ \ \ \ \ \ readIntRegisterFromSlot(slot,reg,datatype)\n\n\ \ \ \ \ \ \ Liest\ den\ Inhalt\ von\ einer\ Stackposition\ in\ ein\ Register\n\n
comment32.params=value\ slot
comment32.target=void\ writeIntToSlot(int,\ jx.compiler.imcode.LocalVariable)
comment32.text=\n\ \ \ \ \ \ \ writeIntToSlot(value,slot)\n\n\ \ \ \ \ \ \ Veraendert\ den\ Wert\ einer\ Stackposition.\n
comment33.params=reg\ slot
comment33.target=void\ writeIntRegisterToSlot(Reg,\ jx.compiler.imcode.LocalVariable)
comment33.text=\n\ \ \ \ \ \ \ writeIntRegisterToSlot\n\n\ \ \ \ \ \ \ Schreibt\ den\ Wert\ eines\ Registers\ auf\ den\ Stack.\n
comment34.params=reg\ slot
comment34.target=void\ writeLongRegisterToSlot(Reg64,\ jx.compiler.imcode.LocalVariable)
comment34.text=\n\ \ \ \ \ \ \ writeLongRegisterToSlot\n\n\ \ \ \ \ \ \ Schreibt\ den\ Wert\ eines\ Registers\ auf\ den\ Stack.\n
comment35.params=
comment35.target=void\ saveIntRegister()
comment35.text=\n\ \ \ \ \ \ \ saveIntRegister\n\n\ \ \ \ \ \ \ Sichert\ alle\ benutzten\ Register\ auf\ dem\ Stack.\ Dieses\ ist\ zum\ Beispiel\ vor\ jedem\n\ \ \ \ \ \ \ Methodenaufruf\ noetig.\ \ \ \ \ \ \ \n
comment36.params=doNotSave
comment36.target=void\ saveOtherIntRegister(Reg)
comment36.text=\n\ \ \ \ \ \ \ saveOtherIntRegister\n\n\ \ \ \ \ \ \ Sichert\ alle\ benutzten\ Register\ auf\ dem\ Stack.\ Dieses\ ist\ zum\ Beispiel\ vor\ jedem\n\ \ \ \ \ \ \ Methodenaufruf\ noetig.\ \ \ \ \ \ \ \n
comment37.params=
comment37.target=java.lang.String\ getStatistics()
comment37.text=\n\ \ \ \ \ \ \ Liefert\ statistische\ Information\ zurueck\n
comment38.params=
comment38.target=java.lang.String\ getActives()
comment39.params=
comment39.target=void\ clearActives()
comment39.text=\n\ \ \ \ \ \ helper\n
comment4.params=slot\ blocked
comment4.target=Reg\ chooseIntRegisterForSlot(jx.compiler.imcode.LocalVariable,\ Reg)
comment4.text=\n\ \ \ \ \ \ \ Reg\ chooseIntRegisterForSlot\n\n\ \ \ \ \ \ \ Waehlt\ ein\ physikalisches\ Register.\n
comment40.params=reg
comment40.target=void\ modifyIntRegister(Reg)
comment41.params=choose\ depth
comment41.target=int\ computeBadness(Reg,\ int)
comment42.params=slot
comment42.target=Reg\ findSlotInReg(jx.compiler.imcode.LocalVariable)
comment43.params=nReg
comment43.target=void\ swapEqualIntRegister(Reg)
comment5.params=
comment5.target=Reg\ chooseIntRegister()
comment5.text=\n\ \ \ \ \ \ \ Reg\ chooseIntRegister\n\n\ \ \ \ \ \ \ Waehlt\ ein\ physikalisches\ Register\ fuer\ ein\ virtuelles\ Register\ aus.\n
comment6.params=blocked
comment6.target=Reg\ chooseIntRegister(Reg)
comment6.text=\n\ \ \ \ \ \ \ Reg\ chooseIntRegister\n\n\ \ \ \ \ \ \ Waehlt\ ein\ physikalisches\ Register\ fuer\ ein\ virtuelles\ Register\ aus,\ mit\n\ \ \ \ \ \ \ der\ Einschraenke\ nicht\ das\ Register\ vom\ Argumenten\ zu\ nehmen.\n
comment7.params=blocked1\ blocked2
comment7.target=Reg\ chooseIntRegister(Reg,\ Reg)
comment7.text=\n\ \ \ \ \ \ \ Reg\ chooseIntRegister\n\n\ \ \ \ \ \ \ Waehlt\ ein\ physikalisches\ Register\ fuer\ ein\ virtuelles\ Register\ aus,\ mit\n\ \ \ \ \ \ \ der\ Einschraenke\ nicht\ die\ Register\ der\ Argumente\ zu\ nehmen.\n
comment8.params=blocked1\ blocked2\ blocked3
comment8.target=Reg\ chooseIntRegister(Reg,\ Reg,\ Reg)
comment9.params=
comment9.target=RegFloat\ chooseFloatRegister()
numComments=44
