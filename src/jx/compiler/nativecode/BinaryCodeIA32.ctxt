#BlueJ class context
comment0.target=BinaryCodeIA32
comment0.text=\ \n\ \ \ \ Parallel\ to\ this\ class\ there\ is\ a\ class\ \n\ \ \ \ nativeCode.Binarycode.\ \n\ \ \ \ In\ this\ version\ of\ the\ compiler,\ the\ second\ class\ \n\ \ \ \ is\ used\ as\ a\ mere\ container,\ while\ this\ class\ \n\ \ \ \ is\ used\ to\ assemble\ the\ binary\ code.\ \n
comment1.params=
comment1.target=BinaryCodeIA32()
comment10.params=reg\ rm
comment10.target=void\ insertModRM(Reg,\ Opr)
comment100.params=entry
comment100.target=void\ jl(jx.compiler.symbols.SymbolTableEntryBase)
comment100.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ less\n
comment101.params=entry
comment101.target=void\ jge(jx.compiler.symbols.SymbolTableEntryBase)
comment101.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ greater\ or\ equal\n
comment102.params=entry
comment102.target=void\ jg(jx.compiler.symbols.SymbolTableEntryBase)
comment102.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ greater\n
comment103.params=entry
comment103.target=void\ jle(jx.compiler.symbols.SymbolTableEntryBase)
comment103.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ less\ or\ equal\n
comment104.params=entry
comment104.target=void\ ja(jx.compiler.symbols.SymbolTableEntryBase)
comment104.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ unsigned\ greater\n
comment105.params=entry
comment105.target=void\ jae(jx.compiler.symbols.SymbolTableEntryBase)
comment105.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ unsigned\ greater\ or\ equal\n
comment106.params=rel
comment106.target=void\ js(int)
comment106.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ sign\n
comment107.params=rel
comment107.target=void\ jmp(int)
comment107.text=\n\ \ \ \ \ \ \ Jump\ short/near\ \n
comment108.params=des
comment108.target=void\ jmp(Opr)
comment109.params=entry
comment109.target=void\ jmp(jx.compiler.symbols.SymbolTableEntryBase)
comment11.params=opr
comment11.target=void\ call(Opr)
comment11.text=\n\ \ \ \ \ \ \ Insert\ call\ near\ indirect\ (reg/mem)\ (2\ clks)\n\ @param\ opr\n
comment110.params=index\ table
comment110.target=void\ jmp(Reg,\ jx.compiler.symbols.SymbolTableEntryBase[])
comment111.params=src\ des
comment111.target=void\ movb(Opr,\ Reg)
comment111.text=\n\ \ \ \ \ \ \ Move\ 8\ Bit\ Data\n
comment112.params=src\ des
comment112.target=void\ movb(Reg,\ Ref)
comment113.params=immd\ des
comment113.target=void\ movb(int,\ Opr)
comment114.params=src\ des
comment114.target=void\ movw(Opr,\ Reg)
comment114.text=\ \n\tMove\ 16\ Bit\ Data\n
comment115.params=src\ des
comment115.target=void\ movw(Reg,\ Ref)
comment116.params=src\ des
comment116.target=void\ movl(Opr,\ Reg)
comment116.text=\n\ \ \ \ \ \ \ Move\ 32\ Bit\ Data\n
comment117.params=src\ des
comment117.target=void\ movl(Reg,\ Ref)
comment118.params=immd\ des
comment118.target=void\ movl(int,\ Opr)
comment119.params=entry\ des
comment119.target=void\ movl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment12.params=entry
comment12.target=void\ call(jx.compiler.symbols.SymbolTableEntryBase)
comment12.text=\n\ \ \ \ \ \ \ Insert\ call\ near\ (Symbol)\ (1\ clks)\n\ @param\ entry\n
comment120.params=src\ des
comment120.target=void\ movzwl(Opr,\ Reg)
comment120.text=\n\ \ \ \ \ \ \ Move\ with\ Zero-Extend\ (short)\ (3\ clks)\n
comment121.params=src\ des
comment121.target=void\ movzbl(Opr,\ Reg)
comment121.text=\n\ \ \ \ \ \ \ move\ with\ Zero-Extend\ (byte)\ (3\ clks)\n
comment122.params=src\ des
comment122.target=void\ movswl(Opr,\ Reg)
comment122.text=\n\ \ \ \ \ \ \ Move\ with\ Sign-Extend\ (short\ to\ register)\ (3\ clks)\n
comment123.params=src\ des
comment123.target=void\ movsbl(Opr,\ Reg)
comment123.text=\n\ \ \ \ \ \ \ Move\ with\ Sign-Extend\ (byte\ to\ register)\ (3\ clks)\n
comment124.params=
comment124.target=void\ nop()
comment124.text=\n\ \ \ \ \ \ \ No\ Operation\ (1\ clks)\n
comment125.params=ib\ al
comment125.target=void\ inb(byte,\ Reg)
comment125.text=\n\ \ \ \ \ \ \ Input\ from\ Port\ (7\ clks)\n
comment126.params=dx\ al
comment126.target=void\ inb(Reg,\ Reg)
comment127.params=ib\ eax
comment127.target=void\ inl(byte,\ Reg)
comment128.params=dx\ eax
comment128.target=void\ inl(Reg,\ Reg)
comment129.params=ib\ ax
comment129.target=void\ inw(byte,\ Reg)
comment13.params=
comment13.target=void\ cbw()
comment13.text=\n\ \ \ \ \ \ \ Convert\ byte\ to\ word\ (3\ clks)\ +\ (..\ clks)\n
comment130.params=dx\ ax
comment130.target=void\ inw(Reg,\ Reg)
comment131.params=al\ ib
comment131.target=void\ outb(Reg,\ byte)
comment131.text=\n\ \ \ \ \ \ \ Output\ to\ Port\ (12\ clks)\n
comment132.params=al\ dx
comment132.target=void\ outb(Reg,\ Reg)
comment133.params=ax\ ib
comment133.target=void\ outw(Reg,\ byte)
comment134.params=ax\ dx
comment134.target=void\ outw(Reg,\ Reg)
comment135.params=eax\ ib
comment135.target=void\ outl(Reg,\ byte)
comment136.params=eax\ dx
comment136.target=void\ outl(Reg,\ Reg)
comment137.params=
comment137.target=void\ wrmsr()
comment137.text=\n\ \ \ \ \ \ \ write\ to\ model\ specific\ register\ (30-45\ clks)\n\n\ \ \ \ \ \ \ ecx\ \ |\ register\n\ \ \ \ \ \ \ \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\ \ \ \ \ \ \ 0x00\ |\ machine\ check\ address\n\ \ \ \ \ \ \ 0x01\ |\ machine\ check\ type\n\ \ \ \ \ \ \ \=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\=\n\ \ \ \ \ \ \ 0x10\ |\ time\ stamp\ counter\n\ \ \ \ \ \ \ 0x11\ |\ control\ and\ event\ select\n\ \ \ \ \ \ \ 0x12\ |\ counter\ 0\n\ \ \ \ \ \ \ 0x13\ |\ counter\ 1\n\n
comment138.params=
comment138.target=void\ rdmsr()
comment138.text=\n\ \ \ \ \ \ \ read\ from\ model\ specific\ register\ (20-24\ clks)\n\n\ \ \ \ \ \ \ see\ wrmsr()\ for\ register\ selection\n
comment139.params=
comment139.target=void\ rdtsc()
comment139.text=\n\ \ \ \ \ \ \ Read\ from\ Time\ Stamp\ Counter\ \n\ \ \ \ \ \ \ return\ EDX\:EAX\n
comment14.params=
comment14.target=void\ cdq()
comment14.text=\n\ \ \ \ \ \ \ Convert\ double\ to\ quad\ word\ (2\ clks)\n\n\ \ \ \ \ \ \ fill\ edx\ with\ sign\ bit\ of\ eax\n
comment140.params=
comment140.target=void\ rdpmc()
comment140.text=\ \n\ \ \ \ \ \ \ read\ performance\ monitor\ counter\n\ \ \ \ \ \ \ (only\ P6)\n\ \ \ \ \ \ \ \n\ \ \ \ \ \ \ ecx\ \=\ 0\ \:\ return\ EDX\:EAX\ counter0\n\ \ \ \ \ \ \ ecx\ \=\ 1\ \:\ return\ EDX\:EAX\ counter1\n\n
comment141.params=src\ des
comment141.target=void\ test(Opr,\ Reg)
comment141.text=\n\ \ \ \ \ \ \ test\ -\ logical\ compare\ (1/2\ clks)\n
comment142.params=immd\ des
comment142.target=void\ test(int,\ Opr)
comment143.params=value
comment143.target=void\ insertConst1(int)
comment143.text=\ \n\tInsert\ a\ single\ byte\ constant\ \n
comment144.params=value
comment144.target=void\ insertConst4(int)
comment144.text=\ \n\tInsert\ a\ four\ byte\ constant\ \n
comment145.params=ncIndex\ value
comment145.target=void\ insertConst4At(int,\ int)
comment146.params=entry
comment146.target=void\ insertConst4(jx.compiler.symbols.SymbolTableEntryBase)
comment146.text=\ \n\tInsert\ a\ four\ byte\ constant\ with\ an\ unknown\ value.\ \n\t(must\ be\ resolved\ before\ the\ code\ is\ installed)\ \n
comment147.params=value
comment147.target=boolean\ is8BitValue(int)
comment148.params=entry
comment148.target=void\ insertConst0(jx.compiler.symbols.SymbolTableEntryBase)
comment148.text=\ \n\tInsert\ a\ 0\ byte\ constant\ with\ an\ unknown\ value.\ \n\t(contains\ information\ about\ current\ code\ position,\ i.e.,\ a\ stack\ map)\ \n
comment149.params=
comment149.target=void\ alignCode()
comment149.text=\n\ \ \ \ \ \ \ Intel\ Architecture\ Optimization.\ Reference\ Manual\ (chapter\ 2,page\ 11)\n\ \ \ \ \ \ \ "Pentium\ II\ and\ III\ processors\ have\ a\ cache\ line\ size\ of\ 32\ byte.\n\ \ \ \ \ \ \ Since\ the\ instruction\ prefetch\ buffers\ fetch\ 16-byte\ boundaries,\n\ \ \ \ \ \ \ code\ alignment\ has\ a\ direct\ impact\ on\ prefetch\ buffer\ efficiency"\n\ \ \ \ \ \ \ \n\ Loop\ entry\ labels\ should\ be\ 16-byte-aligned\ when\ less\ then\ \n\ \ \ \ \ \ \ eight\ byte\ away\ from\ a\ 16-byte\ boundary.\n\ \ \ \ \ \ \ \n\ Labels\ that\ follow\ an\ unconditional\ branch\ of\ function\ call\n\ \ \ \ \ \ \ should\ be\ aligend\ as\ above.\n\ \ \ \ \ \ \ \n\ Labels\ that\ follow\ a\ conditional\ branch\ need\ _not_\ be\ aligned.\n
comment15.params=
comment15.target=void\ cwde()
comment15.text=\n\ \ \ \ \ \ \ Convert\ word\ to\ double\ word\ (3\ clks)\n\ \ \ \ \ \ \ fill\ dx\ with\ sign\ bit\ of\ ax\n
comment150.params=jumpObject
comment150.target=void\ addJumpTarget(jx.compiler.symbols.UnresolvedJump)
comment150.text=\ \n\tInitialized\ the\ target\ position\ of\ 'jumpObject'.\ \n\t(Call\ insertConst4()\ for\ corresponding\ jump\ instruction)\ \n
comment151.params=
comment151.target=void\ alignIP()
comment152.params=
comment152.target=void\ alignIP_4_Byte()
comment153.params=
comment153.target=void\ alignIP_16_Byte()
comment154.params=
comment154.target=void\ alignIP_32_Byte()
comment155.params=handler
comment155.target=void\ addExceptionTarget(jx.compiler.symbols.UnresolvedJump)
comment156.params=entry
comment156.target=void\ makeRelative(jx.compiler.symbols.SymbolTableEntryBase)
comment156.text=\ \n\tMake\ a\ symbol\ table\ entry\ relative.\ \n\tIf\ you\ use\ insertConst4(),\ this\ class\ assumes\ that\ \n\tthe\ value\ to\ be\ inserted\ is\ absolute.\ But\ if\ the\ \n\tinserted\ value\ is\ a\ jump\ offset\ it\ is\ relative\ to\ \n\tthe\ instruction\ pointer\ of\ the\ next\ instruction.\ \n\tThat\ is\ what\ you\ can\ tell\ the\ compiler\ with\ this\ \n\tmethod.\ \n
comment157.params=
comment157.target=void\ endInstr()
comment157.text=\n\ \ \ \ \ \ \ Called\ after\ each\ instruction.\ \n
comment158.params=
comment158.target=void\ finishCode()
comment159.params=codeBase
comment159.target=void\ resolve(int)
comment159.text=\ \n\tApply\ all\ resolveable\ symbol\ table\ entries.\n\t(e.g.\ insert\ jump\ offsets\ ....)\n\tAfter\ calling\ this\ method,\ the\ vector\ 'symbolTable'\ \n\tcontains\ all\ symbol\ table\ entries\ that\ are\ not\ resolveable.\n\tIf\ you\ want\ to\ install\ the\ compiled\ code\ after\ calling\ this\ \n\tmethod,\ this\ vector\ should\ be\ empty.\ \n\ @param\ codeBase\n
comment16.params=
comment16.target=void\ cwd()
comment16.text=\n\ \ \ \ \ \ \ Convert\ word\ to\ double\ (2\ clks)\n\ \ \ \ \ \ \ fill\ dx\ with\ sign\ bit\ of\ ax\n
comment160.params=value
comment160.target=java.lang.String\ constToString(int)
comment161.params=entry
comment161.target=java.lang.String\ constToString(jx.compiler.symbols.SymbolTableEntryBase)
comment162.params=value
comment162.target=java.lang.String\ const1ToString(int)
comment163.params=reg
comment163.target=java.lang.String\ regToString(int)
comment164.params=
comment164.target=NCExceptionHandler[]\ getExceptionHandlers()
comment164.text=\ \n\treturn\ an\ array\ of\ all\ exception\ handlers\ of\ this\ \n\tmethod.\ (these\ handlers\ contain\ the\ native\ code\ indices\ \n\tof\ the\ range\ start,\ range\ end\ and\ of\ the\ handler\ start\ \n\ @return\ \n
comment165.params=firstByte\ stopByte
comment165.target=java.lang.String\ getBinaryCodeAsHex(int,\ int)
comment166.params=
comment166.target=java.lang.String\ getBinaryCodeAsHex()
comment167.params=firstByte\ stopByte
comment167.target=java.lang.String\ getBinaryCodeAsAssembler(int,\ int)
comment168.params=
comment168.target=java.lang.String\ getBinaryCodeAsAssembler()
comment169.params=instr\ arg1\ arg2
comment169.target=void\ printInstr(java.lang.String,\ java.lang.String,\ jx.compiler.symbols.SymbolTableEntryBase)
comment17.params=
comment17.target=void\ ret()
comment17.text=\n\ \ \ \ \ \ \ Insert\ return\n
comment170.params=instr\ arg1\ arg2
comment170.target=void\ printInstr(java.lang.String,\ jx.compiler.symbols.SymbolTableEntryBase,\ java.lang.String)
comment171.params=instr\ arg1\ arg2\ arg3
comment171.target=void\ printInstr(java.lang.String,\ java.lang.String,\ jx.compiler.symbols.SymbolTableEntryBase,\ java.lang.String)
comment172.params=instr
comment172.target=void\ printInstr(java.lang.String)
comment173.params=instr\ arg1\ arg2
comment173.target=void\ printInstr(java.lang.String,\ java.lang.String,\ java.lang.String)
comment174.params=instr\ arg1
comment174.target=void\ printInstr(java.lang.String,\ jx.compiler.symbols.SymbolTableEntryBase)
comment175.params=entry
comment175.target=void\ printJumpTarget(jx.compiler.symbols.UnresolvedJump)
comment176.params=value
comment176.target=void\ printHexByte(int)
comment177.params=value
comment177.target=void\ printHexInt(int)
comment178.params=
comment178.target=void\ printInstructions()
comment179.params=out
comment179.target=void\ printGASInstructions(java.io.PrintStream)
comment18.params=
comment18.target=void\ cli()
comment18.text=\n\ \ \ \ \ \ \ clear\ interrupt\ flag\ (7\ clks)\n
comment180.params=bcPosition
comment180.target=void\ startBC(int)
comment181.params=
comment181.target=void\ endBC()
comment182.params=
comment182.target=java.util.ArrayList\ getInstructionTable()
comment19.params=opr
comment19.target=void\ decb(Opr)
comment19.text=\n\ \ \ \ \ \ \ decrement\ byte\ value\ by\ 1\ (1/3\ clks)\n\ @param\ opr\n
comment2.params=
comment2.target=jx.compiler.execenv.BinaryCode\ getOldBinaryCode()
comment2.text=\ \n\tThe\ methods\ in\ the\ frontend\ expect\ the\ compiled\ code\n\tstored\ inside\ of\ a\ object\ of\ class\ nativecode.BinaryCode.\ \n\tConvert\ a\ object\ of\ preproc.BinaryCodePreproc\ into\ a\ object\ of\ \n\tnativecode.BinaryCode.\n\tNote\:\ Exceptionhandlers\ are\ not\ copied.\ \n\ @return\ \n
comment20.params=ref
comment20.target=void\ decl(Ref)
comment20.text=\n\ \ \ \ \ \ \ decrement\ long\ value\ by\ 1\ (1/3\ clks)\n\ @param\ ref\n
comment21.params=reg
comment21.target=void\ decl(Reg)
comment21.text=\ \n\ \ \ \ \ \ \ decrement\ register\ by\ 1\ (1\ clks)\n\ @param\ reg\n
comment22.params=reg
comment22.target=void\ pushl(Reg)
comment22.text=\n\ \ \ \ \ \ \ Insert\ a\ pushl(reg)\n\ @param\ reg\n
comment23.params=ref
comment23.target=void\ pushl(Ref)
comment24.params=immd
comment24.target=void\ pushl(int)
comment25.params=entry
comment25.target=void\ pushl(jx.compiler.symbols.SymbolTableEntryBase)
comment26.params=
comment26.target=void\ pushfl()
comment27.params=
comment27.target=void\ pushal()
comment27.text=\n\ \ \ \ \ \ \ push\ all\ general\ registers\n\ \ \ \ \ \ \ (eax,ecx,edx,ebx,esp,ebp,esi,edi)\ \n\ \ \ \ \ \ \ (5\ clks)\n
comment28.params=reg
comment28.target=void\ popl(Reg)
comment28.text=\ \n\ \ \ \ \ \ \ Insert\ a\ popl(reg)\n\ @param\ reg\n
comment29.params=
comment29.target=void\ popfl()
comment29.text=\n\ \ \ \ \ \ \ pop\ stack\ into\ eflags\ register\ (4\ clks)\n
comment3.params=
comment3.target=int\ getCurrentIP()
comment30.params=
comment30.target=void\ popal()
comment30.text=\n\ \ \ \ \ \ \ pop\ all\ general\ register\n
comment31.params=
comment31.target=void\ lock()
comment31.text=\ \n\ \ \ \ \ \ lock\ prefix\n
comment32.params=
comment32.target=void\ repz()
comment32.text=\n\ \ \ \ \ rep\ prefix\n
comment33.params=lock
comment33.target=void\ spin_lock(Ref)
comment33.text=\ \n\ \ \ \ \ \ spinlocks\n\ @param\ lock\n
comment34.params=lock
comment34.target=void\ spin_unlock(Ref)
comment35.params=src\ des
comment35.target=void\ subl(Opr,\ Reg)
comment35.text=\n\ \ \ \ \ \ \ Integer\ Subtraction\n\ @param\ src\n\ @param\ des\n
comment36.params=src\ des
comment36.target=void\ subl(Reg,\ Ref)
comment37.params=immd\ des
comment37.target=void\ subl(int,\ Opr)
comment38.params=entry\ des
comment38.target=void\ subl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment39.params=src\ des
comment39.target=void\ sbbl(Opr,\ Reg)
comment39.text=\n\ \ \ \ \ \ \ Integer\ Subtraction\ with\ Borrow\n\ @param\ src\n\ @param\ des\n
comment4.params=
comment4.target=void\ realloc()
comment40.params=src\ des
comment40.target=void\ sbbl(Reg,\ Ref)
comment41.params=src
comment41.target=void\ mull(Opr)
comment41.text=\n\ \ \ \ \ \ \ Integer\ Unsigned\ Multiplication\ of\ eax\ \ (10\ clk)\n
comment42.params=src\ des
comment42.target=void\ imull(Opr,\ Reg)
comment42.text=\n\ \ \ \ \ \ \ Integer\ Signed\ Multiplication\ (10\ clk)\n
comment43.params=immd\ des
comment43.target=void\ imull(int,\ Reg)
comment43.text=imull(Reg\ src,\ Ref\ des)\ no\ x86-code
comment44.params=immd\ src\ des
comment44.target=void\ imull(int,\ Opr,\ Reg)
comment45.params=entry\ des
comment45.target=void\ imull(jx.compiler.symbols.SymbolTableEntryBase,\ Reg)
comment46.params=opr
comment46.target=void\ incb(Opr)
comment46.text=\n\ \ \ \ \ \ \ increment\ by\ 1\ (1/3\ clks)\n
comment47.params=ref
comment47.target=void\ incl(Ref)
comment47.text=\ \n\ \ \ \ \ \ \ increment\ by\ 1\ (1/3\ clks)\n
comment48.params=reg
comment48.target=void\ incl(Reg)
comment48.text=\n\ \ \ \ \ \ \ increment\ register\ by\ 1\ (1\ clks)\n
comment49.params=opr\ reg
comment49.target=void\ lea(Opr,\ Reg)
comment49.text=\ \n\tlea\ Load\ Effective\ Address\ (1\ clk)\n
comment5.params=requiredSpace
comment5.target=void\ realloc(int)
comment5.text=\ \n\tRealloc\ memory\ in\ the\ byte\ code\ array.\ \n\tAfter\ calling\ this\ method,\ there\ are\ at\ least\ \n\t'requiredSpace'\ free\ bytes\ in\ the\ array.\ \n\ @param\ requiredSpace\n
comment50.params=immd\ des
comment50.target=void\ shll(int,\ Opr)
comment50.text=\n\ \ \ \ \ \ \ SHL/SAL\ Shift\ left\ (1/3\ clks)\n
comment51.params=des
comment51.target=void\ shll(Opr)
comment51.text=\n\ \ \ \ \ \ \ SHL/SAL\ Shift\ left\ by\ %cl\ (4\ clks)\n
comment52.params=immd\ low\ des
comment52.target=void\ shld(int,\ Reg,\ Opr)
comment52.text=\n\ \ \ \ \ \ \ SHLD\ Double\ Precision\ Shift\ left\ (4\ clks)\n
comment53.params=low\ des
comment53.target=void\ shld(Reg,\ Opr)
comment53.text=\n\ \ \ \ \ \ \ SHLD\ Double\ Precision\ Shift\ left\ by\ %cl\ (4/5\ clks)\n
comment54.params=immd\ des
comment54.target=void\ shrl(int,\ Opr)
comment54.text=\n\ \ \ \ \ \ \ SHR\ Shift\ right\ (1/3\ clks)\n
comment55.params=entry\ des
comment55.target=void\ shrl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment56.params=des
comment56.target=void\ shrl(Opr)
comment56.text=\n\ \ \ \ \ \ \ SHL/SAL\ Shift\ left\ by\ %cl\ (4\ clks)\n
comment57.params=immd\ des
comment57.target=void\ sarl(int,\ Opr)
comment57.text=\n\ \ \ \ \ \ \ SAR\ Shift\ right\ (signed)\ (1/3\ clks)\n
comment58.params=des
comment58.target=void\ sarl(Opr)
comment58.text=\n\ \ \ \ \ \ \ SAR\ Shift\ right\ by\ %cl\ (signed)\ (4\ clks)\n
comment59.params=src
comment59.target=void\ idivl(Opr)
comment59.text=\n\ \ \ \ \ \ \ DIV\ Signed\ Divide\n
comment6.params=value
comment6.target=void\ insertByte(int)
comment6.text=\ Insert\ a\ single\ byte\n
comment60.params=src
comment60.target=void\ divl(Opr)
comment60.text=\n\ \ \ \ \ \ \ DIV\ Unsigned\ Divide\n
comment61.params=src\ des
comment61.target=void\ addl(Opr,\ Reg)
comment61.text=\n\ \ \ \ \ \ \ Add\n
comment62.params=src\ des
comment62.target=void\ addl(Reg,\ Ref)
comment63.params=immd\ des
comment63.target=void\ addl(int,\ Opr)
comment64.params=entry\ des
comment64.target=void\ addl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment65.params=src\ des
comment65.target=void\ addsd(Opr,\ Reg)
comment66.params=src\ des
comment66.target=void\ addsd(Reg,\ Ref)
comment67.params=
comment67.target=void\ addsd()
comment68.params=entry\ des
comment68.target=void\ addsd(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment69.params=src\ des
comment69.target=void\ andl(Opr,\ Reg)
comment69.text=\n\ \ \ \ \ \ \ And\ (1/3\ clks)\n
comment7.params=entry
comment7.target=void\ insertByte(jx.compiler.symbols.SymbolTableEntryBase)
comment70.params=src\ des
comment70.target=void\ andl(Reg,\ Ref)
comment71.params=immd\ des
comment71.target=void\ andl(int,\ Opr)
comment72.params=entry\ des
comment72.target=void\ andl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment73.params=src\ des
comment73.target=void\ orl(Opr,\ Reg)
comment73.text=\n\ \ \ \ \ \ \ Or\ (1/3\ clks)\n
comment74.params=src\ des
comment74.target=void\ orl(Reg,\ Ref)
comment75.params=immd\ des
comment75.target=void\ orl(int,\ Opr)
comment76.params=entry\ des
comment76.target=void\ orl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment77.params=src\ des
comment77.target=void\ xorl(Opr,\ Reg)
comment77.text=\n\ \ \ \ \ \ \ Or\ (1/3\ clks)\n
comment78.params=src\ des
comment78.target=void\ xorl(Reg,\ Ref)
comment79.params=immd\ des
comment79.target=void\ xorl(int,\ Opr)
comment8.params=a\ b
comment8.target=void\ insertBytes(int,\ int)
comment80.params=entry\ des
comment80.target=void\ xorl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment81.params=opr
comment81.target=void\ notl(Opr)
comment81.text=\n\ \ \ \ \ \ \ Not\ (1/3\ clks)\n
comment82.params=opr
comment82.target=void\ negl(Opr)
comment82.text=\n\ \ \ \ \ \ \ Neg\ (1/3\ clks)\n
comment83.params=src\ des
comment83.target=void\ adcl(Opr,\ Reg)
comment83.text=\n\ \ \ \ \ \ \ Add\ with\ Carry\n
comment84.params=src\ des
comment84.target=void\ adcl(Reg,\ Ref)
comment85.params=immd\ des
comment85.target=void\ adcl(int,\ Opr)
comment86.params=immd\ des
comment86.target=void\ cmpb(int,\ Opr)
comment86.text=\n\ \ \ \ \ \ \ Compare\ Two\ Operands\n
comment87.params=src\ des
comment87.target=void\ cmpl(Opr,\ Reg)
comment88.params=src\ des
comment88.target=void\ cmpl(Reg,\ Ref)
comment89.params=immd\ des
comment89.target=void\ cmpl(int,\ Opr)
comment9.params=reg\ rm
comment9.target=void\ insertModRM(int,\ Opr)
comment9.text=\n\ \ \ \ \ \ \ Insert\ ModRM\ and\ SIB\ byte\ \n
comment90.params=entry\ des
comment90.target=void\ cmpl(jx.compiler.symbols.SymbolTableEntryBase,\ Opr)
comment91.params=eax\ src\ des
comment91.target=void\ cmpxchg(Reg,\ Reg,\ Opr)
comment91.text=\n\ \ \ \ \ \ \ Compare\ and\ Exchange\ (6\ clks)\n
comment92.params=des
comment92.target=void\ sete(Opr)
comment93.params=des
comment93.target=void\ setne(Opr)
comment94.params=nr
comment94.target=void\ intr(int)
comment95.params=rel
comment95.target=void\ je(int)
comment95.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ equal\n
comment96.params=entry
comment96.target=void\ je(jx.compiler.symbols.SymbolTableEntryBase)
comment97.params=rel
comment97.target=void\ jne(int)
comment97.text=\n\ \ \ \ \ \ \ Jump\ short/near\ if\ not\ equal\n
comment98.params=entry
comment98.target=void\ jne(jx.compiler.symbols.SymbolTableEntryBase)
comment99.params=entry
comment99.target=void\ jnae(jx.compiler.symbols.SymbolTableEntryBase)
numComments=183
