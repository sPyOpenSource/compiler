#BlueJ class context
comment0.target=ExecEnvironmentInterface
comment1.params=container
comment1.target=void\ setCodeContainer(CodeContainer)
comment10.params=node\ reg\ bcPosition
comment10.target=void\ codeCheckMagic(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int)
comment11.params=node\ reg\ bcPosition
comment11.target=void\ codeCheckDivZero(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int)
comment12.params=node\ array\ index\ bcPosition
comment12.target=void\ codeCheckArrayRange(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int,\ int)
comment13.params=node\ array\ index\ bcPosition
comment13.target=void\ codeCheckArrayRange(graph.IMNode,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg,\ int)
comment14.params=node\ classCPEntry\ result
comment14.target=void\ codeNewObject(graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ jx.compiler.nativecode.Reg)
comment15.params=node\ classCPEntry\ methodRefCPEntry\ args\ result
comment15.target=void\ codeCompactNew(graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ jx.classfile.constantpool.MethodRefCPEntry,\ graph.IMOperant[],\ jx.compiler.nativecode.Reg)
comment16.params=node\ type\ size\ result
comment16.target=void\ codeNewArray(graph.IMNode,\ int,\ graph.IMOperant,\ jx.compiler.nativecode.Reg)
comment17.params=node\ classCPEntry\ size\ result
comment17.target=void\ codeNewObjectArray(graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ graph.IMOperant,\ jx.compiler.nativecode.Reg)
comment18.params=node\ array\ datatype\ index\ result\ bcPosition
comment18.target=void\ codeGetArrayField(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int,\ int,\ jx.compiler.nativecode.Reg,\ int)
comment19.params=node\ array\ datatype\ index\ result\ bcPosition
comment19.target=void\ codeGetArrayField(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg,\ int)
comment2.params=aClass
comment2.target=void\ setCurrentlyCompiling(jx.compiler.execenv.BCClass)
comment20.params=node\ array\ datatype\ index\ result\ bcPosition
comment20.target=void\ codeGetArrayFieldLong(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg64,\ int)
comment21.params=node\ array\ datatype\ index\ value\ bcPosition
comment21.target=void\ codePutArrayField(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int,\ int,\ jx.compiler.nativecode.Reg,\ int)
comment22.params=node\ array\ datatype\ index\ value\ bcPosition
comment22.target=void\ codePutArrayField(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg,\ int)
comment23.params=node\ type\ oprs\ result
comment23.target=void\ codeNewMultiArray(graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ graph.IMOperant[],\ jx.compiler.nativecode.Reg)
comment24.params=node\ array\ result
comment24.target=void\ codeGetArrayLength(graph.IMNode,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg)
comment25.params=node\ exception\ bcPosition
comment25.target=void\ codeThrow(graph.IMNode,\ int,\ int)
comment26.params=node\ exception\ bcPosition
comment26.target=void\ codeThrow(graph.IMNode,\ graph.IMOperant,\ int)
comment27.params=node\ classCPEntry\ objRef\ bcPosition
comment27.target=void\ codeCheckCast(graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ jx.compiler.nativecode.Reg,\ int)
comment28.params=node\ classCPEntry\ objRef\ regEAX\ bcPosition
comment28.target=void\ codeInstanceOf(graph.IMNode,\ jx.classfile.constantpool.ClassCPEntry,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg,\ int)
comment29.params=node\ obj\ bcPosition
comment29.target=void\ codeMonitorEnter(graph.IMNode,\ graph.IMOperant,\ int)
comment3.params=methodRefCPEntry
comment3.target=jx.compiler.execenv.BCMethod\ getBCMethod(jx.classfile.constantpool.MethodRefCPEntry)
comment30.params=node\ obj\ bcPosition
comment30.target=void\ codeMonitorLeave(graph.IMNode,\ graph.IMOperant,\ int)
comment31.params=cpEntry
comment31.target=jx.compiler.symbols.SymbolTableEntryBase\ getStringRef(jx.classfile.constantpool.StringCPEntry)
comment32.params=cpEntry\ result\ bcPosition
comment32.target=void\ codeLoadStringRef(jx.classfile.constantpool.StringCPEntry,\ jx.compiler.nativecode.Reg,\ int)
comment33.params=node\ fieldRefCPEntry\ objRef\ result\ bcPosition
comment33.target=void\ codeGetField(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg,\ int)
comment34.params=node\ fieldRefCpEntry\ result\ bcPosition
comment34.target=void\ codeGetStaticField(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg,\ int)
comment35.params=node\ fieldRefCPEntry\ objRef\ value\ bcPosition
comment35.target=void\ codePutField(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg,\ int)
comment36.params=node\ fieldRefCpEntry\ result\ bcPosition
comment36.target=void\ codePutStaticField(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg,\ int)
comment37.params=node\ fieldRefCPEntry\ objRef\ result\ bcPosition
comment37.target=void\ codeGetFieldLong(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg64,\ int)
comment38.params=node\ fieldRefCpEntry\ result\ bcPosition
comment38.target=void\ codeGetStaticFieldLong(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg64,\ int)
comment39.params=node\ fieldRefCPEntry\ objRef\ value\ bcPosition
comment39.target=void\ codePutFieldLong(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg,\ jx.compiler.nativecode.Reg64,\ int)
comment4.params=level
comment4.target=boolean\ doOptimize(int)
comment40.params=node\ fieldRefCpEntry\ value\ bcPosition
comment40.target=void\ codePutStaticFieldLong(graph.IMNode,\ jx.classfile.constantpool.FieldRefCPEntry,\ jx.compiler.nativecode.Reg64,\ int)
comment41.params=node\ lOpr\ rOpr\ result\ bcPosition
comment41.target=void\ codeLongMul(graph.IMNode,\ graph.IMOperant,\ graph.IMOperant,\ jx.compiler.nativecode.Reg64,\ int)
comment42.params=node\ lOpr\ rOpr\ result\ bcPosition
comment42.target=void\ codeLongDiv(graph.IMNode,\ graph.IMOperant,\ graph.IMOperant,\ jx.compiler.nativecode.Reg64,\ int)
comment43.params=node\ lOpr\ rOpr\ result\ bcPosition
comment43.target=void\ codeLongRem(graph.IMNode,\ graph.IMOperant,\ graph.IMOperant,\ jx.compiler.nativecode.Reg64,\ int)
comment44.params=node\ lOpr\ rOpr\ result\ bcPosition
comment44.target=void\ codeLongShr(graph.IMNode,\ graph.IMOperant,\ graph.IMOperant,\ jx.compiler.nativecode.Reg64,\ int)
comment45.params=node\ lOpr\ rOpr\ result\ bcPosition
comment45.target=void\ codeLongShl(graph.IMNode,\ graph.IMOperant,\ graph.IMOperant,\ jx.compiler.nativecode.Reg64,\ int)
comment46.params=node\ lOpr\ rOpr\ result\ bcPosition
comment46.target=void\ codeLongUShr(graph.IMNode,\ graph.IMOperant,\ graph.IMOperant,\ jx.compiler.nativecode.Reg64,\ int)
comment47.params=node\ lOpr\ rOpr\ result\ bcPosition
comment47.target=void\ codeLongCompare(graph.IMNode,\ graph.IMOperant,\ graph.IMOperant,\ jx.compiler.nativecode.Reg,\ int)
comment48.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment48.target=void\ codeVirtualCall(graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ graph.IMOperant,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg,\ int)
comment49.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment49.target=void\ codeSpecialCall(graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ graph.IMOperant,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg,\ int)
comment5.params=
comment5.target=jx.compiler.execenv.CompilerOptionsInterface\ getCompilerOptions()
comment50.params=node\ interfaceRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment50.target=void\ codeInterfaceCall(graph.IMNode,\ jx.classfile.constantpool.InterfaceMethodRefCPEntry,\ graph.IMOperant,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg,\ int)
comment51.params=node\ methodRefCPEntry\ args\ datatype\ result\ bcPosition
comment51.target=void\ codeStaticCall(graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg,\ int)
comment52.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment52.target=void\ codeVirtualCallLong(graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ graph.IMOperant,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg64,\ int)
comment53.params=node\ methodRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment53.target=void\ codeSpecialCallLong(graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ graph.IMOperant,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg64,\ int)
comment54.params=node\ interfaceRefCPEntry\ obj\ args\ datatype\ result\ bcPosition
comment54.target=void\ codeInterfaceCallLong(graph.IMNode,\ jx.classfile.constantpool.InterfaceMethodRefCPEntry,\ graph.IMOperant,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg64,\ int)
comment55.params=node\ methodRefCPEntry\ args\ datatype\ result\ bcPosition
comment55.target=void\ codeStaticCallLong(graph.IMNode,\ jx.classfile.constantpool.MethodRefCPEntry,\ graph.IMOperant[],\ int,\ jx.compiler.nativecode.Reg64,\ int)
comment56.params=node\ InstructionPointer
comment56.target=void\ codeStackMap(graph.IMNode,\ int)
comment57.params=exception\ bcPosition
comment57.target=jx.compiler.symbols.UnresolvedJump\ createExceptionCall(int,\ int)
comment6.params=
comment6.target=int\ getExtraStackSpace()
comment7.params=
comment7.target=void\ codeProlog()
comment8.params=
comment8.target=void\ codeEpilog()
comment9.params=node\ reg\ bcPosition
comment9.target=void\ codeCheckReference(graph.IMNode,\ jx.compiler.nativecode.Reg,\ int)
numComments=58
