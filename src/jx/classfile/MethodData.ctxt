#BlueJ class context
comment0.target=MethodData
comment0.text=\ \n\ \ \ \ All\ data\ about\ a\ method,\ that\ can\ be\ found\ \n\ \ \ \ in\ a\ class\ file.\ This\ is\ a\ rather\ passive\ class.\ \n\ \ \ \ It\ only\ reads\ the\ data\ from\ the\ class\ file\ and\ \n\ \ \ \ stores\ it.\ \n
comment1.params=
comment1.target=ClassData\ getDeclaringClass()
comment10.params=
comment10.target=java.lang.String\ getMethodName()
comment11.params=
comment11.target=java.lang.String\ getMethodType()
comment12.params=
comment12.target=boolean\ isPublic()
comment13.params=
comment13.target=boolean\ isPrivate()
comment14.params=
comment14.target=boolean\ isProtected()
comment15.params=
comment15.target=boolean\ isStatic()
comment16.params=
comment16.target=boolean\ isFinal()
comment17.params=
comment17.target=boolean\ isNative()
comment18.params=
comment18.target=boolean\ isAbstract()
comment19.params=
comment19.target=int[]\ getInitialVariableTypes()
comment2.params=
comment2.target=ClassSource\ getDeclaringClassSource()
comment20.params=
comment20.target=int\ getBasicReturnType()
comment21.params=
comment21.target=datatypes.BasicTypeDescriptor\ getReturnType()
comment22.params=
comment22.target=datatypes.BasicTypeDescriptor[]\ getParameterTypes()
comment23.params=
comment23.target=CodeData\ getCode()
comment24.params=
comment24.target=byte[]\ getBytecode()
comment25.params=
comment25.target=int\ getNumLocalVariables()
comment26.params=
comment26.target=int\ getNumStackSlots()
comment27.params=
comment27.target=int\ getNumInstr()
comment28.params=
comment28.target=ExceptionHandlerData[]\ getExceptionHandlers()
comment29.params=
comment29.target=LineAttributeData[]\ getLineNumberTable()
comment3.params=
comment3.target=constantpool.UTF8CPEntry\ getMethodNameCPEntry()
comment30.params=input\ cPool
comment30.target=void\ readFromClassFile(java.io.DataInput,\ constantpool.ConstantPool)
comment31.params=input\ cPool
comment31.target=void\ readAttribute(java.io.DataInput,\ constantpool.ConstantPool)
comment32.params=input
comment32.target=void\ readExceptionClasses(java.io.DataInput)
comment33.params=
comment33.target=java.lang.String\ toString()
comment34.params=cPool
comment34.target=java.lang.String\ getDescription(constantpool.ConstantPool)
comment35.params=
comment35.target=int\ getModifiers()
comment35.text=\n\ \ \ \ public\ LineAttributeData[]\ getLineNumbers()\ {\n\treturn\ codeData.getLineNumberTable();\n\ \ \ \ }\n
comment36.params=newElm
comment36.target=void\ setVerifyResult(VerifyResult)
comment37.params=type
comment37.target=VerifyResult\ getVerifyResult(int)
comment4.params=newEntry
comment4.target=void\ setMethodTypeCPEntry(constantpool.UTF8CPEntry)
comment5.params=declaringClass\ input\ cPool
comment5.target=MethodData(ClassData,\ java.io.DataInput,\ constantpool.ConstantPool)
comment6.params=declaringClass\ input\ cPool\ allowNative
comment6.target=MethodData(ClassData,\ java.io.DataInput,\ constantpool.ConstantPool,\ boolean)
comment7.params=accessFlags\ methodNameCPIndex\ methodTypeCPIndex\ methodNameCPEntry\ methodTypeCPEntry\ numExceptionClasses\ exceptionClassCPIndex\ codeData\ declaringClass\ allowNative
comment7.target=MethodData(int,\ int,\ int,\ constantpool.UTF8CPEntry,\ constantpool.UTF8CPEntry,\ int,\ int[],\ CodeData,\ ClassData,\ boolean)
comment8.params=
comment8.target=MethodData\ copy()
comment9.params=
comment9.target=java.lang.String\ getName()
numComments=38
