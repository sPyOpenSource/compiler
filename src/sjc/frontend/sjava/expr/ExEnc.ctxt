#BlueJ class context
comment0.target=ExEnc
comment0.text=\n\ ExEnc\:\ bracket\ enclosure\ of\ an\ expression,\ may\ be\ a\ conversion\n\ \n\ @author\ S.\ Frenz\n\ @version\ 190322\ added\ const\ stuct\ handling\ to\ support\ non-final\ static\ struct\ initialization\n\ \ version\ 121031\ added\ special\ code\ printer\ case\ if\ no\ conversion\ for\ const\ value\ /\ deref\ has\ to\ be\ printed\n\ \ version\ 120925\ added\ support\ for\ code\ printer\n\ \ version\ 101015\ adopted\ changed\ Expr\n\ \ version\ 100927\ fixed\ unsignedness\ of\ chars\n\ \ version\ 100623\ keeping\ convertTo\ for\ structs\ to\ enable\ re-resolving\n\ \ version\ 100504\ adopted\ changed\ Expr\n\ \ version\ 100409\ adopted\ changed\ TypeRef\n\ \ version\ 100114\ reorganized\ constant\ object\ handling\n\ \ version\ 100113\ added\ support\ for\ ExConstRef\n\ \ version\ 091112\ added\ getConvertedExpr\n\ \ version\ 091005\ adopted\ changed\ Expr\ with\ support\ for\ preferredType\n\ \ version\ 090724\ adopted\ changed\ Expr\n\ \ version\ 090718\ adopted\ changed\ Expr\n\ \ version\ 090218\ fixed\ loading\ of\ converted\ constant\ double\n\ \ version\ 090207\ added\ copyright\ notice\n\ \ version\ 080712\ added\ conversion\ check\ for\ unneccessary\ conversion\n\ \ version\ 080613\ adopted\ hasEffect->effectType\n\ \ version\ 080401\ added\ support\ for\ special\ conversion\ to\ STRUCT\n\ \ version\ 080119\ adopted\ changed\ signature\ of\ Expr.canGenAddr\n\ \ version\ 070909\ optimized\ signature\ of\ Expr.resolve\n\ \ version\ 070828\ avoiding\ double\ resolving\ of\ inserted\ conversion\n\ \ version\ 070817\ redesign\ of\ constant\ checking,\ now\ also\ supporting\ from/to\ float/double\n\ \ version\ 070812\ avoid\ internal\ conversion\ of\ constant\ float/double\n\ \ version\ 070727\ replaced\ exSubResolve\ by\ resolve\ as\ there\ is\ nothing\ done\ anymore\n\ \ version\ 070628\ adopted\ changes\ for\ "Expr\ extends\ TypeRef"\n\ \ version\ 070114\ reduced\ access\ level\ where\ possible\n\ \ version\ 070111\ moved\ conversion\ of\ object\ to\ ExConv,\ adapted\ change\ in\ printPos\ and\ compErr\n\ \ version\ 070106\ added\ canGenAddr\n\ \ version\ 070101\ adopted\ change\ in\ genCall\n\ \ version\ 061229\ removed\ access\ to\ firstInstr\n\ \ version\ 061203\ optimized\ calls\ to\ printPos\ and\ compErr\n\ \ version\ 060628\ added\ support\ for\ static\ compilation\n\ \ version\ 060621\ added\ support\ for\ implicit\ conversion-resolve\n\ \ version\ 060620\ added\ missing\ conversion\ in\ getConstLongValue\n\ \ version\ 060619\ bugfix\ for\ register-allocation\ in\ genCondJmp\n\ \ version\ 060607\ initial\ version\n
comment1.params=fid\ il\ ic
comment1.target=ExEnc(int,\ int,\ int)
comment10.params=ctx
comment10.target=sjc.compbase.ExConstInitObj\ getConstInitObj(sjc.compbase.Context)
comment11.params=reg\ ctx
comment11.target=void\ genOutputAddr(int,\ sjc.compbase.Context)
comment12.params=unitContext\ allowSpecialWriteAccess\ resolveFlags\ ctx
comment12.target=boolean\ canGenAddr(sjc.compbase.Unit,\ boolean,\ int,\ sjc.compbase.Context)
comment13.params=reg\ ctx
comment13.target=void\ genOutputVal(int,\ sjc.compbase.Context)
comment14.params=jumpDest\ isTrue\ elseDest\ ctx
comment14.target=void\ genOutputCondJmp(sjc.backend.Instruction,\ boolean,\ sjc.backend.Instruction,\ sjc.compbase.Context)
comment15.params=i\ l\ ctx
comment15.target=boolean\ getIntOfEnc(int,\ long,\ sjc.compbase.Context)
comment16.params=i\ l\ ctx
comment16.target=boolean\ getLongOfEnc(int,\ long,\ sjc.compbase.Context)
comment17.params=i\ l\ ctx
comment17.target=boolean\ getFloatOfEnc(int,\ long,\ sjc.compbase.Context)
comment18.params=i\ l\ ctx
comment18.target=boolean\ getDoubleOfEnc(int,\ long,\ sjc.compbase.Context)
comment2.params=codePrnt
comment2.target=void\ printExpression(sjc.debug.CodePrinter)
comment3.params=ex\ destType\ unitContext\ ctx
comment3.target=sjc.compbase.Expr\ getConvertedResolvedExpr(sjc.compbase.Expr,\ sjc.compbase.TypeRef,\ sjc.compbase.Unit,\ sjc.compbase.Context)
comment4.params=unitContext\ mthdContext\ resolveFlags\ preferredType\ ctx
comment4.target=boolean\ resolve(sjc.compbase.Unit,\ sjc.compbase.Mthd,\ int,\ sjc.compbase.TypeRef,\ sjc.compbase.Context)
comment5.params=unitContext\ ctx
comment5.target=boolean\ implConvResolve(sjc.compbase.Unit,\ sjc.compbase.Context)
comment6.params=ctx
comment6.target=int\ calcConstantType(sjc.compbase.Context)
comment7.params=ctx
comment7.target=int\ getConstIntValue(sjc.compbase.Context)
comment8.params=ctx
comment8.target=long\ getConstLongValue(sjc.compbase.Context)
comment9.params=ctx
comment9.target=boolean\ isCompInitConstObject(sjc.compbase.Context)
numComments=19
