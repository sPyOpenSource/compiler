#BlueJ class context
comment0.target=Expr
comment0.text=\n\ Expr\:\ platform\ and\ language\ independent\ expression\ \n\ \n\ @author\ S.\ Frenz\n\ @version\ 120925\ added\ support\ for\ code\ printer\n\ \ version\ 120404\ removed\ RF_IN_SUPER\ as\ it\ is\ no\ longer\ used\n\ \ version\ 120402\ added\ RF_IN_SUPER\ to\ support\ required\ visibility\ checks\n\ \ version\ 120227\ cleaned\ up\ "package\ sjc."\ typo\n\ \ version\ 101015\ changed\ resolve\ signature\ to\ support\ multiple\ resolve\ flags\n\ \ version\ 100504\ added\ getRightMostExpr,\ getLeftOfRightMostExpr,\ isSuperThisCall,\ resolveSuperThisCall,\ getDestVrbl\n\ \ version\ 100426\ added\ getAssignType\ to\ support\ interface\ arrays\n\ \ version\ 100409\ adopted\ changed\ TypeRef,\ removal\ of\ resolveType-remapping\n\ \ version\ 100408\ added\ remapping\ of\ TypeRef.resolve\ as\ Expr.resolveType\n\ \ version\ 100401\ fixed\ parameter\ names\ of\ canGenAddr\n\ \ version\ 100114\ reorganized\ constant\ object\ handling\n\ \ version\ 091005\ added\ support\ for\ preferredType\ in\ resolving\n\ \ version\ 090724\ added\ flag\ to\ support\ loop\ dependant\ resolving\n\ \ version\ 090718\ added\ support\ for\ non-static\ final\ variables,\ check\ for\ constant\ zero\ expressions\ and\ check\ for\ value\ generation\n\ \ version\ 090207\ added\ copyright\ notice\ and\ inserted\ check\ for\ reg\=\=0\ in\ genOutputAssignTo\n\ \ version\ 090206\ generalized\ genOutputPrepareAssignRefTo\ to\ genOutputPrepareAssignTo\n\ \ version\ 081023\ optimized\ genOutputPrepareAssignRefTo\n\ \ version\ 081021\ adopted\ changed\ Architecture.genComp/genCondJmp\n\ \ version\ 080613\ changed\ hasEffect\ to\ effectType\n\ \ version\ 080525\ adopted\ changed\ Architecture.genCondJmp\ signature\n\ \ version\ 080119\ changed\ signature\ of\ canGenAddr\n\ \ version\ 080118\ added\ support\ for\ type-checking\ in\ assign\n\ \ version\ 070918\ simplified\ error\ reporting\ statements\n\ \ version\ 070909\ optimized\ signature\ of\ resolve\n\ \ version\ 070829\ moved\ magicType\ to\ java\ subpackage\ where\ it\ belongs\n\ \ version\ 070727\ replaced\ exSubResolve\ by\ resolve\ as\ there\ is\ nothing\ done\ anymore,\ move\ is*\ to\ TypeRef\n\ \ version\ 070628\ adopted\ changes\ for\ "Expr\ extends\ TypeRef"\n\ \ version\ 070625\ renamed\ TypeRef.S_*\ to\ T_*\ to\ conform\ with\ StdTypes\n\ \ version\ 070114\ reduced\ access\ level\ where\ possible\n\ \ version\ 070111\ adapted\ change\ in\ printPos\ and\ compErr\n\ \ version\ 070106\ made\ genOutputAddr\ non-abstract,\ added\ canGenAddr,\ renamed\ isAddrOnStack\n\ \ version\ 061229\ removed\ access\ to\ firstInstr\n\ \ version\ 061203\ optimized\ calls\ to\ printPos\ and\ compErr\n\ \ version\ 061202\ removed\ unused\ methods\n\ \ version\ 061129\ static\ TypeRef\ object\ moved\ dynamically\ to\ Context\n\ \ version\ 061111\ minor\ changes\n\ \ version\ 061102\ added\ isStructType()\n\ \ version\ 061030\ changed\ detection\ of\ indirectCall\n\ \ version\ 060607\ initial\ version\n
comment1.params=fid\ il\ ic
comment1.target=Expr(int,\ int,\ int)
comment10.params=ctx
comment10.target=boolean\ isCompInitConstObject(Context)
comment11.params=ctx
comment11.target=ExConstInitObj\ getConstInitObj(Context)
comment12.params=
comment12.target=boolean\ isAddrOnStack()
comment13.params=
comment13.target=boolean\ isConstZero()
comment14.params=
comment14.target=Expr\ getRightMostExpr()
comment15.params=
comment15.target=Expr\ getLeftOfRightMostExpr()
comment16.params=
comment16.target=AccVar\ getDestVar()
comment17.params=ctx
comment17.target=boolean\ isSuperThisCall(Context)
comment18.params=inUnit\ inMthd\ ctx
comment18.target=boolean\ resolveSuperThisCall(Unit,\ Mthd,\ Context)
comment19.params=ctx
comment19.target=void\ genOutput(Context)
comment2.params=unitContext\ mthdContext\ resolveFlags\ preferredType\ ctx
comment2.target=boolean\ resolve(Unit,\ Mthd,\ int,\ TypeRef,\ Context)
comment20.params=destReg\ newValueReg\ newValue\ ctx
comment20.target=void\ genOutputPrepareAssignTo(int,\ int,\ Expr,\ Context)
comment21.params=ctx
comment21.target=int\ getAssignType(Context)
comment22.params=newValueReg\ newValue\ ctx
comment22.target=void\ genOutputAssignTo(int,\ Expr,\ Context)
comment23.params=jumpDest\ isTrue\ nextToken\ ctx
comment23.target=void\ genOutputCondJmp(sjc.backend.Instruction,\ boolean,\ sjc.backend.Instruction,\ Context)
comment3.params=reg\ ctx
comment3.target=void\ genOutputVal(int,\ Context)
comment4.params=prnt
comment4.target=void\ printExpression(sjc.debug.CodePrinter)
comment5.params=reg\ ctx
comment5.target=void\ genOutputAddr(int,\ Context)
comment6.params=unitContext\ allowSpecialWriteAccess\ resolveFlags\ ctx
comment6.target=boolean\ canGenAddr(Unit,\ boolean,\ int,\ Context)
comment7.params=ctx
comment7.target=int\ calcConstantType(Context)
comment8.params=ctx
comment8.target=int\ getConstIntValue(Context)
comment9.params=ctx
comment9.target=long\ getConstLongValue(Context)
numComments=24
