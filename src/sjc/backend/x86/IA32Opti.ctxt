#BlueJ class context
comment0.target=IA32Opti
comment0.text=\n\ IA32Opti\:\ architecture\ implementation\ for\ optimized\ 32\ bit\ protected\ mode\ IA32\ processors\n\ \n\ @author\ S.\ Frenz\n\ @version\ 190322\ fixed\ multi-lea-movmemreg\ offset\ calculation\n\ \ version\ 151026\ adopted\ changed\ X86Base\n\ \ version\ 101224\ added\ MOVZXregreg\n\ \ version\ 100115\ adopted\ changed\ error\ reporting\n\ \ version\ 091109\ added\ support\ for\ POPdummy\n\ \ version\ 091013\ added\ optimization\ for\ calculatable\ address\ for\ PUSHmem\n\ \ version\ 090629\ added\ support\ for\ stack\ extreme\ check\n\ \ version\ 090430\ added\ support\ for\ native\ "return\ missing"\ hint\n\ \ version\ 090307\ optimized\ jump\ optimization,\ limiting\ too\ deep\ analysis\ in\ hasReadAfter\ to\ avoid\ "hanging\ machine"\n\ \ version\ 090207\ added\ copyright\ notice\n\ \ version\ 081209\ added\ support\ for\ method\ printing\n\ \ version\ 081015\ added\ support\ for\ K_NOPT\ mark\n\ \ version\ 080607\ added\ support\ for\ instructions\ required\ for\ language\ throwables\n\ \ version\ 071228\ added\ optimization\ to\ remove\ unnecessary\ MOVregreg\n\ \ version\ 070915\ added\ FWAIT\n\ \ version\ 070816\ added\ FCOMIP\n\ \ version\ 070815\ added\ new\ float/double\ instructions\n\ \ version\ 070812\ added\ support\ for\ float/double\ instructions,\ first\ optimizations\n\ \ version\ 070624\ fixed\ too\ optimistic\ optimization\ for\ LEA-MOVSX\n\ \ version\ 070623\ added\ LEAregmem-MOVregmem-optimization\n\ \ version\ 070611\ fixed\ too\ optimistic\ optimization\ in\ hasReadAfter\n\ \ version\ 070601\ adopted\ change\ of\ boolean\ register\ usage\ in\ IA32\n\ \ version\ 070514\ added\ jump\ following\ flow\ control\ hasReadAfter,\ added\ several\ optimization\ for\ MOVSXregmem\ \n\ \ version\ 070513\ fixed\ insPatchedCall,\ added\ optimization\ for\ ADD/SUB/AND/XOR/OR-regmem\n\ \ version\ 070504\ changed\ naming\ of\ Clss\ to\ Unit,\ changed\ OutputObject\ to\ Unit\n\ \ version\ 070501\ adopted\ optimization\ of\ insPatched\ in\ IA32\n\ \ version\ 070108\ added\ debug-basics,\ added\ optimization\ for\ SHL/SHR-regimm\n\ \ version\ 070104\ added\ push-call-pop-\ and\ movimm-push-optimization\ \n\ \ version\ 070101\ added\ optimization\ for\ MOVSX\ and\ MOVZX\n\ \ version\ 061231\ added\ support\ for\ AND/XOR/OR-regimm\ and\ -memimm\n\ \ version\ 061230\ added\ optimization\ for\ INCmem/DECmem\ and\ memory-ADD/SUB\n\ \ version\ 061229\ removed\ access\ to\ firstInstr\n\ \ version\ 061227\ added\ several\ optimizing\ routines\n\ \ version\ 061225\ adopted\ change\ in\ access\ to\ method\ information\n\ \ version\ 061221\ bugfix\ for\ push\ after\ mov/xor\ optimization\n\ \ version\ 061111\ bugfixes\ and\ extensions\ initiated\ by\ invention\ of\ structs\n\ \ version\ 060723\ extension\ of\ IA32\ to\ reduce\ codesize\n\ \ version\ 060720\ initial\ version\n
comment1.params=first
comment1.target=void\ finalizeInstructions(sjc.backend.Instruction)
comment10.params=first
comment10.target=void\ optimize(sjc.backend.Instruction)
comment11.params=now
comment11.target=boolean\ tryMergeAriReg(sjc.backend.Instruction)
comment12.params=now
comment12.target=boolean\ tryMergeAriImm(sjc.backend.Instruction)
comment13.params=now
comment13.target=sjc.backend.Instruction\ searchCorrespPush(sjc.backend.Instruction)
comment14.params=push\ pop
comment14.target=boolean\ tryReplacePushPop(sjc.backend.Instruction,\ sjc.backend.Instruction)
comment15.params=i\ reg
comment15.target=sjc.backend.Instruction\ searchCorrespImmWriteBefore(sjc.backend.Instruction,\ int)
comment16.params=i\ reg
comment16.target=sjc.backend.Instruction\ searchCorrespWriteBefore(sjc.backend.Instruction,\ int)
comment17.params=i\ reg\ objOnBreaker
comment17.target=sjc.backend.Instruction\ searchCorrespReadAfter(sjc.backend.Instruction,\ int,\ boolean)
comment18.params=i\ reg
comment18.target=boolean\ hasReadAfter(sjc.backend.Instruction,\ int)
comment19.params=i\ reg
comment19.target=boolean\ hasReadAfterRecursive(sjc.backend.Instruction,\ int)
comment2.params=refMthd\ par
comment2.target=void\ insPatchedCall(sjc.compbase.Mthd,\ int)
comment20.params=now
comment20.target=boolean\ effectlessWrite(sjc.backend.Instruction)
comment21.params=now\ end\ reg
comment21.target=sjc.backend.Instruction\ mayBeWritten(sjc.backend.Instruction,\ sjc.backend.Instruction,\ int)
comment3.params=r
comment3.target=int\ readReg(int)
comment4.params=r
comment4.target=int\ writeReg(int)
comment5.params=type\ reg0\ reg1\ disp\ imm\ par
comment5.target=sjc.backend.Instruction\ ins(int,\ int,\ int,\ int,\ int,\ int)
comment6.params=i\ r
comment6.target=boolean\ isRead(sjc.backend.Instruction,\ int)
comment7.params=i\ r
comment7.target=boolean\ isWrite(sjc.backend.Instruction,\ int)
comment8.params=i
comment8.target=boolean\ isRegisterFixed(sjc.backend.Instruction)
comment9.params=i\ type\ reg0\ reg1\ disp\ imm\ par
comment9.target=void\ set(sjc.backend.Instruction,\ int,\ int,\ int,\ int,\ int,\ int)
numComments=22
