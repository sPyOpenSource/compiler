#BlueJ class context
comment0.target=Emulator
comment0.text=\n\ Abstract\ declaration\ of\ an\ emulator\n\ \n\ @author\ Patrick\ Schmidt,\ S.\ Frenz\n\ @version\ 090207\ added\ copyright\ notice\n\ \ version\ 060608\ initial\ version\n\ \n
comment1.params=val
comment1.target=java.lang.String\ toHexString(int)
comment1.text=\n\ Method\ to\ convert\ an\ integer\ to\ a\ hex\ string\n\ @param\ val\ the\ integer\ to\ convert\n\ @return\ the\ string-representation\ of\ the\ string\ in\ hex\n
comment10.params=type\ address\ l
comment10.target=void\ write64(boolean,\ int,\ long)
comment10.text=\n\ Method\ to\ write\ a\ long\ in\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ where\ the\ long\ should\ be\ written\ to\n\ @param\ l\ the\ long\ to\ write\n
comment11.params=type\ address
comment11.target=byte\ read8(boolean,\ int)
comment11.text=\n\ Method\ to\ read\ a\ byte\ from\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ from\ where\ to\ read\ the\ byte\n\ @return\ the\ value\ at\ the\ given\ memory\ address\n
comment12.params=type\ address
comment12.target=short\ read16(boolean,\ int)
comment12.text=\n\ Method\ to\ read\ a\ short\ from\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ from\ where\ to\ read\ the\ short\n\ @return\ the\ value\ at\ the\ given\ memory\ address\n
comment13.params=type\ address
comment13.target=int\ read32(boolean,\ int)
comment13.text=\n\ Method\ to\ read\ an\ int\ from\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ from\ where\ to\ read\ the\ int\n\ @return\ the\ value\ at\ the\ given\ memory\ address\n
comment14.params=type\ address
comment14.target=long\ read64(boolean,\ int)
comment14.text=\n\ Method\ to\ read\ a\ long\ from\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ from\ where\ to\ read\ the\ long\n\ @return\ the\ value\ at\ the\ given\ memory\ address\n
comment15.params=raw\ memSize\ debugOut
comment15.target=boolean\ initFromRawOut(byte[],\ int,\ sjc.osio.TextPrinter)
comment15.text=\n\ Method\ initializing\ the\ basic\ memory\ of\ this\ emulator\ with\ a\ given\ image\n\ @param\ raw\ the\ image\ to\ load\ into\ the\ memory\n\ @param\ memSize\ the\ size\ of\ the\ RAM\ of\ this\ emulator\n\ @param\ debugOut\ a\ Viewer\ to\ pass\ messages\ to\n\ @return\ true\ if\ the\ operation\ succeeds,\ false\ otherwise\n
comment16.params=classDesc\ startIP
comment16.target=boolean\ initArchitecture(int,\ int)
comment16.text=\n\ Method\ to\ init\ the\ class\ descriptor\ and\ the\ instruction\ pointer\ registers\ \n\ with\ the\ the\ given\ parameters\n\ @param\ classDesc\ the\ address\ of\ the\ class\ descriptor\n\ @param\ startIP\ the\ address\ to\ set\ the\ instruction\ pointer\ to\n\ @return\n
comment17.params=into
comment17.target=boolean\ step(boolean)
comment17.text=\n\ Method\ to\ perform\ a\ single\ step\ in\ the\ emulator\n\ @param\ into\ true\ for\ step\ into,\ false\ for\ step\ over\n
comment18.params=
comment18.target=int\ getCurrentIP()
comment18.text=\n\ Method\ to\ obtain\ the\ current\ instruction\ pointer\n\ @return\ the\ current\ instruction\ pointer\ of\ the\ emulator\n
comment19.params=
comment19.target=int\ getCurrentSP()
comment19.text=\n\ Method\ to\ obtain\ the\ current\ stack\ pointer\n\ @return\ the\ current\ stack\ pointer\ of\ the\ emulator\n
comment2.params=val
comment2.target=java.lang.String\ toDecString(int)
comment2.text=\n\ Method\ to\ transform\ an\ integer\ into\ a\ String\n\ @param\ val\ the\ value\ to\ transform\n\ @return\ the\ String\ representation\ of\ the\ given\ value\n
comment20.params=currIP
comment20.target=int\ getStartOfMethod(int)
comment20.text=\n\ Method\ to\ obtain\ the\ first\ instruction\ of\ the\ method\ corresponding\n\ to\ the\ given\ parameter\ currIP\n\ @param\ currIP\ the\ instruction\ inside\ the\ method\n\ @return\ the\ first\ instruction\ (may\ be\ used\ as\ startIP\ in\ other\ calls)\ of\ the\ method\n
comment21.params=currIP
comment21.target=int\ getEndOfMethod(int)
comment21.text=\n\ Method\ to\ obtain\ the\ last\ instruction\ of\ the\ method\ corresponding\n\ to\ the\ given\ parameter\ currIP\n\ @param\ currIP\ the\ instruction\ inside\ the\ method\n\ @return\ the\ last\ instruction\ of\ the\ method\n
comment22.params=startIP
comment22.target=MethodDisassembly\ getMnemonicList(int)
comment22.text=\n\ Method\ to\ obtain\ a\ method\ disassembly\ from\ a\ given\ position\ of\ the\n\ instruction\ pointer\n\ @param\ startIP\ the\ instruction\ pointer\ from\ where\ to\ disassemble\ the\ method\ \n\ @return\ the\ corresponding\ method\ disassembly\n
comment23.params=l
comment23.target=void\ setBreakPointListener(BreakPointListener)
comment23.text=\n\ Method\ to\ set\ a\ Breakpoint-Listener\ which\ is\ informed\ if\ a\ breakpoint\n\ occurs\n\ @param\ l\ the\ breakpoint\ listener\n
comment3.params=val
comment3.target=java.lang.String\ toLongHexString(long)
comment3.text=\n\ Method\ to\ transform\ an\ integer\ into\ its\ hex\ representation\n\ @param\ val\ the\ value\ to\ transform\n\ @return\ the\ hex\ representation\ of\ the\ given\ value\ as\ a\ String\n
comment4.params=address\ size\ type\ read
comment4.target=void\ memCondCheck(int,\ int,\ boolean,\ boolean)
comment4.text=\n\ Method\ checking\ whether\ a\ registered\ breakpoint\ matches\ a\ memory\ access\n\ @param\ address\ the\ address\ accessed\n\ @param\ size\ the\ size\ of\ the\ read/write\ operation\n\ @param\ type\ the\ type\ of\ the\ accessed\ memory\n\ @param\ read\ true\ if\ this\ is\ a\ read,\ false\ otherwise\n
comment5.params=
comment5.target=void\ breakCondCheck()
comment5.text=\n\ Method\ checking\ whether\ a\ registered\ breakpoint\ matches\n\n
comment6.params=block
comment6.target=void\ registerBlock(AddressRange)
comment6.text=\n\ Method\ to\ register\ a\ memory\ block\ in\ this\ emulator\n\ \n\ @param\ block\ an\ instance\ of\ this\ block\n
comment7.params=type\ address\ b
comment7.target=void\ write8(boolean,\ int,\ byte)
comment7.text=\n\ Method\ to\ write\ a\ byte\ in\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ where\ the\ byte\ should\ be\ written\ to\n\ @param\ b\ the\ byte\ to\ write\n
comment8.params=type\ address\ s
comment8.target=void\ write16(boolean,\ int,\ short)
comment8.text=\n\ Method\ to\ write\ a\ short\ in\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ where\ the\ short\ should\ be\ written\ to\n\ @param\ s\ the\ short\ to\ write\n
comment9.params=type\ address\ i
comment9.target=void\ write32(boolean,\ int,\ int)
comment9.text=\n\ Method\ to\ write\ an\ int\ in\ the\ memory\ of\ this\ emulator\n\ @param\ type\ the\ type\ of\ the\ required\ memory\ block\n\ @param\ address\ the\ address\ where\ the\ int\ should\ be\ written\ to\n\ @param\ i\ the\ int\ to\ write\n
numComments=24
